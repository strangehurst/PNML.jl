var documenterSearchIndex = {"docs":
[{"location":"type_hierarchies/","page":"Type Hierarchies","title":"Type Hierarchies","text":"CurrentModule = PNML","category":"page"},{"location":"type_hierarchies/","page":"Type Hierarchies","title":"Type Hierarchies","text":"Overview of some type hierarchies.","category":"page"},{"location":"type_hierarchies/","page":"Type Hierarchies","title":"Type Hierarchies","text":"using AbstractTrees, PNML, InteractiveUtils, Markdown\n#, GraphRecipes,Plots\n\nAbstractTrees.children(x::Type) = subtypes(x)\ntype_tree(t) = println(AbstractTrees.repr_tree(t))","category":"page"},{"location":"type_hierarchies/#PnmlType-Petri-Net-Type-Definition","page":"Type Hierarchies","title":"PnmlType - Petri Net Type Definition","text":"","category":"section"},{"location":"type_hierarchies/","page":"Type Hierarchies","title":"Type Hierarchies","text":"See PnmlTypes module page.","category":"page"},{"location":"type_hierarchies/","page":"Type Hierarchies","title":"Type Hierarchies","text":"There are levels:  Core (Place-Transition), Continuous and High-Level PNG.","category":"page"},{"location":"type_hierarchies/","page":"Type Hierarchies","title":"Type Hierarchies","text":"PnmlCore is a concrete subtype of PnmlType. PnmlCore is used by some PetriNet concrete types (SimpleNet).","category":"page"},{"location":"type_hierarchies/","page":"Type Hierarchies","title":"Type Hierarchies","text":"ContinuousNet uses floating point marking and inscriptions. It is an extension to the ISO specification.","category":"page"},{"location":"type_hierarchies/","page":"Type Hierarchies","title":"Type Hierarchies","text":"HLCore is a concrete subtype of AbstractHLCore. HLCore is used by some PetriNet concrete types (HLPetriNet). Think of it as a testable implementation of AbstractHLCore.","category":"page"},{"location":"type_hierarchies/","page":"Type Hierarchies","title":"Type Hierarchies","text":"The IR does not try to impose semantics on the model. Those semantics should be part of PetriNet.  The IR tries to represent the model (all models) at a structural level. It may paramertize types to facilitate specilaization.","category":"page"},{"location":"type_hierarchies/","page":"Type Hierarchies","title":"Type Hierarchies","text":"type_tree(PNML.PnmlTypes.PnmlType) # hide","category":"page"},{"location":"type_hierarchies/","page":"Type Hierarchies","title":"Type Hierarchies","text":"PnmlType Place Trans Arc Description\nPnmlCore    <name> is only defined label\nPTNet PTM none PTI <initialMarking>, <inscription> labels only have <text>\nHLCore HLM Cond HLI support structure used by all HL Petri Net Graphs\nPT-HLPNG HLM Cond HLI restrict sort to dot, condition always true\nSymmetricNet HLM Cond HLI restrict sorts to finite, annotations have <structure>\nHLNet HLM Cond HLI extend symmetric with arbitrary sorts\nStochastic  Rate  continuous or discrete\nTimed    continuous or discrete\nOpen    continuous or discrete","category":"page"},{"location":"type_hierarchies/","page":"Type Hierarchies","title":"Type Hierarchies","text":"Todo: Continuous Petri Net","category":"page"},{"location":"type_hierarchies/","page":"Type Hierarchies","title":"Type Hierarchies","text":"Abbreviation Full Name Node Label Description\nPTM PTMarking Place \nPTI PTInscription Arc \nHLM HLMarking Place \nHLI HLInscription Arc \nCond Condition Transition \nRate Rate Transition random variable or function of marking, firing rate\nPri Priority Transition firing order of enabled transitions\nWe Weight Transition firing tiebreaker\n   ","category":"page"},{"location":"type_hierarchies/#PetriNet","page":"Type Hierarchies","title":"PetriNet","text":"","category":"section"},{"location":"type_hierarchies/","page":"Type Hierarchies","title":"Type Hierarchies","text":"PetriNet uses the Intermediate Representation and PnmlType to implement a petri Net Graph.","category":"page"},{"location":"type_hierarchies/","page":"Type Hierarchies","title":"Type Hierarchies","text":"type_tree(PNML.PetriNet) # hide","category":"page"},{"location":"type_hierarchies/#PnmlObject","page":"Type Hierarchies","title":"PnmlObject","text":"","category":"section"},{"location":"type_hierarchies/","page":"Type Hierarchies","title":"Type Hierarchies","text":"Page, Arc, Place, Transition define the graph of a petri net.","category":"page"},{"location":"type_hierarchies/","page":"Type Hierarchies","title":"Type Hierarchies","text":"type_tree(PNML.PnmlObject) # hide","category":"page"},{"location":"type_hierarchies/#AbstractLabel","page":"Type Hierarchies","title":"AbstractLabel","text":"","category":"section"},{"location":"type_hierarchies/","page":"Type Hierarchies","title":"Type Hierarchies","text":"Labels are attached to PnmlObjects.  Kinds of label include: marking, inscription, condition and  declarations of sorts, operators, and variables.","category":"page"},{"location":"type_hierarchies/","page":"Type Hierarchies","title":"Type Hierarchies","text":"type_tree(PNML.AbstractLabel) # hide","category":"page"},{"location":"type_hierarchies/","page":"Type Hierarchies","title":"Type Hierarchies","text":"info: Difference between Object and Label\nObjects have ids and Names.\nLabels are attached to Objects.\nSome Labels (attributes) do not have Graphics.\nLabels are extendable.\nLabels are named by the xml tag. Any \"unknown\" tag is presumed to be a label.","category":"page"},{"location":"type_hierarchies/#AbstractPnmlTool","page":"Type Hierarchies","title":"AbstractPnmlTool","text":"","category":"section"},{"location":"type_hierarchies/","page":"Type Hierarchies","title":"Type Hierarchies","text":"See ToolInfo.","category":"page"},{"location":"type_hierarchies/","page":"Type Hierarchies","title":"Type Hierarchies","text":"type_tree(PNML.AbstractPnmlTool) # hide","category":"page"},{"location":"type_hierarchies/#PnmlException","page":"Type Hierarchies","title":"PnmlException","text":"","category":"section"},{"location":"type_hierarchies/","page":"Type Hierarchies","title":"Type Hierarchies","text":"type_tree(PNML.PnmlException) # hide","category":"page"},{"location":"type_hierarchies/#AbstractDeclaration","page":"Type Hierarchies","title":"AbstractDeclaration","text":"","category":"section"},{"location":"type_hierarchies/","page":"Type Hierarchies","title":"Type Hierarchies","text":"Labels attached to PnmlNet and/or Page.","category":"page"},{"location":"type_hierarchies/","page":"Type Hierarchies","title":"Type Hierarchies","text":"type_tree(PNML.AbstractDeclaration) # hide","category":"page"},{"location":"type_hierarchies/#AbstractSort","page":"Type Hierarchies","title":"AbstractSort","text":"","category":"section"},{"location":"type_hierarchies/","page":"Type Hierarchies","title":"Type Hierarchies","text":"High-level net's Place has a sort. ","category":"page"},{"location":"type_hierarchies/","page":"Type Hierarchies","title":"Type Hierarchies","text":"type_tree(PNML.AbstractSort) # hide","category":"page"},{"location":"type_hierarchies/#AbstractTerm","page":"Type Hierarchies","title":"AbstractTerm","text":"","category":"section"},{"location":"type_hierarchies/","page":"Type Hierarchies","title":"Type Hierarchies","text":"Part of the many-sorted algebra of a High-level net.","category":"page"},{"location":"type_hierarchies/","page":"Type Hierarchies","title":"Type Hierarchies","text":"type_tree(PNML.AbstractTerm) # hide","category":"page"},{"location":"API/pnmltypes/#PnmlTypes","page":"PnmlTypes","title":"PnmlTypes","text":"","category":"section"},{"location":"API/pnmltypes/","page":"PnmlTypes","title":"PnmlTypes","text":"CurrentModule = PNML.PnmlTypes","category":"page"},{"location":"API/pnmltypes/","page":"PnmlTypes","title":"PnmlTypes","text":"Pages = [\"pnmltypes.md\"]\nDepth = 2","category":"page"},{"location":"API/pnmltypes/","page":"PnmlTypes","title":"PnmlTypes","text":"Modules = [PnmlTypes]\nOrder = [:module]","category":"page"},{"location":"API/pnmltypes/#PNML.PnmlTypes","page":"PnmlTypes","title":"PNML.PnmlTypes","text":"Kind of Petri Net. Petri Net Type Definition (pntd) URI mapped to PnmlType subtype singleton.\n\nImports\n\nBase\nCore\nDocStringExtensions\nPNML\n\nExports\n\nAbstractContinuousCore\nAbstractHLCore\nContinuousNet\nHLCore\nHLNet\nOpenNet\nPTNet\nPT_HLPNG\nPnmlCore\nPnmlType\nStochasticNet\nSymmetricNet\nTimedNet\npnmltype\npntd_symbol\n\n\n\n\n\n","category":"module"},{"location":"API/pnmltypes/#Types","page":"PnmlTypes","title":"Types","text":"","category":"section"},{"location":"API/pnmltypes/","page":"PnmlTypes","title":"PnmlTypes","text":"Modules = [PnmlTypes]\nOrder = [:type]","category":"page"},{"location":"API/pnmltypes/#PNML.PnmlTypes.AbstractContinuousCore","page":"PnmlTypes","title":"PNML.PnmlTypes.AbstractContinuousCore","text":"abstract type AbstractContinuousCore <: PnmlType\n\nUses floating point numbers for markings, inscriptions, and conditions.\n\n\n\n\n\n","category":"type"},{"location":"API/pnmltypes/#PNML.PnmlTypes.AbstractHLCore","page":"PnmlTypes","title":"PNML.PnmlTypes.AbstractHLCore","text":"Base of High Level Petri Net pntds. See SymmetricNet, PT_HLPNG and others.\n\nabstract type AbstractHLCore <: PnmlType\n\n\n\n\n\n","category":"type"},{"location":"API/pnmltypes/#PNML.PnmlTypes.ContinuousNet","page":"PnmlTypes","title":"PNML.PnmlTypes.ContinuousNet","text":"TODO: Continuous Petri Net Concrete type.\n\nstruct ContinuousNet <: AbstractContinuousCore\n\n\n\n\n\n","category":"type"},{"location":"API/pnmltypes/#PNML.PnmlTypes.HLCore","page":"PnmlTypes","title":"PNML.PnmlTypes.HLCore","text":"High-Level Petri Net Graphs (HLPNGs) add large extensions to core. The HLCore can be used for generic high-level nets. We try to implement and test all function at PnmlCore level, but expect to find use for a concrete type at this level.\n\nstruct HLCore <: AbstractHLCore\n\n\n\n\n\n","category":"type"},{"location":"API/pnmltypes/#PNML.PnmlTypes.HLNet","page":"PnmlTypes","title":"PNML.PnmlTypes.HLNet","text":"HLNet is the most intricate High-Level Petri Net schema. It extends SymmetricNet, including with\n\ndeclarations for sorts and functions (ArbitraryDeclarations)\nsorts for Integer, String, and List\n\nstruct HLNet <: AbstractHLCore\n\n\n\n\n\n","category":"type"},{"location":"API/pnmltypes/#PNML.PnmlTypes.OpenNet","page":"PnmlTypes","title":"PNML.PnmlTypes.OpenNet","text":"TODO: Open Petri Net\n\nstruct OpenNet <: AbstractHLCore\n\n\n\n\n\n","category":"type"},{"location":"API/pnmltypes/#PNML.PnmlTypes.PTNet","page":"PnmlTypes","title":"PNML.PnmlTypes.PTNet","text":"Place-Transition Petri Nets add small extensions to core. The grammer file is ptnet.pnml so we name it PTNet. Note that 'PT' is often the prefix for XML tags specilized for this net type.\n\nstruct PTNet <: PnmlType\n\n\n\n\n\n","category":"type"},{"location":"API/pnmltypes/#PNML.PnmlTypes.PT_HLPNG","page":"PnmlTypes","title":"PNML.PnmlTypes.PT_HLPNG","text":"Place-Transition Net in HLCore notation (HLPNG=High-Level Petri Net Graph).\n\nstruct PT_HLPNG <: AbstractHLCore\n\n\n\n\n\n","category":"type"},{"location":"API/pnmltypes/#PNML.PnmlTypes.PnmlCore","page":"PnmlTypes","title":"PNML.PnmlTypes.PnmlCore","text":"The most minimal concrete Petri Net. Used to implement and test the complete Petri Net Graph infrastructure. Labels of the graph is where meaning is attached. Much of the Label infrastructure for High Level Petri Net Graphs is tested at this level. Subtypes of PnmlType should be used to specialize Labels for expressiveness and optimization.\n\nstruct PnmlCore <: PnmlType\n\n\n\n\n\n","category":"type"},{"location":"API/pnmltypes/#PNML.PnmlTypes.PnmlType","page":"PnmlTypes","title":"PNML.PnmlTypes.PnmlType","text":"Abstract root of a dispatch type based on Petri Net Type Definition (pntd).\n\nEach Petri Net Markup Language (PNML) network element will have a single pntd URI as a required 'type' XML attribute. That URI should refer to a RelaxNG schema defining the syntax and semantics of the XML model.\n\nSelected abbreviations, URIs that do not resolve to a valid schema file, are also allowed.\n\nRefer to pntd_symbol and pnmltype for how to get from the URI to a singleton.\n\nabstract type PnmlType\n\n\n\n\n\n","category":"type"},{"location":"API/pnmltypes/#PNML.PnmlTypes.StochasticNet","page":"PnmlTypes","title":"PNML.PnmlTypes.StochasticNet","text":"TODO: Stochastic Petri Net\n\nstruct StochasticNet <: AbstractHLCore\n\n\n\n\n\n","category":"type"},{"location":"API/pnmltypes/#PNML.PnmlTypes.SymmetricNet","page":"PnmlTypes","title":"PNML.PnmlTypes.SymmetricNet","text":"Symmetric Petri Net is the best-worked use case on the primer and ISO specification part 2.\n\nstruct SymmetricNet <: AbstractHLCore\n\n\n\n\n\n","category":"type"},{"location":"API/pnmltypes/#PNML.PnmlTypes.TimedNet","page":"PnmlTypes","title":"PNML.PnmlTypes.TimedNet","text":"TODO: Timed Petri Net\n\nstruct TimedNet <: AbstractHLCore\n\n\n\n\n\n","category":"type"},{"location":"API/pnmltypes/#Constants","page":"PnmlTypes","title":"Constants","text":"","category":"section"},{"location":"API/pnmltypes/","page":"PnmlTypes","title":"PnmlTypes","text":"Docstrings for constants. This includes type  aliases.","category":"page"},{"location":"API/pnmltypes/","page":"PnmlTypes","title":"PnmlTypes","text":"Modules = [PnmlTypes]\nOrder = [:constant]","category":"page"},{"location":"API/pnmltypes/#PNML.PnmlTypes.default_pntd_map","page":"PnmlTypes","title":"PNML.PnmlTypes.default_pntd_map","text":"Map from Petri Net Type Definition (pntd) URI to Symbol. Allows multiple strings to map to the same pntd.\n\nThere is a companion map pnmltype_map that takes the symbol to a type object.\n\nThe URI is a string and may be the full URL of a pntd schema, just the schema file name, or a placeholder for a future schema.\n\nExamples\n\nThe 'pntd symbol' should match the name used in the URI with inconvinient characters removed or replaced. For example, '-' is replaced by '_'.\n\n\n\n\n\n","category":"constant"},{"location":"API/pnmltypes/#PNML.PnmlTypes.pnmltype_map","page":"PnmlTypes","title":"PNML.PnmlTypes.pnmltype_map","text":"The key Symbols are the supported kinds of Petri Nets.\n\n\n\n\n\n","category":"constant"},{"location":"API/pnmltypes/#Functions","page":"PnmlTypes","title":"Functions","text":"","category":"section"},{"location":"API/pnmltypes/","page":"PnmlTypes","title":"PnmlTypes","text":"Docstrings for functions.","category":"page"},{"location":"API/pnmltypes/","page":"PnmlTypes","title":"PnmlTypes","text":"Modules = [PnmlTypes]\nOrder = [:function]","category":"page"},{"location":"API/pnmltypes/#PNML.PnmlTypes.add_nettype!-Union{Tuple{T}, Tuple{AbstractDict, Symbol, T}} where T<:PnmlType","page":"PnmlTypes","title":"PNML.PnmlTypes.add_nettype!","text":"add_nettype!(dict::AbstractDict, s::Symbol, pntd::PnmlType) -> PnmlType\n\n\nAdd or replace mapping from symbol s to nettype dispatch singleton t.\n\n\n\n\n\n","category":"method"},{"location":"API/pnmltypes/#PNML.PnmlTypes.pnmltype","page":"PnmlTypes","title":"PNML.PnmlTypes.pnmltype","text":"pnmltype(pntd::T; kw...)\npnmltype(uri::AbstractString; kw...)\nfunction pnmltype(s::Symbol; pnmltype_map=pnmltype_map, kw...)\n\nMap either a text string or a symbol to a dispatch type singlton.\n\nWhile that string may be a URI for a pntd, we treat it as a simple string without parsing. The PnmlTypes.pnmltype_map and PnmlTypes.default_pntd_map are both assumed to be correct here.\n\nUnknown or empty uri will map to symbol :pnmlcore. Unknown symbol throws a PNML.MalformedException\n\nExamples\n\njulia> pnmltype(PnmlCore())\nPnmlCore()\n\njulia> pnmltype(\"nonstandard\")\nPnmlCore()\n\njulia> pnmltype(:symmetric)\nSymmetricNet()\n\n\n\n\n\n","category":"function"},{"location":"API/pnmltypes/#PNML.PnmlTypes.pntd_symbol-Tuple{String}","page":"PnmlTypes","title":"PNML.PnmlTypes.pntd_symbol","text":"pntd_symbol(s::String) -> Symbol\n\n\nMap string s to a pntd symbol using default_pntd_map. Any unknown s is mapped to :pnmlcore. Returned symbol is suitable for pnmltype to use to index into pnmltype_map.\n\nExamples\n\njulia> PnmlTypes.pntd_symbol(\"foo\")\n:pnmlcore\n\n\n\n\n\n","category":"method"},{"location":"API/pnmltypes/#Macros","page":"PnmlTypes","title":"Macros","text":"","category":"section"},{"location":"API/pnmltypes/","page":"PnmlTypes","title":"PnmlTypes","text":"Docstrings for macros.","category":"page"},{"location":"API/pnmltypes/","page":"PnmlTypes","title":"PnmlTypes","text":"Modules = [PnmlTypes]\nOrder = [:macro]","category":"page"},{"location":"IR/","page":"Intermediate Representation","title":"Intermediate Representation","text":"CurrentModule = PNML","category":"page"},{"location":"IR/#Intermediate-Representation","page":"Intermediate Representation","title":"Intermediate Representation","text":"","category":"section"},{"location":"IR/","page":"Intermediate Representation","title":"Intermediate Representation","text":"The intermediate representation (IR) is between the XML model and a \"usable\" network. Many different flavors of Petri Nets are expected  to be implemented using the IR.","category":"page"},{"location":"IR/","page":"Intermediate Representation","title":"Intermediate Representation","text":"The IR is constructed by traversing the XML and using tag names as dictonary keys.","category":"page"},{"location":"IR/","page":"Intermediate Representation","title":"Intermediate Representation","text":"In the first part of parsing, a PnmlDict is filled with appropriate  initial values for each xml tag. Then optional child keys have values bound  as they are parsed. ","category":"page"},{"location":"IR/","page":"Intermediate Representation","title":"Intermediate Representation","text":"The second part of parsing instantiates objects using a PnmlDict as input.","category":"page"},{"location":"IR/","page":"Intermediate Representation","title":"Intermediate Representation","text":"The structure of the IR follows the tree structure of a well-formed XML document and the PNML specification.","category":"page"},{"location":"IR/","page":"Intermediate Representation","title":"Intermediate Representation","text":"XML attribute names and child element tag names are used for keys  of the same dictonary. The pnml specification/schemas do not use colliding names. However, the <toolspecific> tag's content is not required to be valid pnml, just well-formed XML. We assume nobody would use colliding names intentionally.","category":"page"},{"location":"IR/","page":"Intermediate Representation","title":"Intermediate Representation","text":"The crude structure required by the pnmlcore schema: PnmlModel","category":"page"},{"location":"IR/","page":"Intermediate Representation","title":"Intermediate Representation","text":"Net\nPage\n- Places, Marking\n- Transitions, Condition\n- Arcs, Inscription\n- Toolinfos \n- Labels\n- Subpages\nName","category":"page"},{"location":"IR/","page":"Intermediate Representation","title":"Intermediate Representation","text":"- Toolinfos\n- Labels","category":"page"},{"location":"IR/","page":"Intermediate Representation","title":"Intermediate Representation","text":"The IR is implemented under the assumption the the input pnml file is valid. All tags are assumed to be meaningful to the resulting network. The pnmlcore schema requires undefined tags will be considered pnml labels. The IR is capable of handling arbitrary labels. Many label tags from higherlevel pnml schemas are recognized by the IR parsers.","category":"page"},{"location":"IR/","page":"Intermediate Representation","title":"Intermediate Representation","text":"While the Petri Net Type Definition (pntd) is present in every valid net, it was not necessary to consult the type during creation of the IR.  It is expected that conforming to pntd will be done at a higher level.","category":"page"},{"location":"IR/","page":"Intermediate Representation","title":"Intermediate Representation","text":"Some parts of pnml are complicated. Not yet completed bits may be implemented as weappers holdind unparsed XML. In fact, parts of pnml are specified as holding  any well-formed XML.","category":"page"},{"location":"IR/","page":"Intermediate Representation","title":"Intermediate Representation","text":"Between the tags explicitly handled by the IR and the generic label collection the higher level network ","category":"page"},{"location":"IR/#History-of-this-IR","page":"Intermediate Representation","title":"History of this IR","text":"","category":"section"},{"location":"IR/","page":"Intermediate Representation","title":"Intermediate Representation","text":"Started as nested Dict{Symbol,Any} see PnmlDict. ","category":"page"},{"location":"IR/","page":"Intermediate Representation","title":"Intermediate Representation","text":"2021-12-15, Began the process of moving to a struct-based scheme  based on PnmlModel and the rest of the intermediate representation.","category":"page"},{"location":"IR/","page":"Intermediate Representation","title":"Intermediate Representation","text":"Some instances of PnmlDict are still present in the parsing mechanism.","category":"page"},{"location":"IR/","page":"Intermediate Representation","title":"Intermediate Representation","text":"As experience with building & using more complicated pnml network models, more of the IR will be implemented or changed.","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"CurrentModule = PNML","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"Pages = [\"interface.md\"]\nDepth = 5","category":"page"},{"location":"interface/#Interface","page":"Interfaces","title":"Interface","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"The intermediate representation is used to implement networks expressed in a pnml model. The consumer of the IR is a network, most naturally a varity of Petri Net.","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"High-Level Petri Net Graphs (HLPNG) can be expressed in a pnml model.","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"PnmlDict is an alias for Dict{Symbol,Any}. Each XML tag is first parsed into a PnmlDict, many are then used to create higher-level types. Some parts will continue to find use for PnmlDict's flexibility.","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"AnyElement wraps a PnmlDict and XMLNode.","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"We start a description of the net IR here.","category":"page"},{"location":"interface/#Top-Level:-Model,-Net,-Page","page":"Interfaces","title":"Top Level: Model, Net, Page","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"At the top level a <pnml> model is one or more networks::PnmlNet, each described by a <net> tag and one or more <page> tags.","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"Page is mostly present for visual presentation to humans. It also contains PnmlObject types that implement the Petri Net Graph (PNG).","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"ObjectCommon is a field of most types. This allows Graphics and ToolInfo to appear almost anywhere in the PNG.","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"While Graphics is implemented as part of ObjectCommon it is not dicussed further (until someone extends/uses it).","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"ObjectCommon  also has ToolInfo used to attach well-formed XML. TODO: Need way to parse <toolspecific> that is flexible/extendable.","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"Parse pnml for input, worry about writing back out and interchange later (future extensions). Another future extension may be to use pages for distributed computing.","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"The pnml specification permits that multiple pages to be flattened (by flatten_pages!) to a single Page before use. Using them unflattened is not supposed to be impossible, but is not the arena or the initial use cases (in no paticular order): adapting to use graph tools, agent based modeling, sciml, etc.","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"PetriNet subtypes wrap and extend PnmlNet. PnmlNet and its contents can be considered an intermediate representation (IR). A concrete PetriNet type uses the IR to produce higher-level behavior. This is the level at which flatten_pages! and deref! operate.","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"PetriNet is the level of most Petri Net Graph semantics. One example is enforcing integer, non-negative, positive.","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"Remember, the IR trys to be as promiscuous as possible.","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"XML <net> tags are 1st parsed into PnmlDict which is used to construct a PnmlNet:","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"key value description\ntag XML tag name is standard in the IR\nid unique ID\nname text name, optional\ntools list of tool specific - possibly empty\nlabels list of generic \"pnml labels\" - possible empty\ntype PnmlType defines schema the XML should meet\ndeclarations defines high-level semantics of a net\npages list of pages - not empty","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"See parse_net for more detail.","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"XML <page> tags are also 1st parsed into PnmlDict which is used to construct a Page:","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"key value description\ntag XML tag name is standard in the IR\nid unique ID\nname text name, optional\ntools list of tool specific - possibly empty\nlabels list of generic \"pnml labels\" - possible empty\nplaces list of places\ntrans list of transitions\narcs list of arcs\nrefP references to place on different page\nrefT references to transition on different page\ndeclarations only net & page tags have declarations","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"See also: parse_page.","category":"page"},{"location":"interface/#Places","page":"Interfaces","title":"Places","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"Properties that various places may have one or more of:","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"discrete\ncontinuous\ntimed","category":"page"},{"location":"interface/#Transitions","page":"Interfaces","title":"Transitions","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"Properties that various transitions may have one or more of:","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"discrete\ncontinuous\nhybrid of discrete & continuous subnets\nstochastic\nimmediate\ndeterministically time delayed\nscheduled","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"The pnml schemas and primer only try to cover the discrete case as High-Level nets. With a lot of multi-sorted algebra to make it complicated enough to be challanging.","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"Continous support is present where possible. For instance, when a number appers in the XML number_value is used to parse the string to Int or `Float64. This is currently (2022) \"non-standard\" so such pnml files will not be generally interchangable with other tools.","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"https://www.sciencedirect.com/science/article/pii/S0303264721001714#b8","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"'Discrete, Continuous, and Hybrid Petri Nets' Rene David and Hassane Alla","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"See rate for a use of non-standard labels by SimpleNet. Implements a continuous petri net as part of the first working use-case. Demonstrates the expressiveness of pnml.","category":"page"},{"location":"interface/#Petri-Net-Graphs-and-Networks","page":"Interfaces","title":"Petri Net Graphs and Networks","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"There are 3 top-level forms:","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"PetriNet subtypes wraping a single PnmlNet.\nPnmlNet  maybe multiple pages.\nPage when the only page of the only net in a petrinet.","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"The simplest arrangement is a pnml model with a single <net> element having a single page. Any <net> may be flatten to a single page.","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"The initial PetriNet subtypes are built using the assumption that multiple pages will be flattened to a single page.","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"using AbstractTrees, PNML, InteractiveUtils, Markdown","category":"page"},{"location":"interface/#Simple-Interface-Methods","page":"Interfaces","title":"Simple Interface Methods","text":"","category":"section"},{"location":"interface/#pid-get-PNML-ID-symbol","page":"Interfaces","title":"pid - get PNML ID symbol","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"Objects within a pnml graph have unique identifiers, which are used for referring to the object. This includes: PnmlObject subtypes, PnmlNet.","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"PNML.pid","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.pid) # hide","category":"page"},{"location":"interface/#name-get-name","page":"Interfaces","title":"name - get name","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"PnmlObjects and PnmlNets have a name label.  Declarations have a name attribute. `ToolInfos have a toolname attribute.","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"PNML.name","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.name) # hide","category":"page"},{"location":"interface/#tag-access-XML-tag-symbol","page":"Interfaces","title":"tag - access XML tag symbol","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"PNML.tag","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.tag) # hide","category":"page"},{"location":"interface/#has_xml-is-xml-attached","page":"Interfaces","title":"has_xml - is xml attached","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"PNML.has_xml","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.has_xml) # hide","category":"page"},{"location":"interface/#xmlnode-access-xml","page":"Interfaces","title":"xmlnode - access xml","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"PNML.xmlnode","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.xmlnode) # hide","category":"page"},{"location":"interface/#nettype-return-PnmlType-identifying-PNTD","page":"Interfaces","title":"nettype - return PnmlType identifying PNTD","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"PNML.nettype","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.nettype) # hide","category":"page"},{"location":"interface/#Nodes-of-Petri-Net-Graph","page":"Interfaces","title":"Nodes of Petri Net Graph","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"Return vector of nodes.","category":"page"},{"location":"interface/#places","page":"Interfaces","title":"places","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"PNML.places","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.places) # hide","category":"page"},{"location":"interface/#transitions","page":"Interfaces","title":"transitions","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"PNML.transitions","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.transitions) # hide","category":"page"},{"location":"interface/#arcs","page":"Interfaces","title":"arcs","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"PNML.arcs","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.arcs) # hide","category":"page"},{"location":"interface/#refplaces","page":"Interfaces","title":"refplaces","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"PNML.refplaces","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.refplaces)  # hide","category":"page"},{"location":"interface/#reftransitions","page":"Interfaces","title":"reftransitions","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"PNML.reftransitions","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.reftransitions)  # hide","category":"page"},{"location":"interface/#Node-Predicates-uses-PNML-ID","page":"Interfaces","title":"Node Predicates - uses PNML ID","text":"","category":"section"},{"location":"interface/#has_place","page":"Interfaces","title":"has_place","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"PNML.has_place","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.has_place)  # hide","category":"page"},{"location":"interface/#has_transition","page":"Interfaces","title":"has_transition","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"PNML.has_place","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.has_transition)  # hide","category":"page"},{"location":"interface/#has_arc","page":"Interfaces","title":"has_arc","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"PNML.has_arc","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.has_arc) # hide","category":"page"},{"location":"interface/#has_refP","page":"Interfaces","title":"has_refP","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"PNML.has_refP","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.has_refP)  # hide","category":"page"},{"location":"interface/#has_refT","page":"Interfaces","title":"has_refT","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"PNML.has_refT","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.has_refT)  # hide","category":"page"},{"location":"interface/#Node-Access-uses-PNML-ID","page":"Interfaces","title":"Node Access - uses PNML ID","text":"","category":"section"},{"location":"interface/#place","page":"Interfaces","title":"place","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"PNML.place","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.place)  # hide","category":"page"},{"location":"interface/#transition","page":"Interfaces","title":"transition","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"PNML.transition","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.transition) # hide","category":"page"},{"location":"interface/#arc","page":"Interfaces","title":"arc","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"PNML.arc","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.arc)  # hide","category":"page"},{"location":"interface/#refplace","page":"Interfaces","title":"refplace","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"PNML.refplace","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.refplace)  # hide","category":"page"},{"location":"interface/#reftransition","page":"Interfaces","title":"reftransition","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"PNML.reftransition","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.reftransition)  # hide","category":"page"},{"location":"interface/#Node-ID-Vector","page":"Interfaces","title":"Node ID Vector","text":"","category":"section"},{"location":"interface/#place_ids","page":"Interfaces","title":"place_ids","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"PNML.place_ids","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.place_ids)  # hide","category":"page"},{"location":"interface/#transition_ids","page":"Interfaces","title":"transition_ids","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"PNML.transition_ids","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.transition_ids)  # hide","category":"page"},{"location":"interface/#arc_ids","page":"Interfaces","title":"arc_ids","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"PNML.arc_ids","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.arc_ids)  # hide","category":"page"},{"location":"interface/#refplace_ids","page":"Interfaces","title":"refplace_ids","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"PNML.refplace_ids","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.refplace_ids)  # hide","category":"page"},{"location":"interface/#reftransition_ids","page":"Interfaces","title":"reftransition_ids","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"PNML.reftransition_ids","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.reftransition_ids)  # hide","category":"page"},{"location":"interface/#Arc-Related","page":"Interfaces","title":"Arc Related","text":"","category":"section"},{"location":"interface/#all_arcs-source-or-target-is-PNML-ID","page":"Interfaces","title":"all_arcs - source or target is PNML ID","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"PNML.all_arcs","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.all_arcs)  # hide","category":"page"},{"location":"interface/#src_arcs-source-is-PNML-ID","page":"Interfaces","title":"src_arcs - source is PNML ID","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"PNML.src_arcs","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.src_arcs)  # hide","category":"page"},{"location":"interface/#tgt_arcs-target-is-PNML-ID","page":"Interfaces","title":"tgt_arcs - target is PNML ID","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"tgt_arcs","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.tgt_arcs)  # hide","category":"page"},{"location":"interface/#inscription-evaluate-inscription-value-(or-return-default)","page":"Interfaces","title":"inscription - evaluate inscription value (or return default)","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"inscription","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.inscription)  # hide","category":"page"},{"location":"interface/#deref!-dereference-all-references-of-flattened-net","page":"Interfaces","title":"deref! - dereference all references of flattened net","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"deref!","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.deref!)  # hide","category":"page"},{"location":"interface/#deref_place-derefeence-one-place","page":"Interfaces","title":"deref_place - derefeence one place","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"deref_place","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.deref_place)  # hide","category":"page"},{"location":"interface/#deref_transition-dereference-one-transition","page":"Interfaces","title":"deref_transition - dereference one transition","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"deref_transition","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.deref_transition)  # hide","category":"page"},{"location":"interface/#Place-Related","page":"Interfaces","title":"Place Related","text":"","category":"section"},{"location":"interface/#marking-evaluate-marking-value-(or-return-default)","page":"Interfaces","title":"marking - evaluate marking value (or return default)","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"marking","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.marking)  # hide","category":"page"},{"location":"interface/#initialMarking","page":"Interfaces","title":"initialMarking -","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"initialMarking","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.initialMarking)  # hide","category":"page"},{"location":"interface/#Transition-Related","page":"Interfaces","title":"Transition Related","text":"","category":"section"},{"location":"interface/#conditions-collect-evaluated-conditions","page":"Interfaces","title":"conditions - collect evaluated conditions","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"conditions","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.conditions)  # hide","category":"page"},{"location":"interface/#condition-evaluate-condition-of-one-transition","page":"Interfaces","title":"condition - evaluate condition of one transition","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"condition","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.condition)  # hide","category":"page"},{"location":"interface/#transition_function-return-LVector-of-in_out-for-all-transitions","page":"Interfaces","title":"transition_function - return LVector of in_out for all transitions","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"transition_function","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.transition_function)  # hide","category":"page"},{"location":"interface/#in_out-tuple-of-ins,-outs-of-one-transition","page":"Interfaces","title":"in_out - tuple of ins, outs of one transition","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"in_out","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.in_out)  # hide","category":"page"},{"location":"interface/#ins-LVector-of-source-arc-evaluated-inscriptions.","page":"Interfaces","title":"ins - LVector of source arc evaluated inscriptions.","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"ins","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.ins)  # hide","category":"page"},{"location":"interface/#outs-LVector-of-target-arc-evaluated-inscriptions.","page":"Interfaces","title":"outs - LVector of target arc evaluated inscriptions.","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"outs","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.outs)  # hide","category":"page"},{"location":"interface/#Labels-Annotation-and-HLAnnotation","page":"Interfaces","title":"Labels - Annotation and HLAnnotation","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"Both have ObjectCommon. HLAnnotation adds optional <text>, <structure>.","category":"page"},{"location":"interface/#has_text","page":"Interfaces","title":"has_text","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"has_text","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.has_text) # hide","category":"page"},{"location":"interface/#has_structure","page":"Interfaces","title":"has_structure","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"has_structure","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.has_structure) # hide","category":"page"},{"location":"interface/#text","page":"Interfaces","title":"text","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"text","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.text) # hide","category":"page"},{"location":"interface/#structure","page":"Interfaces","title":"structure","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"structure","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.structure) # hide","category":"page"},{"location":"interface/#has_labels-do-any-exist","page":"Interfaces","title":"has_labels - do any exist","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"has_labels","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.has_labels) # hide","category":"page"},{"location":"interface/#has_label-does-a-specific-label-exist","page":"Interfaces","title":"has_label - does a specific label exist","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"has_label","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.has_label) # hide","category":"page"},{"location":"interface/#get_label-get-a-specific-label","page":"Interfaces","title":"get_label - get a specific label","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"get_label","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.get_label) # hide","category":"page"},{"location":"interface/#ToolInfo","page":"Interfaces","title":"ToolInfo","text":"","category":"section"},{"location":"interface/#has_toolinfo-does-a-specific-toolinfo-exist","page":"Interfaces","title":"has_toolinfo - does a specific toolinfo exist","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"has_toolinfo","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.has_toolinfo) # hide","category":"page"},{"location":"interface/#get_toolinfo-get-a-specific-toolinfo-exist","page":"Interfaces","title":"get_toolinfo - get a specific toolinfo exist","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"get_toolinfo","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.get_toolinfo) # hide","category":"page"},{"location":"interface/#PnmlType-traits","page":"Interfaces","title":"PnmlType traits","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"See PnmlTypes for details of the module.","category":"page"},{"location":"acknowledgments/#Acknowledgments","page":"Acknowledgments","title":"Acknowledgments","text":"","category":"section"},{"location":"acknowledgments/#MathML.jl","page":"Acknowledgments","title":"MathML.jl","text":"","category":"section"},{"location":"acknowledgments/","page":"Acknowledgments","title":"Acknowledgments","text":"Its function map architecture was adopted and (permute|perverse|use)d in PNML.j.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"CurrentModule = PNML","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Pages = [\"examples.md\"]\nDepth = 5","category":"page"},{"location":"examples/#Lotka-Volterra","page":"Examples","title":"Lotka-Volterra","text":"","category":"section"},{"location":"examples/#Petri.jl-Starting-Point","page":"Examples","title":"Petri.jl Starting Point","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"https://github.com/mehalter/Petri.jl","category":"page"},{"location":"examples/#Example-2","page":"Examples","title":"Example 2","text":"","category":"section"},{"location":"examples/#Stuff-for-example-2","page":"Examples","title":"Stuff for example 2","text":"","category":"section"},{"location":"API/library/","page":"PNML","title":"PNML","text":"CurrentModule = PNML","category":"page"},{"location":"API/library/","page":"PNML","title":"PNML","text":"Pages = [\"library.md\"]\nDepth = 2","category":"page"},{"location":"API/library/#PNML-Reference","page":"PNML","title":"PNML Reference","text":"","category":"section"},{"location":"API/library/","page":"PNML","title":"PNML","text":"Modules = [PNML]\nOrder = [:module]","category":"page"},{"location":"API/library/#PNML.PNML","page":"PNML","title":"PNML.PNML","text":"PNML\n\nPetri Net Markup Language, is an XML-based format. PNML.jl reads a pnml model and emits an intermediate representation (IR).\n\nThe intermediate representation (IR) represents the XML tree via julia data structures: dictionaries, NamedTuples, LabelledArrays, strings, numbers, objects, vectors. The exact mixture changes as the project continues.\n\nThe tags of the XML are used as keys and names as much as possible.\n\nWhat is accepted as values is often a superset of what the pntd schema specifies. This can be thought of as duck-typing. Conforming to the pntd is not the role of the IR.\n\nOn top of the IR is (will be) implemented Petri Net adaptions and interpertations. This is the level that pntd conformance can be imposed. Adaption to julia packages for graphs, agents, and composing into the greater hive-mind. \n\nTODO\n\nFeatures that have not been started:\n\nWrite pnml file\nUpdate pnml model\nCreate pnml model\nGraphs.jl\n\nFeatures that are not complete:\n\npnml high-level marking, inscription, condition\npntd schemas- specialize where? \n\n* Symbolics support (is this where PnmlType is useful?)\n\ntoolspecific usage example\n\n(Image: Stable) (Image: Dev) (Image: Build Status) (Image: Coverage)\n\nImports\n\nAbstractTrees\nAutoHashEquals\nBase\nCore\nDocStringExtensions\nEzXML\nLabelledArrays\nPNML.PnmlTypes\nPrettyPrinting\nReexport\n\nExports\n\nAbstractContinuousCore\nAbstractHLCore\nContinuousNet\nHLCore\nHLNet\nMalformedException\nMissingIDException\nOpenNet\nPTNet\nPT_HLPNG\nPnmlCore\nPnmlDict\nPnmlException\nPnmlType\nPnmlTypes\nStochasticNet\nSymmetricNet\nTimedNet\nparse_file\nparse_node\nparse_pnml\nparse_str\npnmltype\npntd_symbol\n@xml_str\n\n\n\n\n\n","category":"module"},{"location":"API/library/#Types","page":"PNML","title":"Types","text":"","category":"section"},{"location":"API/library/","page":"PNML","title":"PNML","text":"Modules = [PNML]\nOrder = [:type]","category":"page"},{"location":"API/library/#PNML.AbstractDeclaration","page":"PNML","title":"PNML.AbstractDeclaration","text":"Declarations are the core of high-level Petri Net. They define objects/names that are used for conditions, inscriptions, markings. They are attached to PNML nets and pages.\n\nabstract type AbstractDeclaration <: HLAnnotation\n\n\n\n\n\n","category":"type"},{"location":"API/library/#PNML.AbstractLabel","page":"PNML","title":"PNML.AbstractLabel","text":"abstract type AbstractLabel\n\nLabels are attached to the Petri Net Graph object subtypes. See PnmlObject.\n\n\n\n\n\n","category":"type"},{"location":"API/library/#PNML.AbstractPnmlTool","page":"PNML","title":"PNML.AbstractPnmlTool","text":"abstract type AbstractPnmlTool\n\nTool specific objects can be attached to PnmlObjects and AbstractLabels subtypes.\n\n\n\n\n\n","category":"type"},{"location":"API/library/#PNML.AbstractTerm","page":"PNML","title":"PNML.AbstractTerm","text":"abstract type AbstractTerm\n\nTerms are part of the multi-sorted algebra that is part of High-Level Petri Net markings, inscriptions and conditions. \n\nSee also AbstractDeclaration.\n\n\n\n\n\n","category":"type"},{"location":"API/library/#PNML.Annotation","page":"PNML","title":"PNML.Annotation","text":"abstract type Annotation <: AbstractLabel\n\nLabel that may be displayed. It differs from an Attribute Label by possibly having a Graphics field.\n\n\n\n\n\n","category":"type"},{"location":"API/library/#PNML.AnyElement","page":"PNML","title":"PNML.AnyElement","text":"struct AnyElement\n\ntag::Symbol\ndict::Dict{Symbol, Any}\nxml::EzXML.Node\n\nWrap PnmlDict holding well-formed XML. See ToolInfo and PnmlLabel.\n\n\n\n\n\n","category":"type"},{"location":"API/library/#PNML.Arc","page":"PNML","title":"PNML.Arc","text":"Edge of a Petri Net Markup Language graph that connects place and transition.\n\nmutable struct Arc{PNTD<:PnmlType, ITYPE} <: PnmlObject\n\npntd::PnmlType\nid::Symbol\nsource::Symbol\ntarget::Symbol\ninscription::Any\nname::Union{Nothing, Name}\ncom::ObjectCommon\n\n\n\n\n\n","category":"type"},{"location":"API/library/#PNML.BuiltInSort","page":"PNML","title":"PNML.BuiltInSort","text":"Wrap a AnyElement. Use until specialized/cooked.\n\nFrom the 'primer': built-in sorts of Symmetric Nets are the following:   Booleans, range of integers, finite enumerations, cyclic enumerations and dots\n\n\n\n\n\n","category":"type"},{"location":"API/library/#PNML.Condition","page":"PNML","title":"PNML.Condition","text":"Label of a Transition that determines when the transition fires.\n\nstruct Condition{T} <: HLAnnotation\n\ntext::Union{Nothing, String}\nterm::Any\ncom::ObjectCommon\n\nExamples\n\njulia> c = Condition()\nCondition(nothing, true, )\n\njulia> c()\ntrue\n\njulia> c = Condition(false)\nCondition(nothing, false, )\n\njulia> c()\nfalse\n\njulia> c = Condition(\"xx\", false)\nCondition(\"xx\", false, )\n\njulia> c()\nfalse\n\n\n\n\n\n","category":"type"},{"location":"API/library/#PNML.Condition-Tuple{}","page":"PNML","title":"PNML.Condition","text":"Evaluate a Condition instance.\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.Coordinate","page":"PNML","title":"PNML.Coordinate","text":"Cartesian Coordinate.\n\nstruct Coordinate{T<:Number}\n\nx::Number\ny::Number\n\n\n\n\n\n","category":"type"},{"location":"API/library/#PNML.Declaration","page":"PNML","title":"PNML.Declaration","text":"Label of a net or page that holds zero or more AbstractDeclaration.\n\nstruct Declaration <: HLAnnotation\n\ndeclarations::Vector{Any}\ncom::ObjectCommon\n\n\n\n\n\n","category":"type"},{"location":"API/library/#PNML.Fill","page":"PNML","title":"PNML.Fill","text":"Fill attributes as strings.\n\nstruct Fill\n\ncolor::Union{Nothing, String}\nimage::Union{Nothing, String}\ngradient_color::Union{Nothing, String}\ngradient_rotation::Union{Nothing, String}\n\n\n\n\n\n","category":"type"},{"location":"API/library/#PNML.Font","page":"PNML","title":"PNML.Font","text":"Font attributes as strings.\n\nstruct Font\n\nfamily::Union{Nothing, String}\nstyle::Union{Nothing, String}\nweight::Union{Nothing, String}\nsize::Union{Nothing, String}\nalign::Union{Nothing, String}\nrotation::Union{Nothing, String}\ndecoration::Union{Nothing, String}\n\n\n\n\n\n","category":"type"},{"location":"API/library/#PNML.Graphics","page":"PNML","title":"PNML.Graphics","text":"PNML Graphics can be attached to many parts of PNML models.\n\nstruct Graphics\n\ndimension::Union{Nothing, Coordinate}\nfill::Union{Nothing, Fill}\nfont::Union{Nothing, Font}\nline::Union{Nothing, Line}\noffset::Union{Nothing, Coordinate}\nposition::Union{Nothing, Vector{Coordinate}}\n\n\n\n\n\n","category":"type"},{"location":"API/library/#PNML.HLAnnotation","page":"PNML","title":"PNML.HLAnnotation","text":"abstract type HLAnnotation <: AbstractLabel\n\nAnnotation label that uses <text> and <structure>.\n\n\n\n\n\n","category":"type"},{"location":"API/library/#PNML.HLInscription","page":"PNML","title":"PNML.HLInscription","text":"struct HLInscription{TermType<:PNML.AbstractTerm} <: HLAnnotation\n\ntext::Union{Nothing, String}\nterm::Union{Nothing, TermType} where TermType<:PNML.AbstractTerm\nAny <structure> must be a many-sorted algebra term for a <hlinscription> annotation label.\ncom::ObjectCommon\n\nLabels an Arc.\n\nExamples\n\njulia> i = HLInscription()\nHLInscription(nothing, Term(:empty, Dict()), )\n\njulia> i()\n1\n\njulia> i = HLInscription(Term(:term, PnmlDict(:value=>3)))\nHLInscription(nothing, Term(:term, Dict(:value => 3)), )\n\njulia> i()\n3\n\njulia> i = HLInscription(\"text\", Term())\nHLInscription(\"text\", Term(:empty, Dict()), )\n\njulia> i()\n1\n\njulia> i = HLInscription(\"text\", Term(:term, PnmlDict(:value=>3)))\nHLInscription(\"text\", Term(:term, Dict(:value => 3)), )\n\njulia> i()\n3\n\n\n\n\n\n","category":"type"},{"location":"API/library/#PNML.HLInscription-Tuple{}","page":"PNML","title":"PNML.HLInscription","text":"Evaluate a HLInscription. Returns a value of the same sort as TBD.\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.HLLabel","page":"PNML","title":"PNML.HLLabel","text":"struct HLLabel <: HLAnnotation\n\ntext::Union{Nothing, String}\nstructure::Union{Nothing, PNML.Structure}\ncom::ObjectCommon\nxml::EzXML.Node\n\nHigh-level pnml labels are expected to have <text> and <structure> elements. This concrete type is for \"unclaimed\" labels in a high-level petri net. Some \"claimed\" HLAnnotation labels are Condition,  Declaration, HLMarking, HLInscription.\n\n\n\n\n\n","category":"type"},{"location":"API/library/#PNML.HLMarking","page":"PNML","title":"PNML.HLMarking","text":"Label of a Place in a High-level Petri Net Graph. See AbstractHLCore, Term. #TODO Term as wrapper of PnmlDict should be replaced (someday). \n\nIs a functor that evaluates the term.\n\nstruct HLMarking{TermType} <: HLAnnotation\n\ntext::Union{Nothing, String}\nterm::Union{Nothing, TermType} where TermType\nAny <structure> must be a many-sorted algebra term for a <hlmarking> annotation label.\ncom::ObjectCommon\n\nExamples\n\njulia> m = HLMarking(\"the text\", Term(:term, PnmlDict(:value=>3)))\nHLMarking(\"the text\", Term(:term, Dict(:value => 3)), )\n\njulia> m()\n3\n\n\n\n\n\n","category":"type"},{"location":"API/library/#PNML.HLMarking-Tuple{}","page":"PNML","title":"PNML.HLMarking","text":"Evaluate a HLMarking instance.  Returns a value of the same sort as its Place. #TODO How to ensure sort type?\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.HLPetriNet","page":"PNML","title":"PNML.HLPetriNet","text":"Wrap a single pnml net.\n\nstruct HLPetriNet{PNTD} <: PetriNet{PNTD}\n\nnet::PnmlNet{PNTD} where PNTD\n\nDetails\n\n\n\n\n\n","category":"type"},{"location":"API/library/#PNML.HLPetriNet-Tuple{AbstractString}","page":"PNML","title":"PNML.HLPetriNet","text":"Construct from string of valid pnml XML using the first network\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.IDRegistry","page":"PNML","title":"PNML.IDRegistry","text":"Holds a set of pnml id symbols and a lock to allow safe reentrancy.\n\nstruct IDRegistry\n\nids::Set{Symbol}\nlk::ReentrantLock\n\n\n\n\n\n","category":"type"},{"location":"API/library/#PNML.Line","page":"PNML","title":"PNML.Line","text":"Line attributes as strings.\n\nstruct Line\n\ncolor::Union{Nothing, String}\nshape::Union{Nothing, String}\nstyle::Union{Nothing, String}\nwidth::Union{Nothing, String}\n\n\n\n\n\n","category":"type"},{"location":"API/library/#PNML.MalformedException","page":"PNML","title":"PNML.MalformedException","text":"struct MalformedException <: PnmlException\n\nmsg::String\nnode::EzXML.Node\n\n\n\n\n\n","category":"type"},{"location":"API/library/#PNML.MissingIDException","page":"PNML","title":"PNML.MissingIDException","text":"struct MissingIDException <: PnmlException\n\nmsg::String\nnode::EzXML.Node\n\nUse exception to allow dispatch and additional data presentation to user.\n\n\n\n\n\n","category":"type"},{"location":"API/library/#PNML.MultisetSort","page":"PNML","title":"PNML.MultisetSort","text":"Wrap a AnyElement. Use until specialized/cooked.\n\n\n\n\n\n","category":"type"},{"location":"API/library/#PNML.Name","page":"PNML","title":"PNML.Name","text":"struct Name <: AbstractLabel\n\ntext::String\ngraphics::Union{Nothing, Graphics}\ntools::Union{Nothing, Vector{ToolInfo}}\n\nName is for display, possibly in a tool specific way.\n\n\n\n\n\n","category":"type"},{"location":"API/library/#PNML.NamedOperator","page":"PNML","title":"PNML.NamedOperator","text":"struct NamedOperator{V, T} <: PNML.OperatorDeclaration\n\nid::Symbol\nname::String\nparameter::Vector\ndef::Any\n\n\n\n\n\n","category":"type"},{"location":"API/library/#PNML.NamedSort","page":"PNML","title":"PNML.NamedSort","text":"struct NamedSort{S} <: PNML.SortDeclaration\n\nid::Symbol\nname::String\ndef::Any\n\n\n\n\n\n","category":"type"},{"location":"API/library/#PNML.ObjectCommon","page":"PNML","title":"PNML.ObjectCommon","text":"struct ObjectCommon\n\ngraphics::Union{Nothing, Graphics}\ntools::Union{Nothing, Vector{ToolInfo}}\nlabels::Union{Nothing, Vector{PnmlLabel}}\n\nCommon infrastructure shared by PNML objects and labels. Some optional incidental bits are shared by most PNML objects are also collected here.\n\n\n\n\n\n","category":"type"},{"location":"API/library/#PNML.PTInscription","page":"PNML","title":"PNML.PTInscription","text":"struct PTInscription{T<:Number} <: PNML.Annotation\n\nvalue::Number\ncom::ObjectCommon\n\nLabels an Arc.\n\nExamples\n\njulia> i = PTInscription()\nPTInscription(1, )\n\njulia> i()\n1\n\njulia> i = PTInscription(3)\nPTInscription(3, )\n\njulia> i()\n3\n\n\n\n\n\n","category":"type"},{"location":"API/library/#PNML.PTInscription-Tuple{}","page":"PNML","title":"PNML.PTInscription","text":"Evaluate a PTInscription.\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.PTMarking","page":"PNML","title":"PNML.PTMarking","text":"Number-valued label of Place. See PTNet, ContinuousNet.\n\nIs a functor that returns the value.\n\nstruct PTMarking{N<:Number} <: PNML.Annotation\n\nvalue::Number\ncom::ObjectCommon\n\nExamples\n\njulia> m = PTMarking()\nPTMarking(0, )\n\njulia> m()\n0\n\njulia> m = PTMarking(1)\nPTMarking(1, )\n\njulia> m()\n1\n\njulia> m = PTMarking(12.34)\nPTMarking(12.34, )\n\njulia> m()\n12.34\n\n\n\n\n\n","category":"type"},{"location":"API/library/#PNML.PTMarking-Tuple{}","page":"PNML","title":"PNML.PTMarking","text":"Evaluate a PTMarking instance.\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.Page","page":"PNML","title":"PNML.Page","text":"struct Page{PNTD<:PnmlType, D} <: PnmlObject\n\nid::Symbol\nplaces::Vector{Place}\nrefPlaces::Vector{RefPlace}\ntransitions::Vector{Transition}\nrefTransitions::Vector{RefTransition}\narcs::Vector{Arc}\ndeclaration::Any\nsubpages::Union{Nothing, Vector{Page}}\nname::Union{Nothing, Name}\ncom::ObjectCommon\n\nContain all places, transitions & arcs. Pages are for visual presentation. There must be at least 1 Page for a valid pnml model.\n\n\n\n\n\n","category":"type"},{"location":"API/library/#PNML.Partition","page":"PNML","title":"PNML.Partition","text":"struct Partition{S, PE} <: PNML.SortDeclaration\n\nid::Symbol\nname::String\ndef::Any\nelement::Any\n\nUser-declared sort.\n\n\n\n\n\n","category":"type"},{"location":"API/library/#PNML.PetriNet","page":"PNML","title":"PNML.PetriNet","text":"Provides 2nd-level parsing of the intermediate representation of a  single network in a pnml model. See PnmlModel.\n\nabstract type PetriNet{T<:PnmlType}\n\nExtended\n\nThe type parameter of a nets should map directly and simply to subtypes of PnmlType.\n\nAdditional constrants can be imposed. We want to run under the motto: \"syntax is not semantics, quack\".\n\nSince a PNML.Document can contain multiple networks it is possible that a higher-level will create multiple PetriNet instances, each a different subtype.\n\nMultiple Page can (are permitted) be merged into one page  by flatten_pages! without losing any Petri Net semantics. Initial concrete PetriNets are constructed by flattening to a single Page.\n\n\n\n\n\n","category":"type"},{"location":"API/library/#PNML.Place","page":"PNML","title":"PNML.Place","text":"Place node of a Petri Net Markup Language graph.\n\nstruct Place{PNTD<:PnmlType, MarkingType, SortType} <: PnmlNode\n\npntd::PnmlType\nid::Symbol\nmarking::Any\ninitialMarking::Any\nsorttype::Any\nname::Union{Nothing, Name}\ncom::ObjectCommon\n\n\n\n\n\n","category":"type"},{"location":"API/library/#PNML.PnmlCfg","page":"PNML","title":"PNML.PnmlCfg","text":"Contains configuration data. #TODO add something\n\nstruct PnmlCfg\n\n\n\n\n\n","category":"type"},{"location":"API/library/#PNML.PnmlDict","page":"PNML","title":"PNML.PnmlDict","text":"Alias for Dict with Symbol as key.\n\nmutable struct Dict{Symbol, Any} <: AbstractDict{Symbol, Any}\n\n\n\n\n\n","category":"type"},{"location":"API/library/#PNML.PnmlException","page":"PNML","title":"PNML.PnmlException","text":"abstract type PnmlException <: Exception\n\n\n\n\n\n","category":"type"},{"location":"API/library/#PNML.PnmlLabel","page":"PNML","title":"PNML.PnmlLabel","text":"struct PnmlLabel <: PNML.Annotation\n\ntag::Symbol\ndict::Dict{Symbol, Any}\nxml::EzXML.Node\n\nWrap a PnmlDict that may be the root of an XML-tree.\n\nUsed for labels that do not have, or we choose not to use, a dedicated parse method. Claimed labels will have a type defined to make use of the structure defined by the pntd schema. See Name, the only label defined in pnmlcore and HLLabel for similat treatment of \"unclaimed\" high-level labels.\n\n\n\n\n\n","category":"type"},{"location":"API/library/#PNML.PnmlModel","page":"PNML","title":"PNML.PnmlModel","text":"struct PnmlModel\n\nnets::Vector{PnmlNet}\nnamespace::String\nreg::IDRegistry\nxml::EzXML.Node\n\nOne or more Petri Nets and an ID Registry shared by all nets.\n\n\n\n\n\n","category":"type"},{"location":"API/library/#PNML.PnmlNet","page":"PNML","title":"PNML.PnmlNet","text":"struct PnmlNet{PNTD<:PnmlType, D}\n\ntype::PnmlType\nid::Symbol\npages::Vector{Page}\ndeclaration::Any\nname::Union{Nothing, Name}\ncom::ObjectCommon\nxml::EzXML.Node\n\nOne Petri Net of a PNML model.\n\n\n\n\n\n","category":"type"},{"location":"API/library/#PNML.PnmlNode","page":"PNML","title":"PNML.PnmlNode","text":"abstract type PnmlNode <: PnmlObject\n\nPetri Net Graph nodes are places, transitions.\n\n\n\n\n\n","category":"type"},{"location":"API/library/#PNML.PnmlObject","page":"PNML","title":"PNML.PnmlObject","text":"abstract type PnmlObject\n\nObjects of a Petri Net Graph are pages, arcs, nodes.\n\n\n\n\n\n","category":"type"},{"location":"API/library/#PNML.ProductSort","page":"PNML","title":"PNML.ProductSort","text":"Wrap a AnyElement. Use until specialized/cooked. Should contain an ordered collection of sorts.\n\n\n\n\n\n","category":"type"},{"location":"API/library/#PNML.RefPlace","page":"PNML","title":"PNML.RefPlace","text":"Reference Place node of a Petri Net Markup Language graph. For connections between pages.\n\nstruct RefPlace{PNTD<:PnmlType} <: PNML.ReferenceNode\n\npntd::PnmlType\nid::Symbol\nref::Symbol\nname::Union{Nothing, Name}\ncom::ObjectCommon\n\n\n\n\n\n","category":"type"},{"location":"API/library/#PNML.RefTransition","page":"PNML","title":"PNML.RefTransition","text":"Refrence Transition node of a Petri Net Markup Language graph. For connections between pages.\n\nstruct RefTransition{PNTD<:PnmlType} <: PNML.ReferenceNode\n\npntd::PnmlType\nid::Symbol\nref::Symbol\nname::Union{Nothing, Name}\ncom::ObjectCommon\n\n\n\n\n\n","category":"type"},{"location":"API/library/#PNML.ReferenceNode","page":"PNML","title":"PNML.ReferenceNode","text":"For common behavior shared by RefPlace, RefTransition.\n\n\n\n\n\n","category":"type"},{"location":"API/library/#PNML.SimpleNet","page":"PNML","title":"PNML.SimpleNet","text":"struct SimpleNet{PNTD} <: PetriNet{PNTD}\n\nid::Symbol\nnet::PnmlNet{PNTD} where PNTD\n\nTODO: Rename SimpleNet to TBD  SimpleNet wraps one net. This is a PetriNet wrapping a PnmlNet.\n\nOmits the page level of the pnml-defined hierarchy by flattening pages. A multi-page net can be flattened by removing referenceTransitions & referencePlaces, and merging pages into the first page.\n\nOnly selected fields are merged.\n\n\n\n\n\n","category":"type"},{"location":"API/library/#PNML.SimpleNet-Tuple{AbstractString}","page":"PNML","title":"PNML.SimpleNet","text":"Construct from string of valid pnml XML using the first network\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.Sort","page":"PNML","title":"PNML.Sort","text":"struct Sort\n\ndict::Dict{Symbol, Any}\n\nPart of the many-sorted algebra attached to nodes on a Petri Net Graph. Is content of a <structure> element of a High-Level label.\n\n\n\n\n\n","category":"type"},{"location":"API/library/#PNML.Structure","page":"PNML","title":"PNML.Structure","text":"struct Structure{T}\n\ntag::Symbol\ndict::Any\nxml::EzXML.Node\n\nUsed by/in unclaimed high-level pnml labels. Is an abstract syntax tree (ast) expressed in XML. Note the structural similarity to PnmlLabel and AnyElement\n\nExtra\n\nThere are various defined structure ast variants:\n\nSort of a Place type [builtin, multi, product, user]\nTerm of Place HLMarking  [variable, operator]\nTerm of Transition Condition  [variable, operator]\nTerm of Arc Inscription [variable, operator]\nDeclarations of Declaration * [sort, variable, operator]\n\n\n\n\n\n","category":"type"},{"location":"API/library/#PNML.Term","page":"PNML","title":"PNML.Term","text":"struct Term{T<:AbstractDict} <: PNML.AbstractTerm\n\ntag::Symbol\ndict::AbstractDict\n\nPart of the many-sorted algebra attached to nodes on a Petri Net Graph.\n\nast variants:\n\nvariable\noperator\n\n\n\n\n\n","category":"type"},{"location":"API/library/#PNML.Term-Tuple{}","page":"PNML","title":"PNML.Term","text":"Evaluate a term by returning the ':value' in dict. Assumes that dict is an AbstractDictionary.\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.TokenGraphics","page":"PNML","title":"PNML.TokenGraphics","text":"struct TokenGraphics <: AbstractPnmlTool\n\npositions::Vector{Coordinate}\n\nTokenGraphics is <toolspecific> content. Combines the <tokengraphics> and <tokenposition> elements.\n\n\n\n\n\n","category":"type"},{"location":"API/library/#PNML.ToolInfo","page":"PNML","title":"PNML.ToolInfo","text":"struct ToolInfo\n\ntoolname::String\nversion::String\ninfos::Vector{AnyElement}\nxml::EzXML.Node\n\nToolInfo holds a <toolspecific> tag.\n\nIt wraps a vector of well formed elements parsed into AnyElements. for use by anything that understands toolname, version toolspecifics.\n\n\n\n\n\n","category":"type"},{"location":"API/library/#PNML.Transition","page":"PNML","title":"PNML.Transition","text":"Transition node of a Petri Net Markup Language graph.\n\nstruct Transition{PNTD<:PnmlType, C} <: PnmlNode\n\npntd::PnmlType\nid::Symbol\ncondition::Any\nname::Union{Nothing, Name}\ncom::ObjectCommon\n\n\n\n\n\n","category":"type"},{"location":"API/library/#PNML.UnknownDeclaration","page":"PNML","title":"PNML.UnknownDeclaration","text":"struct UnknownDeclaration <: AbstractDeclaration\n\nid::Symbol\nname::String\nnodename::String\ncontent::Vector{AnyElement}\n\n\n\n\n\n","category":"type"},{"location":"API/library/#PNML.UserOperator","page":"PNML","title":"PNML.UserOperator","text":"struct UserOperator <: AbstractOperator\n\ndeclaration::Symbol\nIdentity of operators's declaration.\n\n\n\n\n\n","category":"type"},{"location":"API/library/#PNML.UserSort","page":"PNML","title":"PNML.UserSort","text":"Wrap a AnyElement. Use until specialized/cooked.\n\n\n\n\n\n","category":"type"},{"location":"API/library/#PNML.Variable","page":"PNML","title":"PNML.Variable","text":"struct Variable <: PNML.AbstractTerm\n\nvariableDecl::Symbol\n\nExample input: <variable refvariable=\"varx\"/>\n\n\n\n\n\n","category":"type"},{"location":"API/library/#PNML.VariableDeclaration","page":"PNML","title":"PNML.VariableDeclaration","text":"struct VariableDeclaration{S} <: AbstractDeclaration\n\nid::Symbol\nname::String\nsort::Any\n\n\n\n\n\n","category":"type"},{"location":"API/library/#PNML.XMLNode","page":"PNML","title":"PNML.XMLNode","text":"Alias for EzXML.Node\n\n\n\n\n\n","category":"type"},{"location":"API/library/#Constants","page":"PNML","title":"Constants","text":"","category":"section"},{"location":"API/library/","page":"PNML","title":"PNML","text":"Docstrings for constants. This includes type  aliases.","category":"page"},{"location":"API/library/","page":"PNML","title":"PNML","text":"Modules = [PNML]\nOrder = [:constant]","category":"page"},{"location":"API/library/#PNML.Maybe","page":"PNML","title":"PNML.Maybe","text":"Alias for union of type T or nothing.\n\n\n\n\n\n","category":"type"},{"location":"API/library/#PNML.indent_width","page":"PNML","title":"PNML.indent_width","text":"Indention increment.\n\n\n\n\n\n","category":"constant"},{"location":"API/library/#PNML.pnml_ns","page":"PNML","title":"PNML.pnml_ns","text":"Namespace expected for pnml XML.\n\n\n\n\n\n","category":"constant"},{"location":"API/library/#PNML.tagmap","page":"PNML","title":"PNML.tagmap","text":"Map XML tag names to parser functions.\n\n\n\n\n\n","category":"constant"},{"location":"API/library/#Functions","page":"PNML","title":"Functions","text":"","category":"section"},{"location":"API/library/","page":"PNML","title":"PNML","text":"Docstrings for functions.","category":"page"},{"location":"API/library/","page":"PNML","title":"PNML","text":"Modules = [PNML]\nOrder = [:function]","category":"page"},{"location":"API/library/#PNML._anyelement_content-Union{Tuple{PNTD}, Tuple{Vector{EzXML.Node}, PNTD, Any}} where PNTD<:PnmlType","page":"PNML","title":"PNML._anyelement_content","text":"_anyelement_content(nodes::Vector{EzXML.Node}, pntd::PnmlType, parser; kw...) -> Dict{Symbol, Any}\n\n\nApply parser to each node in nodes. Return PnmlDict with values that are vectors when there  are multiple instances of a tag in nodes and scalar otherwise.\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML._evaluate","page":"PNML","title":"PNML._evaluate","text":"Inscriptions, Markings, Conditions evaluate a value that may be a scalar or a Term functor.\n\nExamples\n\njulia> _evaluate(1)\n1\n\njulia> _evaluate(true)\ntrue\n\njulia> _evaluate(Term(:term, Dict(:value => 3)))\n3\n\n\n\n\n\n","category":"function"},{"location":"API/library/#PNML._harvest_any!-Union{Tuple{PNTD}, Tuple{EzXML.Node, PNTD, Any}} where PNTD<:PnmlType","page":"PNML","title":"PNML._harvest_any!","text":"_harvest_any!(node::EzXML.Node, pntd::PnmlType, parser; kw...)\n\n\nReturn PnmlDict holding a well-formed XML node.\n\nIf element node has any children, each is placed in the dictonary with the child's tag name symbol as the key, repeated tags produce a vector as the value. Any XML attributes found are added as as key,value pairs.\n\nDescend the well-formed XML using parser on child nodes.\n\nNote the assumption that \"children\" and \"content\" are mutually exclusive. Content is always a leaf element. However XML attributes can be anywhere in the hierarchy. And neither children nor content nor attribute may be present.\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML._match","page":"PNML","title":"PNML._match","text":"Match toolname and version.\n\n\n\n\n\n","category":"function"},{"location":"API/library/#PNML.add_label!-Tuple{Dict{Symbol, Any}, EzXML.Node, Any}","page":"PNML","title":"PNML.add_label!","text":"add_label!(d::Dict{Symbol, Any}, node::EzXML.Node, pntd; kw...)\n\n\nAdd node to d[:labels], a vector of PnmlLabel. Return updated d[:labels].\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.add_toolinfo!-Tuple{Dict{Symbol, Any}, Any, Any}","page":"PNML","title":"PNML.add_toolinfo!","text":"add_toolinfo!(d::Dict{Symbol, Any}, node, pntd; kw...) -> Vector{ToolInfo}\n\n\nAdd ToolInfo node to d[:tools]. Return updated d[:tools].\n\nThe UML from the pnml primer (and schemas) use <toolspecific> as the tag name for instances of the type ToolInfo.\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.all_arcs","page":"PNML","title":"PNML.all_arcs","text":"Return vector of arcs that have a source or target of transition id.\n\nSee also src_arcs, tgt_arcs.\n\n\n\n\n\n","category":"function"},{"location":"API/library/#PNML.allchildren","page":"PNML","title":"PNML.allchildren","text":"allchildren(tag, el) -> Vector{EzXML.Node}\nallchildren(tag, el, ns) -> Vector{EzXML.Node}\n\n\nReturn vector of el element's immediate children with tag.\n\n\n\n\n\n","category":"function"},{"location":"API/library/#PNML.anyelement","page":"PNML","title":"PNML.anyelement","text":"Return AnyElement wraping a tag symbol and PnmlDict holding  a well-formed XML node.\n\nSee ToolInfo for one intended use-case and unclaimed_label for when a pnml label is expected but does not have a parser or the tag appears in an  unexpected place.\n\n\n\n\n\n","category":"function"},{"location":"API/library/#PNML.append_page!-Tuple{Page, Page}","page":"PNML","title":"PNML.append_page!","text":"Append selected fields of r to fields of l. NB: subpages are omitted from append_page! See flatten_pages!. Names and xml are omitted because they are scalar values, not collections.\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.arc","page":"PNML","title":"PNML.arc","text":"Return arc with id if found, otherwise nothing.\n\n\n\n\n\n","category":"function"},{"location":"API/library/#PNML.arc_ids","page":"PNML","title":"PNML.arc_ids","text":"Return vector of arc ids.\n\n\n\n\n\n","category":"function"},{"location":"API/library/#PNML.arcs","page":"PNML","title":"PNML.arcs","text":"Return vector of arcs.\n\n\n\n\n\n","category":"function"},{"location":"API/library/#PNML.condition","page":"PNML","title":"PNML.condition","text":"Return condition value of transition.\n\n\n\n\n\n","category":"function"},{"location":"API/library/#PNML.conditions","page":"PNML","title":"PNML.conditions","text":"Return a labelled vector of condition values for net s. Key is transition id.\n\n\n\n\n\n","category":"function"},{"location":"API/library/#PNML.default_condition","page":"PNML","title":"PNML.default_condition","text":"Return default condition based on PNTD. Has meaning of true or always.\n\nExamples\n\njulia> m = default_condition(PnmlCore())\nCondition(nothing, true, )\n\njulia> m = default_condition(ContinuousNet())\nCondition(nothing, true, )\n\njulia> m = default_condition(HLCore())\nCondition(nothing, true, )\n\n\n\n\n\n","category":"function"},{"location":"API/library/#PNML.default_inscription","page":"PNML","title":"PNML.default_inscription","text":"Return default inscription value based on PNTD. Has meaning of unity, as in one.\n\nExamples\n\njulia> i = default_inscription(PnmlCore())\n1\n\njulia> i = default_inscription(ContinuousNet())\n1.0\n\njulia> i = default_inscription(HLCore())\nTerm(:empty, Dict(:value => 1))\n\njulia> i()\n1\n\n\n\n\n\n\n","category":"function"},{"location":"API/library/#PNML.default_marking","page":"PNML","title":"PNML.default_marking","text":"Return default marking value based on PNTD. Has meaning of empty, as in zero.\n\nExamples\n\njulia> m = default_marking(pnmltype(PnmlCore()))\nPTMarking(0, )\n\njulia> m()\n0\n\njulia> m = default_marking(typeof(pnmltype(PnmlCore())))\nPTMarking(0, )\n\njulia> m()\n0\n\njulia> m = default_marking(pnmltype(HLCore()))\nHLMarking(nothing, Term(:empty, Dict(:value => 0)), )\n\njulia> m()\n0\n\n\n\n\n\n","category":"function"},{"location":"API/library/#PNML.default_sort","page":"PNML","title":"PNML.default_sort","text":"Return default  based on PNTD. Has meaning of empty, as in zero.\n\n\n\n\n\n","category":"function"},{"location":"API/library/#PNML.default_term","page":"PNML","title":"PNML.default_term","text":"Return default marking value based on PNTD. Has meaning of empty, as in zero.\n\nExamples\n\njulia> m = default_one_term(HLCore())\nTerm(:empty, Dict(:value => 1))\n\njulia> m()\n1\n\njulia> m = default_zero_term(HLCore())\nTerm(:empty, Dict(:value => 0))\n\njulia> m()\n0\n\n\n\n\n\n\n","category":"function"},{"location":"API/library/#PNML.deref!","page":"PNML","title":"PNML.deref!","text":"Remove reference nodes from arcs. Expects flatten_pages! to have been applied so that everything is on one page (default is first page).\n\nAxioms\n\nAll ids in a network are unique in that they only have one instance in the XML.\nA chain of reference Places or Transitions always ends at a Place or Transition.\nAll ids are valid.\nNo cycles.\n\n\n\n\n\n","category":"function"},{"location":"API/library/#PNML.deref_place","page":"PNML","title":"PNML.deref_place","text":"Return id of referenced place.\n\n\n\n\n\n","category":"function"},{"location":"API/library/#PNML.deref_transition","page":"PNML","title":"PNML.deref_transition","text":"Return id of referenced transition.\n\n\n\n\n\n","category":"function"},{"location":"API/library/#PNML.duplicate_id_action-Tuple{Symbol}","page":"PNML","title":"PNML.duplicate_id_action","text":"duplicate_id_action(id::Symbol; action)\n\n\nDuplicated pnml node id has been detected. Default action is to issue a warning.\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.find_net","page":"PNML","title":"PNML.find_net","text":"Return PnmlNet having id or nothing`.\n\n\n\n\n\n","category":"function"},{"location":"API/library/#PNML.find_nets","page":"PNML","title":"PNML.find_nets","text":"Return nets matching pntd type given as string or symbol. See PnmlTypes.pntd_symbol, PnmlTypes.pnmltype.\n\n\n\n\n\n","category":"function"},{"location":"API/library/#PNML.first_net-Tuple{Any}","page":"PNML","title":"PNML.first_net","text":"first_net(model) -> PnmlNet\n\n\nReturn first net contained by doc.\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.firstchild","page":"PNML","title":"PNML.firstchild","text":"firstchild(tag, el::EzXML.Node) -> Union{Nothing, EzXML.Node}\nfirstchild(tag, el::EzXML.Node, ns) -> Union{Nothing, EzXML.Node}\n\n\nReturn up to 1 immediate child of element el that is a tag.\n\n\n\n\n\n","category":"function"},{"location":"API/library/#PNML.firstpage-Tuple{PnmlNet}","page":"PNML","title":"PNML.firstpage","text":"Usually the only interesting page.\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.flatten_pages!","page":"PNML","title":"PNML.flatten_pages!","text":"Merge page content into the 1st page of each pnml net.\n\nNote that refrence nodes are still present. They can be removed later with deref!.\n\n\n\n\n\n","category":"function"},{"location":"API/library/#PNML.flatten_pages!-Tuple{Page, Page}","page":"PNML","title":"PNML.flatten_pages!","text":"After appending r to l, recursivly flatten r into l, then empty r.\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.flatten_pages!-Tuple{PnmlNet}","page":"PNML","title":"PNML.flatten_pages!","text":"flatten_pages!(net::PnmlNet) -> PnmlNet\n\n\nCollect keys from all pages and move to first page.\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.get_label","page":"PNML","title":"PNML.get_label","text":"get_label(x, tag::Symbol) -> PnmlLabel\n\nReturn first label with a matching tagvalue.\n\n\n\n\n\n","category":"function"},{"location":"API/library/#PNML.get_toolinfo","page":"PNML","title":"PNML.get_toolinfo","text":"Return first toolinfo having a matching toolname and version.\n\n\n\n\n\n","category":"function"},{"location":"API/library/#PNML.getfirst-Tuple{Function, Any}","page":"PNML","title":"PNML.getfirst","text":"Return first true f of v or nothing.\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.has_arc","page":"PNML","title":"PNML.has_arc","text":"Return true if any arc has id.\n\n\n\n\n\n","category":"function"},{"location":"API/library/#PNML.has_graphics-Tuple{ObjectCommon}","page":"PNML","title":"PNML.has_graphics","text":"Return true if has a graphics element.\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.has_label","page":"PNML","title":"PNML.has_label","text":"has_label(x, tag::Symbol) -> Bool\n\nDoes any label have a matching tagvalue.\n\n\n\n\n\n","category":"function"},{"location":"API/library/#PNML.has_labels","page":"PNML","title":"PNML.has_labels","text":"has_labels(x) -> Bool\n\nDoes x have any labels.\n\n\n\n\n\n","category":"function"},{"location":"API/library/#PNML.has_labels-Tuple{ObjectCommon}","page":"PNML","title":"PNML.has_labels","text":"Return true if there is a labels element.\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.has_place","page":"PNML","title":"PNML.has_place","text":"Is there any place with id?\n\n\n\n\n\n","category":"function"},{"location":"API/library/#PNML.has_refP","page":"PNML","title":"PNML.has_refP","text":"\n\n\n\n","category":"function"},{"location":"API/library/#PNML.has_refT","page":"PNML","title":"PNML.has_refT","text":"\n\n\n\n","category":"function"},{"location":"API/library/#PNML.has_structure-Tuple{L} where L<:AbstractLabel","page":"PNML","title":"PNML.has_structure","text":"Return true if label has a structure field.\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.has_text-Tuple{L} where L<:AbstractLabel","page":"PNML","title":"PNML.has_text","text":"Return true if label has text field.\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.has_toolinfo","page":"PNML","title":"PNML.has_toolinfo","text":"Does any toolinfo attached to d have a matching toolname.\n\n\n\n\n\n","category":"function"},{"location":"API/library/#PNML.has_tools-Tuple{ObjectCommon}","page":"PNML","title":"PNML.has_tools","text":"Return true if has a tools element.\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.has_transition","page":"PNML","title":"PNML.has_transition","text":"Is there a transition with id?\n\n\n\n\n\n","category":"function"},{"location":"API/library/#PNML.has_xml","page":"PNML","title":"PNML.has_xml","text":"has_xml(x) -> Bool\n\nReturn true if has XML attached. Defaults to false.\n\n\n\n\n\n","category":"function"},{"location":"API/library/#PNML.in_out","page":"PNML","title":"PNML.in_out","text":"Return tuple of input, output labelled vectors with key of place ids and value of arc inscription's value for use as a transition function. #TODO When do these get called \"pre\" and \"post\"?\n\n\n\n\n\n","category":"function"},{"location":"API/library/#PNML.inc_indent-Tuple{IO}","page":"PNML","title":"PNML.inc_indent","text":"Increment the :indent value by indent_width.\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.indent-Tuple{IO}","page":"PNML","title":"PNML.indent","text":"Return string of current indent size in io.\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.initialMarking","page":"PNML","title":"PNML.initialMarking","text":"Return a labelled vector with key of place id and value of marking.\n\n\n\n\n\n","category":"function"},{"location":"API/library/#PNML.ins-Tuple{Any, Symbol}","page":"PNML","title":"PNML.ins","text":"ins(p, transition_id::Symbol) -> LabelledArrays.LArray\n\n\nReturn arcs of p that have transition_id as the target.\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.inscription","page":"PNML","title":"PNML.inscription","text":"Return incription value of arc.\n\n\n\n\n\n","category":"function"},{"location":"API/library/#PNML.ispid-Tuple{Any}","page":"PNML","title":"PNML.ispid","text":"ispid(x) -> Base.Fix2{typeof(===)}\n\n\nReturn function to be used like: any(ispid(sym), iteraterwithpid)\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.isregistered-Tuple{IDRegistry, AbstractString}","page":"PNML","title":"PNML.isregistered","text":"isregistered(reg::IDRegistry, s::AbstractString) -> Bool\n\n\nReturn true if s is registered in reg.\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.marking","page":"PNML","title":"PNML.marking","text":"Return marking value of a place p.\n\n\n\n\n\n","category":"function"},{"location":"API/library/#PNML.name","page":"PNML","title":"PNML.name","text":"name(x) -> String\n\nReturn name String. Default to empty string.\n\n\n\n\n\n","category":"function"},{"location":"API/library/#PNML.namespace","page":"PNML","title":"PNML.namespace","text":"Return XML namespace.\n\n\n\n\n\n","category":"function"},{"location":"API/library/#PNML.nets-Tuple{PnmlModel}","page":"PNML","title":"PNML.nets","text":"nets(model::PnmlModel) -> Vector{PnmlNet}\n\n\nReturn all nets of model.\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.nettype","page":"PNML","title":"PNML.nettype","text":"Return the PnmlType subtype representing the flavor (or pntd) of this kind of  Petri Net Graph.\n\nSee also pnmltype\n\n\n\n\n\n","category":"function"},{"location":"API/library/#PNML.number_value-Tuple{AbstractString}","page":"PNML","title":"PNML.number_value","text":"number_value(s::AbstractString) -> Union{Nothing, Float64, Int64}\n\n\nParse string as a number. First try integer then float.\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.outs-Tuple{Any, Symbol}","page":"PNML","title":"PNML.outs","text":"outs(p, transition_id::Symbol) -> LabelledArrays.LArray\n\n\nReturn arcs of p that have transition_id as the source.\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.pages","page":"PNML","title":"PNML.pages","text":"Return vector of pages.\n\n\n\n\n\n","category":"function"},{"location":"API/library/#PNML.parse_and-Tuple{Any, Any}","page":"PNML","title":"PNML.parse_and","text":"parse_and(node, pntd; kwargs...)\n\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.parse_arbitraryoperator-Tuple{Any, Any}","page":"PNML","title":"PNML.parse_arbitraryoperator","text":"parse_arbitraryoperator(node, pntd; kwargs...)\n\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.parse_arbitrarysort-Tuple{Any, Any}","page":"PNML","title":"PNML.parse_arbitrarysort","text":"parse_arbitrarysort(node, pntd; kwargs...)\n\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.parse_arc-Tuple{Any, Any}","page":"PNML","title":"PNML.parse_arc","text":"parse_arc(node, pntd; kw...)\n\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.parse_bool-Tuple{Any, Any}","page":"PNML","title":"PNML.parse_bool","text":"parse_bool(node, pntd; kwargs...)\n\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.parse_booleanconstant-Tuple{Any, Any}","page":"PNML","title":"PNML.parse_booleanconstant","text":"parse_booleanconstant(node, pntd; kwargs...)\n\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.parse_condition-Tuple{Any, Any}","page":"PNML","title":"PNML.parse_condition","text":"parse_condition(node, pntd; kw...) -> Condition\n\n\nLabel of transition nodes.\n\nDetails\n\nCondition is defined by the ISO Specification as a High-level Annotation, meaning it has <text> and <structure> elements. With all meaning in the element that the <structure> holds. \n\nWe extend Condition by allowing <structure> to have context instead of of a child element. This content is treated as either an Integer or Float64. \n\nA Condition should evaluate to a boolean. We defer that evaluation to a higher level. See AbstractTerm.\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.parse_declaration-Tuple{Any, Any}","page":"PNML","title":"PNML.parse_declaration","text":"parse_declaration(node, pntd; kw...) -> PNML.Declaration\n\n\nReturn Declaration label of 'net' and 'page' nodes.\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.parse_declarations-Tuple{Any, Any}","page":"PNML","title":"PNML.parse_declarations","text":"parse_declarations(node, pntd; kw...) -> Vector{AbstractDeclaration}\n\n\nReturn an Vector{AbstractDeclaration} subtype,\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.parse_equality-Tuple{Any, Any}","page":"PNML","title":"PNML.parse_equality","text":"parse_equality(node, pntd; kwargs...)\n\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.parse_file-Tuple{AbstractString}","page":"PNML","title":"PNML.parse_file","text":"parse_file(fname::AbstractString) -> PnmlModel\n\n\nBuild a PnmlModel from a file containing XML.\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.parse_graphics-Tuple{Any, Any}","page":"PNML","title":"PNML.parse_graphics","text":"parse_graphics(node, pntd; kw...) -> Graphics\n\n\nArcs, Annotations and Nodes have different graphics semantics. Return a Graphics holding the union of possibilities.\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.parse_graphics_coordinate-Tuple{Any, Any}","page":"PNML","title":"PNML.parse_graphics_coordinate","text":"parse_graphics_coordinate(node, pntd; kw...) -> Coordinate\n\n\nReturn Coordinate. Specification seems to only use integers, we also allow real numbers.\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.parse_graphics_fill-Tuple{Any, Any}","page":"PNML","title":"PNML.parse_graphics_fill","text":"parse_graphics_fill(node, pntd; kw...) -> Fill\n\n\nReturn Fill\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.parse_graphics_font-Tuple{Any, Any}","page":"PNML","title":"PNML.parse_graphics_font","text":"parse_graphics_font(node, pntd; kw...) -> Font\n\n\nReturn Font.\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.parse_graphics_line-Tuple{Any, Any}","page":"PNML","title":"PNML.parse_graphics_line","text":"parse_graphics_line(node, pntd; kw...) -> Line\n\n\nReturn Line.\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.parse_hlinitialMarking-Tuple{Any, Any}","page":"PNML","title":"PNML.parse_hlinitialMarking","text":"parse_hlinitialMarking(node, pntd; kw...) -> HLMarking\n\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.parse_hlinscription-Tuple{Any, Any}","page":"PNML","title":"PNML.parse_hlinscription","text":"parse_hlinscription(node, pntd; kw...) -> HLInscription\n\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.parse_imply-Tuple{Any, Any}","page":"PNML","title":"PNML.parse_imply","text":"parse_imply(node, pntd; kwargs...)\n\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.parse_inequality-Tuple{Any, Any}","page":"PNML","title":"PNML.parse_inequality","text":"parse_inequality(node, pntd; kwargs...)\n\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.parse_initialMarking-Tuple{Any, Any}","page":"PNML","title":"PNML.parse_initialMarking","text":"parse_initialMarking(node, pntd; kw...) -> PTMarking\n\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.parse_inscription-Tuple{Any, Any}","page":"PNML","title":"PNML.parse_inscription","text":"parse_inscription(node, pntd; kw...) -> PTInscription\n\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.parse_label-Tuple{Any, Any}","page":"PNML","title":"PNML.parse_label","text":"parse_label(node, pntd; kw...) -> Dict{Symbol, Any}\n\n\nShould not often have a '<label>' tag, this will bark if one is found. Return minimal PnmlDict holding (tag,node), to defer parsing the xml.\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.parse_mulitsetsort-Tuple{Any, Any}","page":"PNML","title":"PNML.parse_mulitsetsort","text":"parse_mulitsetsort(node, pntd; kwargs...)\n\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.parse_name-Tuple{Any, Any}","page":"PNML","title":"PNML.parse_name","text":"parse_name(node, pntd; kw...) -> Name\n\n\nReturn Name holding text value and optional tool & GUI information.\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.parse_namedoperator-Tuple{Any, Any}","page":"PNML","title":"PNML.parse_namedoperator","text":"parse_namedoperator(node, pntd; kw...)\n\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.parse_namedsort-Tuple{Any, Any}","page":"PNML","title":"PNML.parse_namedsort","text":"parse_namedsort(node, pntd; kw...)\n\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.parse_net","page":"PNML","title":"PNML.parse_net","text":"parse_net(node)\nparse_net(node, pntd; kw...)\n\n\nReturn a dictonary of the pnml net with keys matching their XML tag names.\n\n\n\n\n\n","category":"function"},{"location":"API/library/#PNML.parse_node","page":"PNML","title":"PNML.parse_node","text":"Call the method matching node.name from tagmap if that mapping exists, otherwise parse as unclaimed_label wrapped in a PnmlLabel.\n\n\n\n\n\n","category":"function"},{"location":"API/library/#PNML.parse_not-Tuple{Any, Any}","page":"PNML","title":"PNML.parse_not","text":"parse_not(node, pntd; kwargs...)\n\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.parse_or-Tuple{Any, Any}","page":"PNML","title":"PNML.parse_or","text":"parse_or(node, pntd; kwargs...)\n\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.parse_page-Tuple{Any, Any}","page":"PNML","title":"PNML.parse_page","text":"parse_page(node, pntd; kw...)\n\n\nPNML requires at least one page.\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.parse_place-Tuple{Any, Any}","page":"PNML","title":"PNML.parse_place","text":"parse_place(node, pntd; kw...)\n\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.parse_pnml-Tuple{Any}","page":"PNML","title":"PNML.parse_pnml","text":"parse_pnml(node; kw...)\n\n\nStart parse from the pnml root node of a well formed XML document. Return a PnmlModel..\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.parse_pnml_common!-Tuple{Dict{Symbol, Any}, Any, Any}","page":"PNML","title":"PNML.parse_pnml_common!","text":"parse_pnml_common!(d::Dict{Symbol, Any}, node, pntd; kw...) -> Union{Graphics, Vector{ToolInfo}}\n\n\nUpdate d with any graphics, tools, and label child of node. Used by parse_pnml_node_common! & parse_pnml_label_common!.\n\nNote that \"labels\" are the \"everything else\" option and this should be called after parsing any elements that has an expected tag. Any tag that is encountered in an unexpected location should be treated as an anonymous label for parsing.\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.parse_pnml_label_common!-Tuple{Dict{Symbol, Any}, Any, Any}","page":"PNML","title":"PNML.parse_pnml_label_common!","text":"parse_pnml_label_common!(d::Dict{Symbol, Any}, node, pntd; kw...) -> Union{String, Graphics, Vector{ToolInfo}}\n\n\nUpdate d with  'text' and 'structure' children of node, defering other tags to parse_pnml_common!.\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.parse_pnml_node_common!-Tuple{Dict{Symbol, Any}, Any, Any}","page":"PNML","title":"PNML.parse_pnml_node_common!","text":"parse_pnml_node_common!(d::Dict{Symbol, Any}, node, pntd; kw...) -> Union{Graphics, Name, Vector{ToolInfo}}\n\n\nUpdate d with name children, defering other tags to parse_pnml_common!.\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.parse_productsort-Tuple{Any, Any}","page":"PNML","title":"PNML.parse_productsort","text":"parse_productsort(node, pntd; kwargs...)\n\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.parse_refPlace-Tuple{Any, Any}","page":"PNML","title":"PNML.parse_refPlace","text":"parse_refPlace(node, pntd; kw...)\n\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.parse_refTransition-Tuple{Any, Any}","page":"PNML","title":"PNML.parse_refTransition","text":"parse_refTransition(node, pntd; kw...)\n\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.parse_sort-Tuple{Any, Any}","page":"PNML","title":"PNML.parse_sort","text":"parse_sort(node, pntd; kw...)\n\n\nSorts are found within a <structure> element.\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.parse_str-Tuple{AbstractString}","page":"PNML","title":"PNML.parse_str","text":"parse_str(str::AbstractString) -> PnmlModel\n\n\nBuild a PnmlModel from a string containing XML.\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.parse_structure-Tuple{Any, Any}","page":"PNML","title":"PNML.parse_structure","text":"parse_structure(node, pntd; kw...)\n\n\nReturn Structure wrapping a PnmlDict holding a <structure>. Should be inside of an label.  A \"claimed\" label usually elids the <structure> level (does not call this method).\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.parse_term-Tuple{Any, Any}","page":"PNML","title":"PNML.parse_term","text":"parse_term(node, pntd; kwargs...)\n\n\nThere will be no node <term>.  Instead it is the interpertation of the child of some <structure> elements.\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.parse_text-Tuple{Any, Any}","page":"PNML","title":"PNML.parse_text","text":"parse_text(node, pntd; kw...) -> String\n\n\nReturn the stripped string of nodecontent.\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.parse_tokengraphics-Tuple{Any, Any}","page":"PNML","title":"PNML.parse_tokengraphics","text":"parse_tokengraphics(node, pntd; kw...) -> TokenGraphics\n\n\nHigh-level place-transition nets (HL-PTNet) have a toolspecific structure defined for token graphics. Contains <tokenposition> tags.\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.parse_tokenposition-Tuple{Any, Any}","page":"PNML","title":"PNML.parse_tokenposition","text":"parse_tokenposition(node, pntd; kw...) -> Coordinate\n\n\nCartesian coordinate relative to containing element.\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.parse_toolspecific-Tuple{Any, Any}","page":"PNML","title":"PNML.parse_toolspecific","text":"parse_toolspecific(node, pntd; kw...) -> ToolInfo\n\n\nReturn ToolInfo with tool & version attributes and content.\n\nThe content can be one or more well-formed xml elements. Each are wrapped in a PnmlLabel.\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.parse_transition-Tuple{Any, Any}","page":"PNML","title":"PNML.parse_transition","text":"parse_transition(node, pntd; kw...)\n\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.parse_tuple-Tuple{Any, Any}","page":"PNML","title":"PNML.parse_tuple","text":"parse_tuple(node, pntd; kwargs...)\n\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.parse_type-Tuple{Any, Any}","page":"PNML","title":"PNML.parse_type","text":"parse_type(node, pntd; kwargs...)\n\n\nDefines the \"sort\" of tokens held by the place and semantics of the marking. NB: The \"type\" of a place is different from the \"type\" of a net or \"pntd\".\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.parse_unknowndecl-Tuple{Any, Any}","page":"PNML","title":"PNML.parse_unknowndecl","text":"parse_unknowndecl(node, pntd; kw...) -> PNML.UnknownDeclaration\n\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.parse_unparsed-Tuple{Any, Any}","page":"PNML","title":"PNML.parse_unparsed","text":"parse_unparsed(node, pntd; kwargs...)\n\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.parse_useroperator-Tuple{Any, Any}","page":"PNML","title":"PNML.parse_useroperator","text":"parse_useroperator(node, pntd; kwargs...) -> UserOperator\n\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.parse_usersort-Tuple{Any, Any}","page":"PNML","title":"PNML.parse_usersort","text":"parse_usersort(node, pntd; kwargs...)\n\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.parse_variable-Tuple{Any, Any}","page":"PNML","title":"PNML.parse_variable","text":"parse_variable(node, pntd; kwargs...) -> Variable\n\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.parse_variabledecl-Tuple{Any, Any}","page":"PNML","title":"PNML.parse_variabledecl","text":"parse_variabledecl(node, pntd; kw...)\n\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.pid","page":"PNML","title":"PNML.pid","text":"pid(x) -> Symbol\n\nReturn pnml id symbol.\n\n\n\n\n\n","category":"function"},{"location":"API/library/#PNML.pid-Tuple{PnmlObject}","page":"PNML","title":"PNML.pid","text":"PnmlObjects are exected to have unique pnml ids.\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.place","page":"PNML","title":"PNML.place","text":"Return the place with id.\n\n\n\n\n\n","category":"function"},{"location":"API/library/#PNML.place_ids","page":"PNML","title":"PNML.place_ids","text":"Return vector of place IDs.\n\n\n\n\n\n","category":"function"},{"location":"API/library/#PNML.places","page":"PNML","title":"PNML.places","text":"Return vector of places.\n\n\n\n\n\n","category":"function"},{"location":"API/library/#PNML.pnml_common_defaults-Tuple{Any}","page":"PNML","title":"PNML.pnml_common_defaults","text":"pnml_common_defaults(node) -> Dict{Symbol, Any}\n\n\nReturn Dict of tags common to both pnml nodes and pnml labels. See also: pnml_label_defaults, pnml_node_defaults.\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.pnml_label_defaults-Tuple{Any, Vararg{Any}}","page":"PNML","title":"PNML.pnml_label_defaults","text":"pnml_label_defaults(node, xs...) -> Any\n\n\nMerge xs into dictonary with default pnml HLannotation label tags. Used on pnml tags below a PnmlNode tag. Label level tags include: name, inscription, initialMarking. Notable differences from pnml_node_defaults: text, structure, no name tag. See also: pnml_common_defaults.\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.pnml_namespace-Tuple{EzXML.Node}","page":"PNML","title":"PNML.pnml_namespace","text":"pnml_namespace(node::EzXML.Node; missing_ns_fatal, default_ns) -> String\n\n\nReturn namespace of node. Whennodedoes not have a namespace return default value [pnml_ns`](@ref).\"\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.pnml_node_defaults-Tuple{Any, Vararg{Any}}","page":"PNML","title":"PNML.pnml_node_defaults","text":"pnml_node_defaults(node, xs...) -> Any\n\n\nMerge xs into dictonary with default pnml node tags. Used on: net, page ,place, transition, arc. Usually default value will be nothing or empty vector. See also: pnml_label_defaults, pnml_common_defaults.\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.rate","page":"PNML","title":"PNML.rate","text":"Return rate value of transition.  Mising rate labels are defaulted to 0.0.\n\n\n\n\n\n","category":"function"},{"location":"API/library/#PNML.rates","page":"PNML","title":"PNML.rates","text":"Return a transition-id labelled vector of rate values for transitions of net s.\n\n\n\n\n\n","category":"function"},{"location":"API/library/#PNML.refplace","page":"PNML","title":"PNML.refplace","text":"Return reference place matching id.\n\n\n\n\n\n","category":"function"},{"location":"API/library/#PNML.refplace_ids","page":"PNML","title":"PNML.refplace_ids","text":"\n\n\n\n","category":"function"},{"location":"API/library/#PNML.refplaces","page":"PNML","title":"PNML.refplaces","text":"Return vector of reference places.\n\n\n\n\n\n","category":"function"},{"location":"API/library/#PNML.reftransition","page":"PNML","title":"PNML.reftransition","text":"Return reference transition matching id.\n\n\n\n\n\n","category":"function"},{"location":"API/library/#PNML.reftransition_ids","page":"PNML","title":"PNML.reftransition_ids","text":"\n\n\n\n","category":"function"},{"location":"API/library/#PNML.reftransitions","page":"PNML","title":"PNML.reftransitions","text":"Return vector of reference transitions.\n\n\n\n\n\n","category":"function"},{"location":"API/library/#PNML.register_id!-Tuple{IDRegistry, AbstractString}","page":"PNML","title":"PNML.register_id!","text":"register_id!(reg::IDRegistry, s::AbstractString) -> Symbol\n\n\nRegister id symbol and return the symbol.\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.reset_registry!-Tuple{IDRegistry}","page":"PNML","title":"PNML.reset_registry!","text":"reset_registry!(reg::IDRegistry) -> Set{Symbol}\n\n\nEmpty the set of id symbols. Use case is unit tests. In normal use it should never be needed.\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.source-Tuple{Any}","page":"PNML","title":"PNML.source","text":"source(arc) -> Symbol\n\n\nReturn symbol of source of arc.\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.src_arcs","page":"PNML","title":"PNML.src_arcs","text":"Return vector of arcs that have a source of transition id.\n\nSee also all_arcs, tgt_arcs.\n\n\n\n\n\n","category":"function"},{"location":"API/library/#PNML.structure-Tuple{L} where L<:AbstractLabel","page":"PNML","title":"PNML.structure","text":"Return structure field.\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.tag","page":"PNML","title":"PNML.tag","text":"tag(x) -> Symbol\n\nReturn tag symbol.\n\n\n\n\n\n","category":"function"},{"location":"API/library/#PNML.target-Tuple{Any}","page":"PNML","title":"PNML.target","text":"target(arc) -> Symbol\n\n\nReturn symbol of target of arc.\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.text-Tuple{L} where L<:AbstractLabel","page":"PNML","title":"PNML.text","text":"Return text field\n\n\n\n\n\n","category":"method"},{"location":"API/library/#PNML.tgt_arcs","page":"PNML","title":"PNML.tgt_arcs","text":"Return vector of arcs that have a target of transition id.\n\nSee also all_arcs, src_arcs.\n\n\n\n\n\n","category":"function"},{"location":"API/library/#PNML.transition","page":"PNML","title":"PNML.transition","text":"\n\n\n\n","category":"function"},{"location":"API/library/#PNML.transition_function","page":"PNML","title":"PNML.transition_function","text":"Transition function of a Petri Net. Each transition has an input vector and an output vector. Each labelled vector is indexed by the place on the other end of the arc. Values are inscriptions.\n\n\n\n\n\n","category":"function"},{"location":"API/library/#PNML.transition_ids","page":"PNML","title":"PNML.transition_ids","text":"\n\n\n\n","category":"function"},{"location":"API/library/#PNML.transitions","page":"PNML","title":"PNML.transitions","text":"Return vector of transitions.\n\n\n\n\n\n","category":"function"},{"location":"API/library/#PNML.unclaimed_label","page":"PNML","title":"PNML.unclaimed_label","text":"Return tag => PnmlDict holding a pnml label and its children.\n\nThe main use-case is to wrap in a PnmlLabel, Structure, Term or other specialized label. These wrappers add type to the  nested dictonary holding the contents of the label.\n\nDiffers from AnyElement in that any id attribute of node will be registered in IDRegistry as a unique identifier.\n\n\n\n\n\n","category":"function"},{"location":"API/library/#PNML.xmlnode","page":"PNML","title":"PNML.xmlnode","text":"xmlnode(x) -> XMLNode\n\nReturn attached xml node.\n\n\n\n\n\n","category":"function"},{"location":"API/library/#Macros","page":"PNML","title":"Macros","text":"","category":"section"},{"location":"API/library/","page":"PNML","title":"PNML","text":"Docstrings for macros.","category":"page"},{"location":"API/library/","page":"PNML","title":"PNML","text":"Modules = [PNML]\nOrder = [:macro]","category":"page"},{"location":"API/library/#PNML.@xml_str-Tuple{Any}","page":"PNML","title":"PNML.@xml_str","text":"Parse xml string into EzXML node.\n\n\n\n\n\n","category":"macro"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"CurrentModule = PNML","category":"page"},{"location":"pnml/#PNML.jl","page":"Petri Net Markup Language","title":"PNML.jl","text":"","category":"section"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"Documentation for the GitHub  PNML.jl repository.","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"using Markdown\nusing Pkg\nusing Dates\nusing InteractiveUtils\n\nfunction print_dep_version(depname)\n    deps = Pkg.dependencies()\n    version = first(d for d in deps if d.second.name == depname).second.version\n\n    \"$depname: v$version\"\nend\n\nMarkdown.parse(\"\"\"\n\tThese docs were autogenerated at $(now()) on $(gethostname()) using:\n        - $(print_dep_version(\"PNML\"))\n\t    - $(print_dep_version(\"EzXML\"))\n   \"\"\")","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"using InteractiveUtils; # hide\nversioninfo()","category":"page"},{"location":"pnml/#www.pnml.org","page":"Petri Net Markup Language","title":"www.pnml.org","text":"","category":"section"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"http://www.pnml.org has publications and tutorials covering PNML at various points in its evolution. Is the cannonical site for the RELAX-NG XML schemas that define the grammer of several Petri Net Type Defintions (pntd), including:","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"PT Net \nHigh-level Place/Transition Net\nSymmetric Net","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"These are instances of the 3 flavors currently covered by PNML.","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"There are links to a series of ISO/IEC 15909 standards relating to PNML. They cost money.","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"Note that ISTM the people behind PNML are of the Model Driven Engineering (MDE) camp and have chosen Java, Eclipse and its EMF. There is GUI focus.","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"The high-level marking, inscription, condition and declaration are where the hard work waits.","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"See A primer on the Petri Net Markup Language and ISO/IEC 15909-2(pdf) for more details. The rest of this page will make more sense if you are familiar with the primer's contents.","category":"page"},{"location":"pnml/#Interoperability","page":"Petri Net Markup Language","title":"Interoperability","text":"","category":"section"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"Petri Net Type Definition files (pntd) are defined using RELAX-NG XML Schema files. Petri Net Markup Language files (pnml) are intended to be validated against a pntd schema.","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"For tool interchange it should be enough to support the same pntd schema.","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"Petri Net type definitions is for interchange of pnml models between different tools. ISO is working on part 3 of the PNML standard covering pntd (as of October 2021).","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"It is possibly to create a non-standard pntd. And more will be standardized, either formally or informally. Non-standard mostly means that the interchangibility is restricted.","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"Since validation is not a goal of PNML.jl, non-standard pntds can be used for the URI of an XML net tag's type attribute. Notably pnmlcore and nonstandard are mapped to PnmlCore.","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"PnmlCore is the minimum level of meaning that any pnml file can hold. PNML.jl should be able to create a valid intermediate representation using PnmlCore, since all the higher-level meaning is expressed as pnml labels, restrictions, and required XML tag names.","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"Further parsing of labels are delegated to some subtype of PNML.PetriNet.","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"If you want interchangability of pnml models, you will have to stick to the standard pnml pntds. The High Level Petri Net, even when restricted to symmetricnet.pntd, is very expressive. Even the base pnmlcore.pntd is useful.","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"Note that the official pntd schema files are in the grammer directory.","category":"page"},{"location":"pnml/#Why-no-Schema-Verification","page":"Petri Net Markup Language","title":"Why no Schema Verification","text":"","category":"section"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"Within PNML.jl no schema-level validation is done.","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"In is allowed by the PNML specification to omit validation with the presumption that some specialized, external tool can be applied, thus allowing the file format to be used for inter-tool communication with lower overhead in each tool.","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"Also a desire to allow \"duck typing\" of Petri Nets built upon the PNML intermediate representration.","category":"page"},{"location":"pnml/#PNTD","page":"Petri Net Markup Language","title":"PNTD","text":"","category":"section"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"Defaut PNTD to Symbol map (URI string to pntd symbol):","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"using PNML; foreach(println, sort(collect(pairs(PNML.PnmlTypes.default_pntd_map)))) #hide","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"PnmlType map (pntd symbol to singleton):","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"using PNML; foreach(println, pairs(PNML.PnmlTypes.pnmltype_map)) #hide","category":"page"},{"location":"pnml/#Handling-Labels","page":"Petri Net Markup Language","title":"Handling Labels","text":"","category":"section"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"The implementation of Labels supports annotation and attribute format labels.","category":"page"},{"location":"pnml/#Annotation-Labels","page":"Petri Net Markup Language","title":"Annotation Labels","text":"","category":"section"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"annotation format labels are expected to have either a <text> element,  a <structure> element or both. Often the <text> is a human-readable representation of of the <structure> element. Graphics and ToolInfo elements may be present.","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"Labels defined in High-Level pntds, specifically 'Symmetric Nets', \"require\" all meaning to reside in the <structure>.","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"For PTNet labels (and pnmlcore) only the Name label with a <etxt> element is defined. ","category":"page"},{"location":"pnml/#Attribute-Labels","page":"Petri Net Markup Language","title":"Attribute Labels","text":"","category":"section"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"attribute format labels are present in the UML model of pnml.   They differ from annotation by omitting the Graphics element,  but retain the ToolInfo element. Unless an optimization is identified, both attribute and annotation will share the same implementation.","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"A standard-conforming pnml model would not have any Graphics element  so that field would be nothing.","category":"page"},{"location":"pnml/#High-level-Petri-Net-Concepts","page":"Petri Net Markup Language","title":"High-level Petri Net Concepts","text":"","category":"section"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"From the draft version of ISO/IEC 15909-1:2004 High-level Petri nets - Part 1: Concepts, definitions and graphical notation.","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"Useful for setting the ontology.","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"Arc inscriptions are expressions that are evaluated.","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"Place markings are multisets of tokens of a sort/type.","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"Transition conditions are boolean expressions that are evaluated.  Used to determine if transition is enabled. ","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"Expressions in pnml can be many-sorted algebras. Declaration, Term, Sort, Multiset, Variable, are among the concepts used to define expressions.","category":"page"},{"location":"pnml/#Terms","page":"Petri Net Markup Language","title":"Terms","text":"","category":"section"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"Terms have sorts: the sort of the variable or the output sort of the operator.","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"Terms can be buit from built-in operators and sorts, and user-defined variables. These are defined in variable declarations, a kind of annotation label attached to pages and nets.","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"A transition can have a condition, a term of sort boolean, which imposes restrictions on when the transition may fire.","category":"page"},{"location":"pnml/#Sorts","page":"Petri Net Markup Language","title":"Sorts","text":"","category":"section"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"named sorts are constructed from existing sorts and given a new name.","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"arbitrary sort is not defined in core, is not allowed in Symmetric Nets. HLPNG adds arbitrary declarations, sorts of lists, strings, integers to Symmetric Nets.","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"The sort of a term is the sort of the variable or the output sort of the operator.","category":"page"},{"location":"pnml/#Operators","page":"Petri Net Markup Language","title":"Operators","text":"","category":"section"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"An operator can be: built-in constant, built-in operator, multiset operator or tuple operator.","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"User-defined operators, or named operators are abbreviations, built from existing operators and parameter variables.","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"There will be arbitrary operator declarations for High-Level Petri Net Graphs, but not for Symmetric Nets.","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"Operators have a sequence of input sorts and a single output sort.","category":"page"},{"location":"pnml/#Variables","page":"Petri Net Markup Language","title":"Variables","text":"","category":"section"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"TBD","category":"page"},{"location":"pnml/#Continuous,-Open-and-Other-Petri-Nets","page":"Petri Net Markup Language","title":"Continuous, Open and Other Petri Nets","text":"","category":"section"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"Allow marking, inscription, conditions to be floating point even when specification wants an integer. This allows continuous nets.","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"See Petri.jl and AlgebraicPetri.jl for some continuous use-cases.","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"TODO: Hybrid nets combining floating point/continuous and integer/discrete inscription/marking.","category":"page"},{"location":"pnml/#References","page":"Petri Net Markup Language","title":"References","text":"","category":"section"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"See PnmlTypes.PnmlType, PnmlTypes.default_pntd_map, PnmlTypes.pnmltype_map","category":"page"},{"location":"","page":"Index","title":"Index","text":"Modules = [PNML, PNML.PnmlTypes]","category":"page"}]
}
