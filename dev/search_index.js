var documenterSearchIndex = {"docs":
[{"location":"defaults/","page":"Default Values","title":"Default Values","text":"CurrentModule = PNML","category":"page"},{"location":"defaults/#Default-Values","page":"Default Values","title":"Default Values","text":"","category":"section"},{"location":"defaults/","page":"Default Values","title":"Default Values","text":"Varies by PNTD. Possibilitie include:","category":"page"},{"location":"defaults/","page":"Default Values","title":"Default Values","text":"markings: return zero(Int), zero(Float64), or empty multiset of same sort as adjacent place's sorttype.\ninscription: return one(Int), one(Float64), or singleton multiset of same sort as adjacent place's sorttype with value of first(elements(sort)).\ncondition: return true, or BooleanConstant(true)","category":"page"},{"location":"defaults/","page":"Default Values","title":"Default Values","text":"The ISO/IEC 15909-2 specification and the RelaxNG Schemas state 'natural numbers' and 'non-zero natural numbers'. I choose to also allow continuous values to support nonstandard continuous and hybrid valued Petri Nets. Makes generating default values more interesting.","category":"page"},{"location":"defaults/","page":"Default Values","title":"Default Values","text":"Determine type of Number to parse with number_value by using pntd on:","category":"page"},{"location":"defaults/","page":"Default Values","title":"Default Values","text":"condition_value_type\ninscription_value_type\nmarking_value_type\ncoordinate_value_type\nremoved termvaluetype\nrate_value_type","category":"page"},{"location":"defaults/","page":"Default Values","title":"Default Values","text":"There are many items in the XML that are permitted to be missing and a defaut value is assumed. Examples are place initial marking, arc inscription, transition condition, graphics data.","category":"page"},{"location":"defaults/","page":"Default Values","title":"Default Values","text":"place initial marking is assumed to be empty, i. e. 0.\narc inscription is assumed to be 1.\ntransition condition is assumed to be true\ngraphics data, e.g. token position, line width, are TBD","category":"page"},{"location":"defaults/","page":"Default Values","title":"Default Values","text":"There are multiple kinds of nets supported by PNML.jl differing by (among other properties) the kind on number they use:","category":"page"},{"location":"defaults/","page":"Default Values","title":"Default Values","text":"discrete,\ncontinuous,\nand multi-sorted algebra","category":"page"},{"location":"defaults/","page":"Default Values","title":"Default Values","text":"See PnmlType - Petri Net Type Definition for the full hierarchy.","category":"page"},{"location":"defaults/","page":"Default Values","title":"Default Values","text":"This means there are at least 3 sets of default value types. We use the pntd PnmlType singleton as a trait to determin the default types/values.","category":"page"},{"location":"defaults/","page":"Default Values","title":"Default Values","text":"A consequence is that the default value's type ripples through the type system.","category":"page"},{"location":"defaults/","page":"Default Values","title":"Default Values","text":"using AbstractTrees, PNML, InteractiveUtils, Markdown\nusing PNML: default_condition\nusing PNML: default_inscription, default_hlinscription\nusing PNML: default_marking, default_hlmarking\nusing PNML: SortType, UserSort, IntegerSort, DotSort,\n            PnmlCoreNet, ContinuousNet, HLCoreNet,\n            NumberConstant, DotConstant\n\nempty!(PNML.TOPDECLDICTIONARY)\ndd = PNML.TOPDECLDICTIONARY[:NN] = PNML.DeclDict()\nPNML.fill_nonhl!(dd; ids=(:nothing,))\n\nlist_type(f) = for pntd in values(PNML.PnmlTypeDefs.pnmltype_map)\n    println(rpad(pntd, 15), \" -> \", f(pntd))\nend","category":"page"},{"location":"defaults/#Methods","page":"Default Values","title":"Methods","text":"","category":"section"},{"location":"defaults/","page":"Default Values","title":"Default Values","text":"PNML.default_marking","category":"page"},{"location":"defaults/","page":"Default Values","title":"Default Values","text":"methods(PNML.default_marking) # hide","category":"page"},{"location":"defaults/","page":"Default Values","title":"Default Values","text":"PNML.default_inscription","category":"page"},{"location":"defaults/","page":"Default Values","title":"Default Values","text":"methods(PNML.default_inscription) # hide","category":"page"},{"location":"defaults/","page":"Default Values","title":"Default Values","text":"PNML.default_condition","category":"page"},{"location":"defaults/","page":"Default Values","title":"Default Values","text":"methods(PNML.default_condition) # hide","category":"page"},{"location":"defaults/#Examples","page":"Default Values","title":"Examples","text":"","category":"section"},{"location":"defaults/","page":"Default Values","title":"Default Values","text":"DocTestSetup = quote\n    using PNML\n    using PNML: default_condition\n    using PNML: default_inscription, default_hlinscription\n    using PNML: default_marking, default_hlmarking\n    using PNML: SortType, UserSort, IntegerSort, DotSort,\n                PnmlCoreNet, ContinuousNet, HLCoreNet,\n                NumberConstant, DotConstant\n\n    empty!(PNML.TOPDECLDICTIONARY)\n    dd = PNML.TOPDECLDICTIONARY[:NN] = PNML.DeclDict()\n    PNML.fill_nonhl!(dd; ids=(:nothing,))\nend","category":"page"},{"location":"defaults/","page":"Default Values","title":"Default Values","text":"julia> c = default_condition(PnmlCoreNet())\nCondition(\"\", true)\n\njulia> c()\ntrue\n\njulia> c = default_condition(ContinuousNet())\nCondition(\"\", true)\n\njulia> c = default_condition(HLCoreNet())\nCondition(\"\", true)","category":"page"},{"location":"defaults/","page":"Default Values","title":"Default Values","text":"julia> i = default_inscription(PnmlCoreNet())\nInscription(1)\n\njulia> i = default_inscription(ContinuousNet())\nInscription(1.0)\n\njulia> i = default_hlinscription(HLCoreNet(), SortType(UserSort(:dot, ids=(:NN,))))\nHLInscription(\"\", PnmlMultiset(basis=DotSort(), mset=Multiset(DotConstant() => 1,\n)))\n\njulia> i()\n1","category":"page"},{"location":"defaults/","page":"Default Values","title":"Default Values","text":"julia> m = default_marking(PnmlCoreNet())\nMarking(0)\n\njulia> m()\n0\n\njulia> m = default_marking(ContinuousNet())\nMarking(0.0)\n\njulia> m()\n0.0\n\njulia> m = default_hlmarking(HLCoreNet(), SortType(UserSort(:dot, ids=(:NN,))))\nHLMarking(\"\", PnmlMultiset(basis=DotSort(), mset=Multiset()))\n\njulia> m()\n0","category":"page"},{"location":"defaults/","page":"Default Values","title":"Default Values","text":"DocTestSetup = nothing","category":"page"},{"location":"status/","page":"Status","title":"Status","text":"High-level nets are not completely implemented. This statement will remain true as incremental progress is slowly made. It is safe to state this will be one of the last feature to near completion.","category":"page"},{"location":"status/","page":"Status","title":"Status","text":"(as of November 2022). Supporting continuous/hybrid high-level nets may not be possible. We currently do not try. Note this is a extension to what the specifiction covers: natural numbers.","category":"page"},{"location":"status/#Roadmap","page":"Status","title":"Roadmap","text":"","category":"section"},{"location":"status/","page":"Status","title":"Status","text":"https://www.pnml.org/tools.php lists two expected features of a \"PNML supporting tool\":","category":"page"},{"location":"status/","page":"Status","title":"Status","text":"create PNML files conforming to a PNTD meta-model\nload PNML files and use PNTD meta-models to \"make\" a Petri Net","category":"page"},{"location":"status/","page":"Status","title":"Status","text":"with the presumption that one does something useful.","category":"page"},{"location":"status/","page":"Status","title":"Status","text":"Have not considered any part of creating or writing out a Petri Net model. This package, PNML.jl, aims to provide infrastructure to interact with other Julia packages, including graphs, category theory, SciML, agents. All focus has been on the \"load\" part of the expected behavior. Doing \"something useful\" is mostly aspriational until adequate function is present.","category":"page"},{"location":"status/","page":"Status","title":"Status","text":"The first useful things will be trivial and obvious:","category":"page"},{"location":"status/","page":"Status","title":"Status","text":"display the PNML Model\nanalyze the PNML Model\nconstruct a Petri.jl Model to solve an ODE.  # maybe not trivial or obvious :)","category":"page"},{"location":"status/","page":"Status","title":"Status","text":"Next will be to interface with graph-theoretical packages. Enhancing the display and analysis features.","category":"page"},{"location":"status/","page":"Status","title":"Status","text":"Altering markings will be begun after an initial data structure has been adopted to load models.","category":"page"},{"location":"status/","page":"Status","title":"Status","text":"Checkpointing and writing in some \"non-PNML\" format is another anticipated feature.","category":"page"},{"location":"status/","page":"Status","title":"Status","text":"Features mentioned in a preview of ISO/IEC 15909-3:2021 Part 3: Extensions and Structuring Mechanisms","category":"page"},{"location":"status/","page":"Status","title":"Status","text":"capacity: maximum multiset of tokens a place can hold\nFIFO queue (queues in general)\nspecial arcs: inhibitor, read, reset\nsort generator: sorts and operators from signatures","category":"page"},{"location":"type_hierarchies/","page":"Type Hierarchies","title":"Type Hierarchies","text":"CurrentModule = PNML","category":"page"},{"location":"type_hierarchies/","page":"Type Hierarchies","title":"Type Hierarchies","text":"Overview of some type hierarchies.","category":"page"},{"location":"type_hierarchies/","page":"Type Hierarchies","title":"Type Hierarchies","text":"using AbstractTrees, PNML, InteractiveUtils, Markdown\n#, GraphRecipes,Plots\n\nAbstractTrees.children(x::Type) = subtypes(x)\ntype_tree(t) = println(AbstractTrees.repr_tree(t))","category":"page"},{"location":"type_hierarchies/#PnmlType-Petri-Net-Type-Definition","page":"Type Hierarchies","title":"PnmlType - Petri Net Type Definition","text":"","category":"section"},{"location":"type_hierarchies/","page":"Type Hierarchies","title":"Type Hierarchies","text":"See PnmlTypeDefs module page.","category":"page"},{"location":"type_hierarchies/","page":"Type Hierarchies","title":"Type Hierarchies","text":"There are levels:  Core (Place-Transition), Continuous and High-Level PNG (HLPNG).","category":"page"},{"location":"type_hierarchies/","page":"Type Hierarchies","title":"Type Hierarchies","text":"PnmlCoreNet is a concrete subtype of PnmlType. PnmlCoreNet is used by some AbstractPetriNet concrete types (SimpleNet).","category":"page"},{"location":"type_hierarchies/","page":"Type Hierarchies","title":"Type Hierarchies","text":"ContinuousNet is a concrete type of AbstractContinuousNet. ContinuousNet uses floating point marking and inscriptions. It is a nonstandard extension to the ISO specification.","category":"page"},{"location":"type_hierarchies/","page":"Type Hierarchies","title":"Type Hierarchies","text":"HLCoreNet is a concrete subtype of AbstractHLCore. HLCoreNet is used by some AbstractPetriNet concrete types (HLPetriNet). Think of it as a testable implementation of AbstractHLCore.","category":"page"},{"location":"type_hierarchies/","page":"Type Hierarchies","title":"Type Hierarchies","text":"The IR does not try to impose semantics on the model. Those semantics should be part of AbstractPetriNet.  The IR tries to represent the model (all models) at a structural level. It may paramertize types to facilitate specilization.","category":"page"},{"location":"type_hierarchies/","page":"Type Hierarchies","title":"Type Hierarchies","text":"type_tree(PNML.PnmlTypeDefs.PnmlType) # hide","category":"page"},{"location":"type_hierarchies/","page":"Type Hierarchies","title":"Type Hierarchies","text":"PnmlType Description\nPnmlCoreNet <name> is only defined label\nPTNet <initialMarking>, <inscription> labels only have <text>\nHLCoreNet support structure used by all HL Petri Net Graphs\nPT-HLPNG restrict sort to dot, condition always true\nSymmetricNet restrict sorts to finite, annotations have <structure>\nHLNet extend symmetric with arbitrary sorts\nStochastic continuous or discrete\nTimed continuous or discrete\nOpen continuous or discrete","category":"page"},{"location":"type_hierarchies/","page":"Type Hierarchies","title":"Type Hierarchies","text":"Todo: Continuous Petri Net","category":"page"},{"location":"type_hierarchies/","page":"Type Hierarchies","title":"Type Hierarchies","text":"Full Name Node Label Description\nMarking Place \nInscription Arc \nHLMarking Place \nHLInscription Arc \nCondition Transition \nRate Transition random variable or function of marking, firing rate\nPriority Transition firing order of enabled transitions\nWeight Transition firing tiebreaker","category":"page"},{"location":"type_hierarchies/","page":"Type Hierarchies","title":"Type Hierarchies","text":"Note that Rate, Priority and Weight are not part of base specification. See Unclaimed Labels","category":"page"},{"location":"type_hierarchies/#AbstractPetriNet","page":"Type Hierarchies","title":"AbstractPetriNet","text":"","category":"section"},{"location":"type_hierarchies/","page":"Type Hierarchies","title":"Type Hierarchies","text":"AbstractPetriNet uses the Intermediate Representation's PnmlNet and PnmlType to implement a Petri Net Graph (PNG).","category":"page"},{"location":"type_hierarchies/","page":"Type Hierarchies","title":"Type Hierarchies","text":"type_tree(PNML.AbstractPetriNet) # hide","category":"page"},{"location":"type_hierarchies/#AbstractPnmlObject","page":"Type Hierarchies","title":"AbstractPnmlObject","text":"","category":"section"},{"location":"type_hierarchies/","page":"Type Hierarchies","title":"Type Hierarchies","text":"Page, Arc, Place, Transition define the graph of a PnmlNet.","category":"page"},{"location":"type_hierarchies/","page":"Type Hierarchies","title":"Type Hierarchies","text":"type_tree(PNML.AbstractPnmlObject) # hide","category":"page"},{"location":"type_hierarchies/","page":"Type Hierarchies","title":"Type Hierarchies","text":"Fields expected of every subtype of AbstractPnmlObject:","category":"page"},{"location":"type_hierarchies/","page":"Type Hierarchies","title":"Type Hierarchies","text":"Name Type\nid Symbol\npntd <: PnmlType\nname Maybe{Name}\nlabels PnmlLabel\ntools ToolInfo","category":"page"},{"location":"type_hierarchies/#AbstractLabel","page":"Type Hierarchies","title":"AbstractLabel","text":"","category":"section"},{"location":"type_hierarchies/","page":"Type Hierarchies","title":"Type Hierarchies","text":"AbstractLabels are attached to AbstractPnmlObjects. Kinds of label include: marking, inscription, condition and declarations, sort, and ad-hoc. Ad-hoc is where we assume any undefined element attached to a AbstractPnmlObject instance is a label and add it to a collection of 'other labels'. Some 'other labels' can be accessed using: rate, delay.","category":"page"},{"location":"type_hierarchies/","page":"Type Hierarchies","title":"Type Hierarchies","text":"type_tree(PNML.AbstractLabel) # hide","category":"page"},{"location":"type_hierarchies/","page":"Type Hierarchies","title":"Type Hierarchies","text":"info: Difference between Object and Label\nObjects have ids and Names.\nLabels are attached to Objects.\nSome Labels (attributes) do not have Graphics.\nLabels are extendable.\nLabels are named by the xml tag. Any \"unknown\" tag of an Object is presumed to be a label.","category":"page"},{"location":"type_hierarchies/#AbstractPnmlTool","page":"Type Hierarchies","title":"AbstractPnmlTool","text":"","category":"section"},{"location":"type_hierarchies/","page":"Type Hierarchies","title":"Type Hierarchies","text":"See ToolInfo.","category":"page"},{"location":"type_hierarchies/","page":"Type Hierarchies","title":"Type Hierarchies","text":"type_tree(PNML.AbstractPnmlTool) # hide","category":"page"},{"location":"type_hierarchies/#PnmlException","page":"Type Hierarchies","title":"PnmlException","text":"","category":"section"},{"location":"type_hierarchies/","page":"Type Hierarchies","title":"Type Hierarchies","text":"type_tree(PNML.PnmlException) # hide","category":"page"},{"location":"type_hierarchies/#Many-sorted-Algebra-Concepts","page":"Type Hierarchies","title":"Many-sorted Algebra Concepts","text":"","category":"section"},{"location":"type_hierarchies/","page":"Type Hierarchies","title":"Type Hierarchies","text":"The PNML Specification builds the High-level Petri Net Graph as a layer using a Core layer (PnmlCore). The main feature of the HL layer (HLCore) is to require all annotation labels to have <text> and <structure> elements. All meaning is required to reside in a single child of <structure>. With the <text> for human/documentation use.","category":"page"},{"location":"type_hierarchies/","page":"Type Hierarchies","title":"Type Hierarchies","text":"Implemented so that it is mostly part of the PnmlCore implementation. At which level, both <text> and <structure> are optional.","category":"page"},{"location":"type_hierarchies/","page":"Type Hierarchies","title":"Type Hierarchies","text":"The <type> label of a Place is meant to be a sort of a many-sorted algebra. We call it sorttype to reduce the confusion.","category":"page"},{"location":"type_hierarchies/","page":"Type Hierarchies","title":"Type Hierarchies","text":"PNML.jl allows/requires all net type's places to have sorttype objects. Only high-level PNML input is expected to contain a <type> tag. For other nets we interpret the SortType to be IntegerSort or RealSort based on PNTD. And Marking values of non-high-level nets are interpreted as multisets with airity of 1. This allows more common implementation in the core layer.","category":"page"},{"location":"type_hierarchies/","page":"Type Hierarchies","title":"Type Hierarchies","text":"For high-level nets the sorttype object is an SortType HLAnnotation subtype containing an AbstractSort.","category":"page"},{"location":"type_hierarchies/#AbstractDeclaration","page":"Type Hierarchies","title":"AbstractDeclaration","text":"","category":"section"},{"location":"type_hierarchies/","page":"Type Hierarchies","title":"Type Hierarchies","text":"Labels attached to PnmlNet and/or Page. The Declarations contained in a <declarations> apply to the whole net even when attached to a Page.","category":"page"},{"location":"type_hierarchies/","page":"Type Hierarchies","title":"Type Hierarchies","text":"type_tree(PNML.AbstractDeclaration) # hide","category":"page"},{"location":"type_hierarchies/#AbstractSort","page":"Type Hierarchies","title":"AbstractSort","text":"","category":"section"},{"location":"type_hierarchies/","page":"Type Hierarchies","title":"Type Hierarchies","text":"Each Place has a sorttype containing an AbstractSort.","category":"page"},{"location":"type_hierarchies/","page":"Type Hierarchies","title":"Type Hierarchies","text":"type_tree(PNML.AbstractSort) # hide","category":"page"},{"location":"type_hierarchies/#AbstractTerm","page":"Type Hierarchies","title":"AbstractTerm","text":"","category":"section"},{"location":"type_hierarchies/","page":"Type Hierarchies","title":"Type Hierarchies","text":"Part of the many-sorted algebra of a High-level net. See AbstractOperator. Variable","category":"page"},{"location":"type_hierarchies/","page":"Type Hierarchies","title":"Type Hierarchies","text":"type_tree(PNML.AbstractTerm) # hide","category":"page"},{"location":"IR/","page":"-","title":"-","text":"CurrentModule = PNML","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"CurrentModule = PNML","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"Pages = [\"interface.md\"]\nDepth = 5","category":"page"},{"location":"interface/#Interface","page":"Interfaces","title":"Interface","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"warning: Warning\nBeing a work in progress, there will be obsolete, optimistic or incoherent bits.Eventually this section will cover interfaces in a useful way.","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"The intermediate representation is used to implement networks expressed in a pnml model. The consumer of the IR is a network is most naturally a varity of Petri Net.","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"We start a description of the net IR here.","category":"page"},{"location":"interface/#DictType","page":"Interfaces","title":"DictType","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"Used by:","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"AnyElement\nPnmlLabel\nSortType","category":"page"},{"location":"interface/#Top-Level:-Model,-Net,-Page","page":"Interfaces","title":"Top Level: Model, Net, Page","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"At the top level[layers] a <pnml> model is one or more networks::PnmlNet, each described by a <net> tag and one or more <page> tags.","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"Page  is a required element mostly present for visual presentation to humans. It contains AbstractPnmlObject types that implement the Petri Net Graph (PNG).","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"[layers]: Page inside a PnmlNet inside a AbstractPetriNet. Where the Petri Net part is expressed as a Petri Net Type Definition XML schema file (.pntd) identified by a URI. Or would if our nonstandard extensions had schemas defined. Someday there will be such schemas.","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"While Graphics is implemented it is not dicussed further (until someone extends/uses it).","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"ToolInfo used to attach well-formed XML almost anywhere in the PNG. TODO: Need way to parse <toolspecific> that is flexible/extendable.","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"Parse pnml for input, worry about writing back out and interchange later (future extensions). Another future extension may be to use pages for distributed computing.","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"The pnml specification permits that multiple pages to be flattened (by flatten_pages!) to a single Page before use. Using them unflattened is not supposed to be impossible, but is not the arena or the initial use cases (in no paticular order): adapting to use graph tools, agent based modeling, sciml, etc.","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"AbstractPetriNet subtypes wrap and extend PnmlNet. Note the Pnml to Petri.","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"PnmlNet and its contents can be considered an intermediate representation (IR). A concrete AbstractPetriNet type uses the IR to produce higher-level behavior. This is the level at which flatten_pages! and deref! operate.","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"AbstractPetriNet is the level of most Petri Net Graph semantics. One example is enforcing integer, non-negative, positive. One mechanism used is type parameters.","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"Remember, the IR trys to be as promiscuous as possible.","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"XML <net> tags are parsed by parse_net into a PnmlNet.","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"XML <page> tags are parsed by parse_page! into a Page.","category":"page"},{"location":"interface/#Places","page":"Interfaces","title":"Places","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"Properties that various places may have one or more of:","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"discrete\ncontinuous\ntimed","category":"page"},{"location":"interface/#Transitions","page":"Interfaces","title":"Transitions","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"Properties that various transitions may have one or more of:","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"discrete\ncontinuous\nhybrid of discrete & continuous subnets\nstochastic\nimmediate\ndeterministically time delayed\nscheduled","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"The pnml schemas and primer only try to cover the discrete case as Place-Transition and High-Level Petri Nets.","category":"page"},{"location":"interface/#Extensions-to-PNML","page":"Interfaces","title":"Extensions to PNML","text":"","category":"section"},{"location":"interface/#Continuous-Values","page":"Interfaces","title":"Continuous Values","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"Continous support is present where possible. For instance, when a number appers in the XML number_value is used to parse the string to Int or Float64. This is currently (2022) \"non-standard\" so such pnml files will not be generally interchangable with other tools.","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"'Discrete, Continuous, and Hybrid Petri Nets' by Rene David and Hassane Alla","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"VANESA","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"See rate for a use of non-standard labels by SimpleNet. Implements a continuous petri net as part of the first working use-case. Demonstrates the expressiveness of pnml.","category":"page"},{"location":"interface/#Petri-Net-Graphs-and-Networks","page":"Interfaces","title":"Petri Net Graphs and Networks","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"There are 3 top-level forms:","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"AbstractPetriNet subtypes wraping a single PnmlNet.\nPnmlNet  maybe multiple pages.\nPage when the only page of the only net in a Abstractpetrinet.","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"The simplest arrangement is a pnml model with a single <net> element having a single page. Any <net> may be flatten to a single page.","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"The initial AbstractPetriNet subtypes are built using the assumption that multiple pages will be flattened to a single page.","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"using AbstractTrees, PNML, InteractiveUtils, Markdown","category":"page"},{"location":"interface/#Simple-Interface-Methods","page":"Interfaces","title":"Simple Interface Methods","text":"","category":"section"},{"location":"interface/#pid-get-PNML-ID-symbol","page":"Interfaces","title":"pid - get PNML ID symbol","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"Objects within a pnml graph have unique identifiers, which are used for referring to the object. This includes: AbstractPnmlObject subtypes, PnmlNet.","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"PNML.pid","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.pid) # hide","category":"page"},{"location":"interface/#name-get-name","page":"Interfaces","title":"name - get name","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"AbstractPnmlObjects and PnmlNets have a name label. Declarations have a name attribute. ToolInfos have a toolname attribute.","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"PNML.name","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.name) # hide","category":"page"},{"location":"interface/#tag-access-XML-tag-symbol","page":"Interfaces","title":"tag - access XML tag symbol","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"PNML.tag","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.tag) # hide","category":"page"},{"location":"interface/#nettype-return-PnmlType-identifying-PNTD","page":"Interfaces","title":"nettype - return PnmlType identifying PNTD","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"PNML.nettype","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.nettype) # hide","category":"page"},{"location":"interface/#Nodes-of-Petri-Net-Graph","page":"Interfaces","title":"Nodes of Petri Net Graph","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"Return vector of nodes.","category":"page"},{"location":"interface/#places","page":"Interfaces","title":"places","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"PNML.places","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.places) # hide","category":"page"},{"location":"interface/#transitions","page":"Interfaces","title":"transitions","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"PNML.transitions","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.transitions) # hide","category":"page"},{"location":"interface/#arcs","page":"Interfaces","title":"arcs","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"PNML.arcs","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.arcs) # hide","category":"page"},{"location":"interface/#refplaces","page":"Interfaces","title":"refplaces","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"PNML.refplaces","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.refplaces)  # hide","category":"page"},{"location":"interface/#reftransitions","page":"Interfaces","title":"reftransitions","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"PNML.reftransitions","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.reftransitions)  # hide","category":"page"},{"location":"interface/#Node-Predicates-uses-PNML-ID","page":"Interfaces","title":"Node Predicates - uses PNML ID","text":"","category":"section"},{"location":"interface/#has_place","page":"Interfaces","title":"has_place","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"PNML.has_place","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.has_place)  # hide","category":"page"},{"location":"interface/#has_transition","page":"Interfaces","title":"has_transition","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"PNML.has_place","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.has_transition)  # hide","category":"page"},{"location":"interface/#has_arc","page":"Interfaces","title":"has_arc","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"PNML.has_arc","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.has_arc) # hide","category":"page"},{"location":"interface/#has_refplace","page":"Interfaces","title":"has_refplace","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"PNML.has_refplace","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.has_refplace)  # hide","category":"page"},{"location":"interface/#has_reftransition","page":"Interfaces","title":"has_reftransition","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"PNML.has_reftransition","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.has_reftransition)  # hide","category":"page"},{"location":"interface/#Node-Access-uses-PNML-ID","page":"Interfaces","title":"Node Access - uses PNML ID","text":"","category":"section"},{"location":"interface/#place","page":"Interfaces","title":"place","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"PNML.place","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.place)  # hide","category":"page"},{"location":"interface/#transition","page":"Interfaces","title":"transition","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"PNML.transition","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.transition) # hide","category":"page"},{"location":"interface/#arc","page":"Interfaces","title":"arc","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"PNML.arc","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.arc)  # hide","category":"page"},{"location":"interface/#refplace","page":"Interfaces","title":"refplace","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"PNML.refplace","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.refplace)  # hide","category":"page"},{"location":"interface/#reftransition","page":"Interfaces","title":"reftransition","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"PNML.reftransition","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.reftransition)  # hide","category":"page"},{"location":"interface/#Node-ID-Iteratables","page":"Interfaces","title":"Node ID Iteratables","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"Better to iterate than allocate. Using a set abstraction that iterates consistently, perhaps in insertion order.","category":"page"},{"location":"interface/#place_idset","page":"Interfaces","title":"place_idset","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"Object Synopsis Comment\nAbstractPetriNet place_idset(pnmlnet)) forward to pnml net\nPnmlNet keys(placedict(net)) of PnmlNetData OrderedDict\nPage place_idset(netsets(page)) of PnmlNetKeys Set\nPnmlNetKeys s.place_set ","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"The contents of PnmlKeySet are indices into PnmlNetData. When there is only one page, the keys of the placedict and place_set will be (must be) the same. The order of the two may differ.","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"Do they have the same type? place_dict::OrderedCollections.OrderedDict{Symbol, P} place_set::Set{Symbol}","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"For the foreseeable future, there will be little use of multi-page APIs. It is expected that flattened PNML nets will be the fully supported, tested, thought-through API.","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"PNML.place_idset","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.place_idset)  # hide","category":"page"},{"location":"interface/#transition_idset","page":"Interfaces","title":"transition_idset","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"PNML.transition_idset","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.transition_idset)  # hide","category":"page"},{"location":"interface/#arc_idset","page":"Interfaces","title":"arc_idset","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"PNML.arc_idset","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.arc_idset)  # hide","category":"page"},{"location":"interface/#refplace_idset","page":"Interfaces","title":"refplace_idset","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"PNML.refplace_idset","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.refplace_idset)  # hide","category":"page"},{"location":"interface/#reftransition_idset","page":"Interfaces","title":"reftransition_idset","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"PNML.reftransition_idset","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.reftransition_idset)  # hide","category":"page"},{"location":"interface/#Arc-Related","page":"Interfaces","title":"Arc Related","text":"","category":"section"},{"location":"interface/#all_arcs-source-or-target-is-PNML-ID","page":"Interfaces","title":"all_arcs - source or target is PNML ID","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"PNML.all_arcs","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.all_arcs)  # hide","category":"page"},{"location":"interface/#src_arcs-source-is-PNML-ID","page":"Interfaces","title":"src_arcs - source is PNML ID","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"PNML.src_arcs","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.src_arcs)  # hide","category":"page"},{"location":"interface/#tgt_arcs-target-is-PNML-ID","page":"Interfaces","title":"tgt_arcs - target is PNML ID","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"tgt_arcs","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.tgt_arcs)  # hide","category":"page"},{"location":"interface/#inscription-evaluate-inscription-value-(or-return-default)","page":"Interfaces","title":"inscription - evaluate inscription value (or return default)","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"inscription","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.inscription)  # hide","category":"page"},{"location":"interface/#deref!-dereference-all-references-of-flattened-net","page":"Interfaces","title":"deref! - dereference all references of flattened net","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"deref!","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.deref!)  # hide","category":"page"},{"location":"interface/#deref_place-dereference-one-place","page":"Interfaces","title":"deref_place - dereference one place","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"deref_place","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.deref_place)  # hide","category":"page"},{"location":"interface/#deref_transition-dereference-one-transition","page":"Interfaces","title":"deref_transition - dereference one transition","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"deref_transition","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.deref_transition)  # hide","category":"page"},{"location":"interface/#Place-Related","page":"Interfaces","title":"Place Related","text":"","category":"section"},{"location":"interface/#initial_marking-evaluate-marking-value-(or-return-default)","page":"Interfaces","title":"initial_marking - evaluate marking value (or return default)","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"initial_marking","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.initial_marking)  # hide","category":"page"},{"location":"interface/#initial_markings-return-LVector-of-marking-values-labeled-by-place-id","page":"Interfaces","title":"initial_markings - return LVector of marking values labeled by place id","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"initial_markings","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.initial_markings)  # hide","category":"page"},{"location":"interface/#Transition-Related","page":"Interfaces","title":"Transition Related","text":"","category":"section"},{"location":"interface/#conditions-collect-evaluated-conditions","page":"Interfaces","title":"conditions - collect evaluated conditions","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"conditions","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.conditions)  # hide","category":"page"},{"location":"interface/#condition-evaluate-condition-of-one-transition","page":"Interfaces","title":"condition - evaluate condition of one transition","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"condition","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.condition)  # hide","category":"page"},{"location":"interface/#transition_function-return-LVector-of-in_out-for-all-transitions","page":"Interfaces","title":"transition_function - return LVector of in_out for all transitions","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"transition_function","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.transition_function)  # hide","category":"page"},{"location":"interface/#in_out-tuple-of-ins,-outs-of-one-transition","page":"Interfaces","title":"in_out - tuple of ins, outs of one transition","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"in_out","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.in_out)  # hide","category":"page"},{"location":"interface/#ins-LVector-of-source-arc-evaluated-inscriptions.","page":"Interfaces","title":"ins - LVector of source arc evaluated inscriptions.","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"ins","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.ins)  # hide","category":"page"},{"location":"interface/#outs-LVector-of-target-arc-evaluated-inscriptions.","page":"Interfaces","title":"outs - LVector of target arc evaluated inscriptions.","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"outs","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.outs)  # hide","category":"page"},{"location":"interface/#Labels-Annotation-and-HLAnnotation","page":"Interfaces","title":"Labels - Annotation and HLAnnotation","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"Both have Graphics and ToolInfo. HLAnnotation adds optional <text>, <structure>.","category":"page"},{"location":"interface/#text","page":"Interfaces","title":"text","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"text","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.text) # hide","category":"page"},{"location":"interface/#value","page":"Interfaces","title":"value","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"value","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.value) # hide","category":"page"},{"location":"interface/#has_labels-do-any-exist","page":"Interfaces","title":"has_labels - do any exist","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"has_labels","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.has_labels) # hide","category":"page"},{"location":"interface/#has_label-does-a-specific-label-exist","page":"Interfaces","title":"has_label - does a specific label exist","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"has_label","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.has_label) # hide","category":"page"},{"location":"interface/#get_label-get-a-specific-label","page":"Interfaces","title":"get_label - get a specific label","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"get_label","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.get_label) # hide","category":"page"},{"location":"interface/#ToolInfo","page":"Interfaces","title":"ToolInfo","text":"","category":"section"},{"location":"interface/#has_toolinfo-does-a-specific-toolinfo-exist","page":"Interfaces","title":"has_toolinfo - does a specific toolinfo exist","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"has_toolinfo","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.has_toolinfo) # hide","category":"page"},{"location":"interface/#get_toolinfo-get-a-specific-toolinfo-exist","page":"Interfaces","title":"get_toolinfo - get a specific toolinfo exist","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"get_toolinfo","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.get_toolinfo) # hide","category":"page"},{"location":"interface/#PnmlType-traits","page":"Interfaces","title":"PnmlType traits","text":"","category":"section"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"See PnmlTypeDefs for details of the singleton types used.","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"pnmlnet_type","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.pnmlnet_type) # hide","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"page_type","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.page_type) # hide","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"marking_type","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.marking_type) # hide","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"inscription_type","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.inscription_type) # hide","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"condition_type","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.condition_type) # hide","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"place_type","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.place_type) # hide","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"transition_type","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.transition_type) # hide","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"arc_type","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.arc_type) # hide","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"refplace_type","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.refplace_type) # hide","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"reftransition_type","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"methods(PNML.reftransition_type) # hide","category":"page"},{"location":"interface/","page":"Interfaces","title":"Interfaces","text":"info: parse_type is different\nparse_type is used to parse an XML <type> element. It is not one of these look-up a type trait methods.","category":"page"},{"location":"acknowledgments/#Acknowledgments","page":"Acknowledgments","title":"Acknowledgments","text":"","category":"section"},{"location":"acknowledgments/#MathML.jl","page":"Acknowledgments","title":"MathML.jl","text":"","category":"section"},{"location":"acknowledgments/","page":"Acknowledgments","title":"Acknowledgments","text":"Its function map architecture was adopted and (permute|perverse|use)d in PNML.j.","category":"page"},{"location":"library/","page":"Docstrings","title":"Docstrings","text":"CurrentModule = PNML","category":"page"},{"location":"library/","page":"Docstrings","title":"Docstrings","text":"Pages = [\"library.md\"]\nDepth = 2","category":"page"},{"location":"library/#PNML-Reference","page":"Docstrings","title":"PNML Reference","text":"","category":"section"},{"location":"library/","page":"Docstrings","title":"Docstrings","text":"Modules = [PNML]","category":"page"},{"location":"library/#PNML.PNML","page":"Docstrings","title":"PNML.PNML","text":"Petri Net Markup Language, is an XML-based format. PNML.jl reads a pnml model and emits an intermediate representation (IR).\n\nThe intermediate representation (IR) represents the XML tree via julia data structures: dictionaries, NamedTuples, LabelledArrays, strings, numbers, objects, vectors. The exact mixture changes as the project continues.\n\nThe tags of the XML are used as keys and names as much as possible.\n\nWhat is accepted as values is ~~often~~ a superset of what a given pntd schema specifies. This can be thought of as duck-typing. Conforming to the pntd is not the role of the IR.\n\nThe pnml specification has layers. This package has layers: PnmlNet, AbstractPetriNet\n\nThe core layer is useful and extendable. The standard defines extensions of the core, called meta-models, for\n\nplace-transition petri nets (integers) and\nhigh-level petri net graphs (many-sorted algebra).\n\nThis package family adds non-standard continuous net (float64) support. Note that there is not yet any RelaxNG schema for our extensions.\n\nOn top of the concrete PnmlNet of the IR are net adaptions and interpertations. This is the level that Petri Net conformance can be imposed. It is also where other Net constructs can be defined over PnmlNets. Perhaps as new meta-models.\n\n\n\n\n\n","category":"module"},{"location":"library/#PNML.CONFIG","page":"Docstrings","title":"PNML.CONFIG","text":"See PnmlConfig for default values.\n\n\n\n\n\n","category":"constant"},{"location":"library/#PNML.IDRegistryVec","page":"Docstrings","title":"PNML.IDRegistryVec","text":"Vector of ID registries of the same length as the number of nets. The registries may alias.\n\n\n\n\n\n","category":"constant"},{"location":"library/#PNML.Maybe","page":"Docstrings","title":"PNML.Maybe","text":"Alias for Union{T, Nothing}.\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.TOPDECLDICTIONARY","page":"Docstrings","title":"PNML.TOPDECLDICTIONARY","text":"Per-net dictionary of declaration dictionaries, DeclDict, keyed by net id.\n\n\n\n\n\n","category":"constant"},{"location":"library/#PNML.XDVT","page":"Docstrings","title":"PNML.XDVT","text":"XMLDict values type. Maybe too large for union-splitting.\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.hl_operators","page":"Docstrings","title":"PNML.hl_operators","text":"hl_operators[Symbol] -> Function, Sort\n\nMap PNML operation ID to a tuple of function that accepts a single vector of arguments and the sort of the result. See pnml_hl_operator\n\n\n\n\n\n","category":"constant"},{"location":"library/#PNML.idregistry","page":"Docstrings","title":"PNML.idregistry","text":"ID registry of the current scope. Nets are the usual scope = a net-level-global.\n\n\n\n\n\n","category":"constant"},{"location":"library/#PNML.pnml_ns","page":"Docstrings","title":"PNML.pnml_ns","text":"Namespace expected for pnml XML.\n\n\n\n\n\n","category":"constant"},{"location":"library/#PNML.sort_ids","page":"Docstrings","title":"PNML.sort_ids","text":"Tags used in sort XML elements.\n\n\n\n\n\n","category":"constant"},{"location":"library/#PNML.AbstractDeclaration","page":"Docstrings","title":"PNML.AbstractDeclaration","text":"abstract type AbstractDeclaration\n\nDeclarations define objects/names that are used for high-level terms in conditions, inscriptions, markings. The definitions are attached to PNML nets and/or pages using a PNML Label defined in a <declarations> tag.\n\nid\nname\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.AbstractLabel","page":"Docstrings","title":"PNML.AbstractLabel","text":"abstract type AbstractLabel\n\nLabels are attached to the Petri Net Graph objects. See AbstractPnmlObject.\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.AbstractOperator","page":"Docstrings","title":"PNML.AbstractOperator","text":"abstract type AbstractOperator <: PNML.AbstractTerm\n\nOperators are part of the high-level pnml many-sorted algebra.\n\n...can be a built-in constant or a built-in operator, a multiset operator which among others can construct a multiset from an enumeration of its elements, or a tuple operator. Each operator has a sequence of sorts as its input sorts, and exactly one output sort, which defines its signature.\n\nSee NamedOperator and ArbitraryOperator.\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.AbstractPetriNet","page":"Docstrings","title":"PNML.AbstractPetriNet","text":"abstract type AbstractPetriNet{PNTD<:PnmlType}\n\nTop-level of a single network in a pnml model that is some flavor of Petri Net. Note that pnml can represent nets that are not Petri Nets.\n\nHere is where specialization and restriction are applied to achive Proper Petri Behavior.\n\nSee PnmlModel, PnmlType.\n\nExtended\n\nAdditional constrants can be imposed. We want to run under the motto: \"syntax is not semantics, quack\".\n\nSince a PNML.Document model can contain multiple networks it is possible that a higher-level will create multiple AbstractPetriNet instances, each a different type.\n\nMultiple Pages can (are permitted to) be merged into one page by flatten_pages! without losing any Petri Net semantics.\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.AbstractPnmlNode","page":"Docstrings","title":"PNML.AbstractPnmlNode","text":"abstract type AbstractPnmlNode{PNTD} <: PNML.AbstractPnmlObject\n\nPetri Net Graph nodes are Place, Transition. They are the source or target of an Arc\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.AbstractPnmlObject","page":"Docstrings","title":"PNML.AbstractPnmlObject","text":"abstract type AbstractPnmlObject\n\nObjects of a Petri Net Graph are pages, arcs, nodes.\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.AbstractPnmlTool","page":"Docstrings","title":"PNML.AbstractPnmlTool","text":"abstract type AbstractPnmlTool\n\nTool specific objects can be attached to AbstractPnmlObjects and AbstractLabels subtypes.\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.AbstractSort","page":"Docstrings","title":"PNML.AbstractSort","text":"abstract type AbstractSort\n\nPart of the high-level pnml many-sorted algebra. See  SortType.\n\nNamedSort is an AbstractTerm that declares a definition using an AbstractSort. The pnml specification sometimes uses overlapping language.\n\nFrom the 'primer': built-in sorts of Symmetric Nets are the following: booleans, integerrange, finite enumerations, cyclic enumerations, permutations and dots. And partitions.\n\nThe eltype is expected to be a concrete subtype of Number such as Int, Bool or Float64.\n\nExtras\n\nNotes:\n\nNamedSort is a SortDeclaration. HLPNG adds ArbitrarySort.\nUserSort holds the id symbol of a NamedSort.\nHere 'type' means a 'term' from the many-sorted algebra.\nWe use sorts even for non-high-level nets.\nExpect eltype(::AbstractSort) to return a concrete subtype of Number.\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.AbstractTerm","page":"Docstrings","title":"PNML.AbstractTerm","text":"abstract type AbstractTerm\n\nTerms are part of the multi-sorted algebra that is part of a High-Level Petri Net.\n\nAn abstract type in the pnml XML specification, concrete Terms are variables and operators found within the <structure> element of a label.\n\nNotably, a Term is not a PnmlLabel (or a PNML Label).\n\nReferences\n\nSee also Declaration, SortType, AbstractDeclaration.\n\nTerm_(logic):\n\nA first-order term is recursively constructed from constant symbols, variables and function symbols.\n\nBesides in logic, terms play important roles in universal algebra, and rewriting systems.\n\nmore convenient to think of a term as a tree.\n\nA term that doesn't contain any variables is called a ground term\n\nWhen the domain of discourse contains elements of basically different kinds, it is useful to split the set of all terms accordingly. To this end, a sort (sometimes also called type) is assigned to each variable and each constant symbol, and a declaration...of domain sorts and range sort to each function symbol....\n\nType_theory\n\nterm in logic is recursively defined as a constant symbol, variable, or a function application, where a term is applied to another term\n\nif t is a term of type σ → τ, and s is a term of type σ, then the application of t to s, often written (t s), has type τ.\n\nLambda terms:\n\nThe term redex, short for reducible expression, refers to subterms that can be reduced by one of the reduction rules.\n\nSee Metatheory and SymbolicUtils\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.AbstractVariable","page":"Docstrings","title":"PNML.AbstractVariable","text":"abstract type AbstractVariable <: PNML.AbstractTerm\n\nVariables are part of the high-level pnml many-sorted algebra.\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.Annotation","page":"Docstrings","title":"PNML.Annotation","text":"abstract type Annotation <: PNML.AbstractLabel\n\nLabel that may be displayed. Differs from an Attribute Label by possibly having a Graphics field.\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.AnyElement","page":"Docstrings","title":"PNML.AnyElement","text":"struct AnyElement\n\ntag::Symbol\nelements::Union{SubString{String}, String, OrderedCollections.LittleDict{Union{String, Symbol}, Any, KS, VS} where {KS<:Union{Tuple{Vararg{Union{String, Symbol}}}, AbstractVector{Union{String, Symbol}}}, VS<:Union{Tuple, AbstractVector{Any}}}, Vector{Union{SubString{String}, String, OrderedCollections.LittleDict{Union{String, Symbol}, Any, KS, VS} where {KS<:Union{Tuple{Vararg{Union{String, Symbol}}}, AbstractVector{Union{String, Symbol}}}, VS<:Union{Tuple, AbstractVector{Any}}}}}}\n\nHold well-formed XML. See also ToolInfo and PnmlLabel.\n\nCreates a tree whose nodes are Union{DictType, String, SubString{String}}. #TODO when can there be leaf nodes of String, Substring{String?} See DictType.\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.ArbitraryOperator","page":"Docstrings","title":"PNML.ArbitraryOperator","text":"struct ArbitraryOperator{I<:PNML.AbstractSort} <: PNML.OperatorDeclaration\n\ndeclaration::Symbol\ninput::Vector{PNML.AbstractSort}\noutput::PNML.AbstractSort\n\n...arbitrary sorts and operators do not come with a definition of the sort or operation; they just introduce a new symbol without giving a definition for it.\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.ArbitrarySort","page":"Docstrings","title":"PNML.ArbitrarySort","text":"struct ArbitrarySort <: PNML.SortDeclaration\n\nid::Symbol\nname::Union{SubString{String}, String}\n\nArbitrary sorts that can be used for constructing terms are reserved for/supported by HLPNG in the pnml specification.\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.Arc","page":"Docstrings","title":"PNML.Arc","text":"Edge of a Petri Net Markup Language graph that connects place and transition.\n\nstruct Arc{I<:Union{PNML.HLInscription, PNML.Inscription}} <: PNML.AbstractPnmlObject\n\nid::Symbol\nsource::Base.RefValue{Symbol}\ntarget::Base.RefValue{Symbol}\ninscription::Union{PNML.HLInscription, PNML.Inscription}\nnamelabel::Union{Nothing, PNML.Name}\ngraphics::Union{Nothing, PNML.Graphics}\ntools::Union{Nothing, Vector{PNML.ToolInfo}}\nlabels::Union{Nothing, Vector{PNML.PnmlLabel}}\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.BoolSort","page":"Docstrings","title":"PNML.BoolSort","text":"Built-in sort whose eltype is Bool\n\nOperators: and, or, not, imply\n\nFunctions: equality, inequality\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.BooleanConstant","page":"Docstrings","title":"PNML.BooleanConstant","text":"\n\n\n\n","category":"type"},{"location":"library/#PNML.Condition","page":"Docstrings","title":"PNML.Condition","text":"struct Condition <: PNML.Annotation\n\ntext::Union{Nothing, String}\nvalue::PNML.AbstractTerm\ngraphics::Union{Nothing, PNML.Graphics}\ntools::Union{Nothing, Vector{PNML.ToolInfo}}\n\nLabel of a Transition that determines when the transition fires.\n\nExamples\n\njulia> c = Condition(false)\nCondition(\"\", false)\n\njulia> c()\nfalse\n\njulia> c = Condition(\"xx\", false)\nCondition(\"xx\", false)\n\njulia> c()\nfalse\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.Coordinate","page":"Docstrings","title":"PNML.Coordinate","text":"struct Coordinate{T<:Float32}\n\nx::Float32\ny::Float32\n\nCartesian Coordinate are actually positive decimals. Ranges from 0 to 999.9.\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.Coordinate-Union{Tuple{T2}, Tuple{T1}, Tuple{T1, T2}} where {T1<:Number, T2<:Number}","page":"Docstrings","title":"PNML.Coordinate","text":"Construct a Coordinate from mixed Int, Float64.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.CyclicEnumerationSort","page":"Docstrings","title":"PNML.CyclicEnumerationSort","text":"struct CyclicEnumerationSort{T<:(Tuple{Vararg{var\"#s7\", var\"#s8\"}} where {var\"#s8\", var\"#s7\"<:Symbol}), M} <: PNML.EnumerationSort\n\nWraps tuple of IDREFs into feconstant(decldict). Operations differ between EnumerationSorts. All wrap a tuple of symbols. metadata, allowing attachment of Partition/PartitionElement and id trail\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.DeclDict","page":"Docstrings","title":"PNML.DeclDict","text":"DeclDict\n\nCollection of Declaration dictionaries.\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.Declaration","page":"Docstrings","title":"PNML.Declaration","text":"struct Declaration <: PNML.Annotation\n\ntext::Union{Nothing, String}\nddict::PNML.DeclDict\ngraphics::Union{Nothing, PNML.Graphics}\ntools::Union{Nothing, Vector{PNML.ToolInfo}}\n\nLabel of a <net> or <page> that holds zero or more declarations. The declarations are used to define parts of the many-sorted algebra used by High-Level Petri Nets.\n\nAll the declarations in the <structure> are placed into a single per-net dictonary. The text, graphics, and tools fields are expected to be nothing, but are present because, being labels, it is allowed.\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.DictType","page":"Docstrings","title":"PNML.DictType","text":"Dictionary filled by XMLDict\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.DotSort","page":"Docstrings","title":"PNML.DotSort","text":"Built-in sort whose eltype is Int\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.EnumerationSort","page":"Docstrings","title":"PNML.EnumerationSort","text":"abstract type EnumerationSort <: PNML.AbstractSort\n\nSee FiniteEnumerationSort, CyclicEnumerationSort. Both hold an ordered collection of FEConstant accessable through the elements iterator.\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.FEConstant","page":"Docstrings","title":"PNML.FEConstant","text":"FEConstant\n\nFinite enumeration constant. In some cases the partition element cannot be derived from the subterms of PartitionElementOf operator.\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.Fill","page":"Docstrings","title":"PNML.Fill","text":"Fill attributes as strings.\n\nstruct Fill\n\ncolor::String\nimage::String\ngradient_color::String\ngradient_rotation::String\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.FiniteEnumerationSort","page":"Docstrings","title":"PNML.FiniteEnumerationSort","text":"struct FiniteEnumerationSort{T<:(Tuple{Vararg{var\"#s7\", var\"#s8\"}} where {var\"#s8\", var\"#s7\"<:Symbol}), M} <: PNML.EnumerationSort\n\nWraps tuple of IDREFs into feconstant(decldict).\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.FiniteIntRangeConstant","page":"Docstrings","title":"PNML.FiniteIntRangeConstant","text":"Must refer to a value between the start and end of the respective FiniteIntRangeSort.\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.FiniteIntRangeSort","page":"Docstrings","title":"PNML.FiniteIntRangeSort","text":"FiniteIntRangeSort(start::T, stop::T; ids::Tuple) where {T<:Integer} -> Range\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.Font","page":"Docstrings","title":"PNML.Font","text":"Font attributes as strings.\n\nstruct Font\n\nfamily::String\nstyle::String\nweight::String\nsize::String\nalign::String\nrotation::String\ndecoration::String\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.Graphics","page":"Docstrings","title":"PNML.Graphics","text":"PNML Graphics can be attached to many parts of PNML models.\n\nstruct Graphics{T<:Float32}\n\ndimension::PNML.Coordinate\nfill::PNML.Fill\nfont::PNML.Font\nline::PNML.Line\noffset::PNML.Coordinate\npositions::Array{PNML.Coordinate{T}, 1} where T<:Float32\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.HLAnnotation","page":"Docstrings","title":"PNML.HLAnnotation","text":"abstract type HLAnnotation <: PNML.AbstractLabel\n\nAnnotation label that uses <text> and <structure>.\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.HLInscription","page":"Docstrings","title":"PNML.HLInscription","text":"struct HLInscription{T<:(PNML.PnmlMultiset)} <: PNML.HLAnnotation\n\ntext::Union{Nothing, String}\nterm::PNML.PnmlMultiset\ngraphics::Union{Nothing, PNML.Graphics}\ntools::Union{Nothing, Vector{PNML.ToolInfo}}\n\nLabels an Arc. The <structure> element is a term in a many-sorted algebra. The term field TBD. See also Inscription\n\nExamples\n\n#! CHANGE TO PnmlMultiset\n\n```jldoctest; setup=:(using PNML; using PNML: HLInscription, NumberConstant, NaturalSort)\n\njulia> i2 = HLInscription(NumberConstant(3, NaturalSort()))\n\nHLInscription(\"\", NumberConstant{Int64, NaturalSort}(3, NaturalSort()))\n\njulia> i2()\n\n3\n\njulia> i3 = HLInscription(\"text\", NumberConstant(1, NaturalSort()))\n\nHLInscription(\"text\", NumberConstant{Int64, NaturalSort}(1, NaturalSort()))\n\njulia> i3()\n\n1\n\njulia> i4 = HLInscription(\"text\", NumberConstant(3, NaturalSort()))\n\nHLInscription(\"text\", NumberConstant{Int64, NaturalSort}(3, NaturalSort()))\n\njulia> i4()\n\n3\n\n```\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.HLInscription-Tuple{}","page":"Docstrings","title":"PNML.HLInscription","text":"Evaluate a HLInscription. Returns a value of the eltype of sort of inscription.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.HLLabel","page":"Docstrings","title":"PNML.HLLabel","text":"struct HLLabel{PNTD} <: PNML.Annotation\n\ntext::Union{Nothing, String}\nstructure::Union{Nothing, PNML.AnyElement}\ngraphics::Union{Nothing, PNML.Graphics}\ntools::Union{Nothing, Vector{PNML.ToolInfo}}\n\nHigh-level pnml labels are expected to have <text> and <structure> elements. This concrete type is for \"unclaimed\" labels in a high-level petri net.\n\nSome \"claimed\" HLAnnotation labels are Condition, Declaration, HLMarking, HLInscription.\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.HLMarking","page":"Docstrings","title":"PNML.HLMarking","text":"struct HLMarking <: PNML.HLAnnotation\n\ntext::Union{Nothing, String}\nterm::PNML.AbstractTerm\ngraphics::Union{Nothing, PNML.Graphics}\ntools::Union{Nothing, Vector{PNML.ToolInfo}}\nids::Tuple\n\nMultiset of a sort labeling of a Place in a High-level Petri Net Graph. See AbstractHLCore, AbstractTerm, Marking.\n\nIs a functor that returns the evaluated value.\n\n... is a term with some multiset sort denoting a collection of tokens on the corresponding place, which defines its initial marking.\n\nNB: The place's sorttype is not a multiset\n\na ground term of the corresponding multiset sort. (does not contain variables)\n\nFor every sort, the multiset sort over this basis sort is interpreted as the set of multisets over the type associated with the basis sort.\n\nMultiset literals ... are defined using Add and NumberOf (multiset operators).\n\nExamples\n\njulia> m = HLMarking(\"the text\", NumberConstant(3, NaturalSort()))\nHLMarking(\"the text\", NumberConstant{Int64, NaturalSort}(3, NaturalSort()))\n\njulia> m()\n3\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.HLMarking-Tuple{}","page":"Docstrings","title":"PNML.HLMarking","text":"Evaluate a HLMarking instance by returning its term.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.HLPetriNet","page":"Docstrings","title":"PNML.HLPetriNet","text":"Wrap a single pnml net. Presumes that the net does not need to be flattened as all content is in first page.\n\nstruct HLPetriNet{PNTD} <: PNML.AbstractPetriNet{PNTD}\n\nnet::PNML.PnmlNet{PNTD} where PNTD\n\nDetails\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.HLPetriNet-Tuple{AbstractString}","page":"Docstrings","title":"PNML.HLPetriNet","text":"Construct from string of valid pnml XML, using the first network in model.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.Inscription","page":"Docstrings","title":"PNML.Inscription","text":"struct Inscription{T<:Number} <: PNML.Annotation\n\nvalue::Number\ngraphics::Union{Nothing, PNML.Graphics}\ntools::Union{Nothing, Vector{PNML.ToolInfo}}\n\nLabels an Arc. See also HLInscription.\n\nExamples\n\njulia> i = Inscription(3)\nInscription(3)\n\njulia> i()\n3\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.Inscription-Tuple{}","page":"Docstrings","title":"PNML.Inscription","text":"Evaluate an Inscription's value.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.IntegerSort","page":"Docstrings","title":"PNML.IntegerSort","text":"Built-in sort whose eltype is Int\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.Line","page":"Docstrings","title":"PNML.Line","text":"Line attributes as strings.\n\nstruct Line\n\ncolor::String\nshape::String\nstyle::String\nwidth::String\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.ListSort","page":"Docstrings","title":"PNML.ListSort","text":"struct ListSort <: PNML.AbstractSort\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.MalformedException","page":"Docstrings","title":"PNML.MalformedException","text":"struct MalformedException <: PnmlException\n\nmsg::String\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.Marking","page":"Docstrings","title":"PNML.Marking","text":"struct Marking{N<:Number} <: PNML.Annotation\n\nvalue::Number\ngraphics::Union{Nothing, PNML.Graphics}\ntools::Union{Nothing, Vector{PNML.ToolInfo}}\nids::Tuple\n\nNumber-valued label of Place. See PTNet, ContinuousNet, HLMarking.\n\nIs a functor that returns the value.\n\nExamples\n\njulia> m = Marking(1)\nMarking(1)\n\njulia> m()\n1\n\njulia> m = Marking(12.34)\nMarking(12.34)\n\njulia> m()\n12.34\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.Marking-Tuple{}","page":"Docstrings","title":"PNML.Marking","text":"Evaluate Marking instance by returning its evaluated value.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.MissingIDException","page":"Docstrings","title":"PNML.MissingIDException","text":"struct MissingIDException <: PnmlException\n\nmsg::String\n\nUse exception to allow dispatch and additional data presentation to user.\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.MultisetSort","page":"Docstrings","title":"PNML.MultisetSort","text":"struct MultisetSort{T<:PNML.AbstractSort} <: PNML.AbstractSort\n\nWrap a Sort. Warning: do not cause recursive multiset Sorts.\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.Name","page":"Docstrings","title":"PNML.Name","text":"struct Name <: PNML.Annotation\n\ntext::String\ngraphics::Union{Nothing, PNML.Graphics}\ntools::Union{Nothing, Vector{PNML.ToolInfo}}\n\nName is for display, possibly in a tool specific way.\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.NamedOperator","page":"Docstrings","title":"PNML.NamedOperator","text":"struct NamedOperator{T<:PNML.AbstractTerm} <: PNML.OperatorDeclaration\n\nid::Symbol\nname::Union{SubString{String}, String}\nparameter::Vector{PNML.VariableDeclaration}\ndef::PNML.AbstractTerm\nids::Tuple\n\nSee UserOperator\n\nVector of VariableDeclaration for parameters (ordered), and AbstractTerm for its body definition.\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.NamedSort","page":"Docstrings","title":"PNML.NamedSort","text":"struct NamedSort{S<:PNML.AbstractSort} <: PNML.SortDeclaration\n\nid::Symbol\nname::Union{SubString{String}, String}\ndef::PNML.AbstractSort\nids::Tuple\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.NaturalSort","page":"Docstrings","title":"PNML.NaturalSort","text":"Built-in sort whose eltype is Int\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.NullSort","page":"Docstrings","title":"PNML.NullSort","text":"Built-in sort whose eltype is Nothing\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.NumberConstant","page":"Docstrings","title":"PNML.NumberConstant","text":"Builtin operator that has arity=0 means the same result every time, a constant. Restricted to NumberSorts, those Sorts whose eltype isa Number.\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.Operator","page":"Docstrings","title":"PNML.Operator","text":"Operator as Functor\n\ntag maps to func, a functor/function Callable. Its arity is same as length of inexprs and insorts\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.OperatorDeclaration","page":"Docstrings","title":"PNML.OperatorDeclaration","text":"abstract type OperatorDeclaration <: PNML.AbstractDeclaration\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.Page","page":"Docstrings","title":"PNML.Page","text":"mutable struct Page{PNTD<:PnmlType, P, T, A, RP, RT} <: PNML.AbstractPnmlObject\n\npntd::PnmlType\nid::Symbol\ndeclaration::PNML.Declaration\nnamelabel::Union{Nothing, PNML.Name}\ngraphics::Union{Nothing, PNML.Graphics}\ntools::Union{Nothing, Vector{PNML.ToolInfo}}\nlabels::Union{Nothing, Vector{PNML.PnmlLabel}}\npagedict::OrderedCollections.OrderedDict{Symbol, PNML.Page{PNTD, P, T, A, RP, RT}} where {PNTD<:PnmlType, P, T, A, RP, RT}\nnetdata::PNML.PnmlNetData\nnetsets::PNML.PnmlNetKeys\n\nContain all places, transitions & arcs. Pages are for visual presentation. There must be at least 1 Page for a valid pnml model.\n\nPNTD binds the other type parameters together to express a specific PNG. See PnmlNet\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.ParseInscriptionTerm","page":"Docstrings","title":"PNML.ParseInscriptionTerm","text":"ParseInscriptionTerm(placetype) -> Functor\n\nHolds parameters for parsing inscription. The sort of the inscription must match the place sorttype. Input arcs (source is a transition) and output arcs (source is a place) called as (pit::ParseInscriptionTerm)(::XMLNode, ::PnmlType; ids::Tuple)\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.ParseMarkingTerm","page":"Docstrings","title":"PNML.ParseMarkingTerm","text":"ParseMarkingTerm(placetype) -> Functor\n\nHolds parameters for parsing when called as (f::T)(::XMLNode, ::PnmlType; ids::Tuple)\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.PartitionElement","page":"Docstrings","title":"PNML.PartitionElement","text":"struct PartitionElement{T<:PNML.AbstractTerm} <: PNML.OperatorDeclaration\n\nid::Symbol\nname::Union{SubString{String}, String}\nterms::Vector{T} where T<:PNML.AbstractTerm\nids::Tuple\n\nEstablishes an equivalence class over a PartitionSort's emumeration. See also FiniteEnumerationSort. Gives a name to an element of a partition. The element is an equivalence class. PartitionElement is different from FiniteEnumeration, CyclicEnumeration, FiniteIntRangeSort in that it holds UserOperators, not FEConstants. The UserOperator refers to the FEConstants of the sort over which the partition is defined. NB: The PartitionElementOf operator maps each element of the type (aka sort) associated with the partition to the partition element to which it belongs.\n\nWant: PartitionElementOf(feconstant) -> id of the equivalence class\n\n#TODO Somehow PartitionElementOf will need to make the connection.\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.PartitionSort","page":"Docstrings","title":"PNML.PartitionSort","text":"struct PartitionSort{S<:PNML.AbstractSort, PE<:PNML.PartitionElement} <: PNML.SortDeclaration\n\nid::Symbol\nname::Union{SubString{String}, String}\ndef::PNML.AbstractSort\nelement::Vector{PE} where PE<:PNML.PartitionElement\nids::Tuple\n\nPartition sort declaration is a finite enumeration that is partitioned into sub-ranges of enumerations. Is the sort at the partition or the element level (1 sort ot many sorts?)\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.Place","page":"Docstrings","title":"PNML.Place","text":"struct Place{PNTD, M} <: PNML.AbstractPnmlNode{PNTD}\n\npntd::Any\nid::Symbol\ninitialMarking::Any\nsorttype::PNML.SortType\nnamelabel::Union{Nothing, PNML.Name}\ngraphics::Union{Nothing, PNML.Graphics}\ntools::Union{Nothing, Vector{PNML.ToolInfo}}\nlabels::Union{Nothing, Vector{PNML.PnmlLabel}}\n\nPlace node of a Petri Net Markup Language graph.\n\nEach place has an initial marking that determines the sorttype\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.PnmlConfig","page":"Docstrings","title":"PNML.PnmlConfig","text":"Configuration with default values that can be overidden by a LocalPreferences.toml.\n\nOptions\n\nindent_width::Int: Indention of nested lines.\nlock_registry::Bool: Lock registry with a ReentrantLock.\ntext_element_optional::Bool: There are pnml files that break the rules & do not have <text> elements.\nwarn_on_fixup::Bool: When an missing value is replaced by a default value, issue a warning.\nwarn_on_namespace::Bool: There are pnml files that break the rules & do not have an xml namespace.\nwarn_on_unclaimed::Bool: Issue warning when PNML label does not have a parser defined. While allowed, there will be code required to do anything useful with the label.\nwarn_on_unimplemented::Bool: Issue warning to highlight something unimplemented. Expect high volume of messages.\nverbose::Bool: Print information as runs.\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.PnmlException","page":"Docstrings","title":"PNML.PnmlException","text":"abstract type PnmlException <: Exception\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.PnmlLabel","page":"Docstrings","title":"PNML.PnmlLabel","text":"struct PnmlLabel <: PNML.Annotation\n\ntag::Symbol\nelements::Union{SubString{String}, String, OrderedCollections.LittleDict{Union{String, Symbol}, Any, KS, VS} where {KS<:Union{Tuple{Vararg{Union{String, Symbol}}}, AbstractVector{Union{String, Symbol}}}, VS<:Union{Tuple, AbstractVector{Any}}}, Vector{Union{SubString{String}, String, OrderedCollections.LittleDict{Union{String, Symbol}, Any, KS, VS} where {KS<:Union{Tuple{Vararg{Union{String, Symbol}}}, AbstractVector{Union{String, Symbol}}}, VS<:Union{Tuple, AbstractVector{Any}}}}}}\n\nWrap an AbstractDict holding a PNML Label as parsed by XMLDict. Use the XML tag as identifier.\n\nUsed for \"unclaimed\" labels that do not have, or we choose not to use, a dedicated parse method. Claimed labels will have a type/parser defined to make use of the structure defined by the pntd schema.\n\nSee also AnyElement. The difference is that AnyElement allows any well-formed XML, while PnmlLabel is restricted to PNML Labels (with extensions in PNML.jl).\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.PnmlModel","page":"Docstrings","title":"PNML.PnmlModel","text":"mutable struct PnmlModel\n\nnets::Tuple{Vararg{PNML.PnmlNet}}\nnamespace::String\nregs::Vector{PnmlIDRegistry}\n\nOne or more Petri Nets and an ID Registries.\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.PnmlMultiset","page":"Docstrings","title":"PNML.PnmlMultiset","text":"pnmlmultiset(x::T, basis::AbstractSort, multi::Integer=1; ids::Tuple) -> PnmlMultiset{T,S}\n\nConstruct as a multiset with one element, x, with default multiplicity of 1.\n\nPnmlMultiset wraps a Multisets.Multiset{T} and basis sort S.\n\nSome Operatorsand [Variables`](@ref) create/use a multiset. Thre are constants defined that must be multisets since HL markings are multisets.\n\nmulti`x\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.PnmlNet","page":"Docstrings","title":"PNML.PnmlNet","text":"mutable struct PnmlNet{PNTD<:PnmlType, P, T, A, RP, RT}\n\ntype::PnmlType\nid::Symbol\npagedict::OrderedCollections.OrderedDict{Symbol, PNML.Page{PNTD, P, T, A, RP, RT}} where {PNTD<:PnmlType, P, T, A, RP, RT}\nnetdata::PNML.PnmlNetData\npage_set::Set{Symbol}\ndeclaration::PNML.Declaration\nnamelabel::Union{Nothing, PNML.Name}\ntools::Union{Nothing, Vector{PNML.ToolInfo}}\nlabels::Union{Nothing, Vector{PNML.PnmlLabel}}\n\nOne Petri Net of a PNML model.\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.PnmlNetData","page":"Docstrings","title":"PNML.PnmlNetData","text":"struct PnmlNetData{PNTD<:PnmlType}\n\npntd::PnmlType\nplace_dict::OrderedCollections.OrderedDict{Symbol, Any}\ntransition_dict::OrderedCollections.OrderedDict{Symbol, Any}\narc_dict::OrderedCollections.OrderedDict{Symbol, Any}\nrefplace_dict::OrderedCollections.OrderedDict{Symbol, Any}\nreftransition_dict::OrderedCollections.OrderedDict{Symbol, Any}\n\nCollect each of the PnmlNodess & Arcs of a Petri Net Graph into one collection. Accessed via pnml ID key or iterate over values of an OrderedDict.\n\nIn the 'pnml' specification there is a Page structure that can be removed by flatten_pages!, removing some display-related information, leaving a functional Petri Net Graph as described in this structure. It is intended to be a per-PnmlNet database that is mutated as each page is parsed.\n\nSee PnmlNetKeys for page-level pnml ID of \"owners\" net data.\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.PnmlNetKeys","page":"Docstrings","title":"PNML.PnmlNetKeys","text":"struct PnmlNetKeys\n\npage_set::Set{Symbol}\nplace_set::Set{Symbol}\ntransition_set::Set{Symbol}\narc_set::Set{Symbol}\nreftransition_set::Set{Symbol}\nrefplace_set::Set{Symbol}\n\nPer-page structure of Sets of pnml IDs for each \"owned\" Page and other AbstractPnmlObject.\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.PnmlTuple","page":"Docstrings","title":"PNML.PnmlTuple","text":"The <tuple> operator is used to wrap an ordered sequence of AbstractTerm instances.\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.PositiveSort","page":"Docstrings","title":"PNML.PositiveSort","text":"Built-in sort whose eltype is Int\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.ProductSort","page":"Docstrings","title":"PNML.ProductSort","text":"struct ProductSort <: PNML.AbstractSort\n\nAn ordered collection of sorts.\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.RealSort","page":"Docstrings","title":"PNML.RealSort","text":"Built-in sort whose eltype is Float64\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.RefPlace","page":"Docstrings","title":"PNML.RefPlace","text":"Reference Place node of a Petri Net Markup Language graph. For connections between pages.\n\nstruct RefPlace <: PNML.ReferenceNode\n\nid::Symbol\nref::Symbol\nnamelabel::Union{Nothing, PNML.Name}\ngraphics::Union{Nothing, PNML.Graphics}\ntools::Union{Nothing, Vector{PNML.ToolInfo}}\nlabels::Union{Nothing, Vector{PNML.PnmlLabel}}\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.RefTransition","page":"Docstrings","title":"PNML.RefTransition","text":"Refrence Transition node of a Petri Net Markup Language graph. For connections between pages.\n\nstruct RefTransition <: PNML.ReferenceNode\n\nid::Symbol\nref::Symbol\nnamelabel::Union{Nothing, PNML.Name}\ngraphics::Union{Nothing, PNML.Graphics}\ntools::Union{Nothing, Vector{PNML.ToolInfo}}\nlabels::Union{Nothing, Vector{PNML.PnmlLabel}}\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.ReferenceNode","page":"Docstrings","title":"PNML.ReferenceNode","text":"abstract type ReferenceNode <: PNML.AbstractPnmlObject\n\nFor common behavior shared by RefPlace, RefTransition used to connect Page together.\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.SimpleNet","page":"Docstrings","title":"PNML.SimpleNet","text":"struct SimpleNet{PNTD} <: PNML.AbstractPetriNet{PNTD}\n\nid::Symbol\nnet::PNML.PnmlNet{PNTD} where PNTD\n\nTODO: Rename SimpleNet to TBD\n\nSimpleNet is a concrete AbstractPetriNet wrapping a single PnmlNet.\n\nUses a flattened net to avoid the page level of the pnml hierarchy.\n\nNote: A multi-page petri net can always be flattened by removing referenceTransitions & referencePlaces, and merging pages into the first page.\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.SortDeclaration","page":"Docstrings","title":"PNML.SortDeclaration","text":"abstract type SortDeclaration <: PNML.AbstractDeclaration\n\nSee NamedSort and [ArbitrarySort] as concrete subtypes.\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.SortType","page":"Docstrings","title":"PNML.SortType","text":"struct SortType <: PNML.Annotation\n\ntext::Union{Nothing, String}\nsort_::Union{PNML.TupleSort, PNML.UserSort}\ngraphics::Union{Nothing, PNML.Graphics}\ntools::Union{Nothing, Vector{PNML.ToolInfo}}\n\nA places's <type> label wraps a concrete subtype of AbstractSort that defines the sort of a place, hence use of sorttype. It is the type concept of the many-sorted algebra.\n\nFor high-level nets there will be a rich language of sorts using UserSort & NamedSort defined in the xml input.\n\nFor other PnmlNet's they are used internally to allow common implementations.\n\ndefines the type by referring to some sort; by the fixed interpretation of built-in sorts,\n\nthis sort defines the type of the place.\n\nBy the fixed interpretation of sorts, this implicitly refers to a set, which is the type of that place.\n\n\"refers to set\" excludes multiset (as stated elsewhere in specification)\n\nthis is a sort, not a term, so no variables or operators.\n\nThe initial marking function M0 is defined by the label HLMarking of the places. ... this is a ground term of the corresponding multiset sort.\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.StringSort","page":"Docstrings","title":"PNML.StringSort","text":"struct StringSort <: PNML.AbstractSort\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.Structure","page":"Docstrings","title":"PNML.Structure","text":"struct Structure\n\ntag::Symbol\nel::Union{SubString{String}, String, OrderedCollections.LittleDict{Union{String, Symbol}, Any, KS, VS} where {KS<:Union{Tuple{Vararg{Union{String, Symbol}}}, AbstractVector{Union{String, Symbol}}}, VS<:Union{Tuple, AbstractVector{Any}}}, Vector{Union{SubString{String}, String, OrderedCollections.LittleDict{Union{String, Symbol}, Any, KS, VS} where {KS<:Union{Tuple{Vararg{Union{String, Symbol}}}, AbstractVector{Union{String, Symbol}}}, VS<:Union{Tuple, AbstractVector{Any}}}}}}\n\nHigh-level Annotation Labels place meaning in <structure> that is consumed by \"claimed\" labels. Is is expected to contain an abstract syntax tree (ast) for the many-sorted algebra expressed in XML. We implement this to allow use of <structure> tags by other PnmlTypes.\n\nExtra\n\nThere are various defined structure ast variants in pnml:\n\nSort Type of a Place [builtin, multi, product, user]\nPlace HLMarking [variable, operator]\nTransition Condition [variable, operator]\nArc Inscription [variable, operator]\nDeclarations [sort, variable, operator]\n\nThese should all have dedicated parsers and objects as claimed labels. Here we provide a fallback for unclaimed tags.\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.TokenGraphics","page":"Docstrings","title":"PNML.TokenGraphics","text":"struct TokenGraphics{T<:Float32} <: PNML.AbstractPnmlTool\n\npositions::Array{PNML.Coordinate{T}, 1} where T<:Float32\n\nTokenGraphics is <toolspecific> content. Combines the <tokengraphics> and <tokenposition> elements.\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.ToolInfo","page":"Docstrings","title":"PNML.ToolInfo","text":"struct ToolInfo\n\ntoolname::String\nversion::String\ninfos::Vector{PNML.AnyElement}\n\nToolInfo holds a <toolspecific> tag.\n\nIt wraps a iteratable collection (currently vector) of well formed elements parsed into AnyElements for use by anything that understands toolname, version tool specifics.\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.Transition","page":"Docstrings","title":"PNML.Transition","text":"Transition node of a Petri Net Markup Language graph.\n\nstruct Transition{PNTD, C} <: PNML.AbstractPnmlNode{PNTD}\n\npntd::Any\nid::Symbol\ncondition::Any\nnamelabel::Union{Nothing, PNML.Name}\ngraphics::Union{Nothing, PNML.Graphics}\ntools::Union{Nothing, Vector{PNML.ToolInfo}}\nlabels::Union{Nothing, Vector{PNML.PnmlLabel}}\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.TransitionRate","page":"Docstrings","title":"PNML.TransitionRate","text":"struct TransitionRate{T<:Number} <: PNML.Annotation\n\nvalue::Number\n\nWrap value of rate label of a Transition.\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.TupleSort","page":"Docstrings","title":"PNML.TupleSort","text":"TupleSort holds tuple of sorts. One for each of the elements of the <tuple>.\n\nPnmlTuples have a similarity to NamedTuples with Sorts taking the place of names. Will not achieve the same transparancy and efficency as NamedTuples.\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.UnknownDeclaration","page":"Docstrings","title":"PNML.UnknownDeclaration","text":"struct UnknownDeclaration <: PNML.AbstractDeclaration\n\nid::Symbol\nname::Union{SubString{String}, String}\nnodename::Union{SubString{String}, String}\ncontent::Vector{PNML.AnyElement}\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.UserOperator","page":"Docstrings","title":"PNML.UserOperator","text":"struct UserOperator <: PNML.AbstractOperator\n\ndeclaration::Symbol\nids::Tuple\n\nUser operators refers to a NamedOperator declaration.\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.UserSort","page":"Docstrings","title":"PNML.UserSort","text":"struct UserSort <: PNML.AbstractSort\n\nHolds a reference id to a concrete subtype of SortDeclaration.\n\nNamedSort is used to construct a sort out of builtin types. Used in a Places sort type property.\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.Variable","page":"Docstrings","title":"PNML.Variable","text":"struct Variable <: PNML.AbstractVariable\n\nrefvariable::Symbol\nids::Tuple\n\nVariable refers to a VariableDeclaration. Example input: <variable refvariable=\"varx\"/>.\n\n#TODO examples of use, modifying and accessing\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.VariableDeclaration","page":"Docstrings","title":"PNML.VariableDeclaration","text":"struct VariableDeclaration{S<:PNML.AbstractSort} <: PNML.AbstractDeclaration\n\nid::Symbol\nname::Union{SubString{String}, String}\nsort::PNML.AbstractSort\n\nDeclDict variabledecls[id] = tuple(VariableDeclaration(id, \"human name\", sort), instanceofsort)\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.XMLNode","page":"Docstrings","title":"PNML.XMLNode","text":"Alias for EzXML.Node\n\n\n\n\n\n","category":"type"},{"location":"library/#Base.length-Tuple{PNML.EnumerationSort}","page":"Docstrings","title":"Base.length","text":"Return number of FEConstants contained by this sort.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML._attribute-Tuple{OrderedCollections.LittleDict{Union{String, Symbol}, Any, KS, VS} where {KS<:Union{Tuple{Vararg{Union{String, Symbol}}}, AbstractVector{Union{String, Symbol}}}, VS<:Union{Tuple, AbstractVector{Any}}}, Symbol}","page":"Docstrings","title":"PNML._attribute","text":"Find an XML attribute. XMLDict uses symbols as keys.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML._evaluate","page":"Docstrings","title":"PNML._evaluate","text":"_evaluate(x::Number) -> identity(x)\n_evaluate(x::Base.Callable) -> (x)()\n\nReturn the value of \"x\", defaults to identity.\n\nExamples\n\nSince High-level PNML schemas are based on zero, Natural numbers and booleans, it seems reasonable to assume Number, which includes Bool, for the non-callable type. Especially as it allows negative numbers and reals. A zero-argument functor is expected as the callable type, allowing expressions in the many-sorted algebra to be evaluated to a Number.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML._get_op_dict-Tuple{PNML.DeclDict, Symbol}","page":"Docstrings","title":"PNML._get_op_dict","text":"Return operator dictionary containing key id.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML._match","page":"Docstrings","title":"PNML._match","text":"_match(ti::ToolInfo, name::AbstractString) -> Bool\n_match(ti::ToolInfo, name::String, version::String) -> Bool\n_match(ti::ToolInfo, namerex::Regex, versionrex::Regex) -> Bool\n\nReturn true if both toolname and version match. Default is any version.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML._parse_page!-Union{Tuple{T}, Tuple{Any, Any, EzXML.Node, T}} where T<:PnmlType","page":"Docstrings","title":"PNML._parse_page!","text":"parse_page!(pagedict, netdata, node, pntd; ids) -> Page\n\nPlace Page in pagedict using id as the key.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.add_toolinfo!-Tuple{Vector{PNML.ToolInfo}, Any, Any}","page":"Docstrings","title":"PNML.add_toolinfo!","text":"add_toolinfo!(\n    infos::Vector{PNML.ToolInfo},\n    node,\n    pntd\n) -> Vector{PNML.ToolInfo}\n\n\nAdd ToolInfo to infos, return nothing.\n\nThe UML from the pnml primer (and schemas) use <toolspecific> as the tag name for instances of the type ToolInfo.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.all_arcs","page":"Docstrings","title":"PNML.all_arcs","text":"Return arcs that have a source or target of transition id.\n\nSee also src_arcs, tgt_arcs.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.allchildren-Tuple{EzXML.Node, AbstractString}","page":"Docstrings","title":"PNML.allchildren","text":"allchildren(\n    node::EzXML.Node,\n    tag::AbstractString;\n    namespace\n) -> Vector{EzXML.Node}\n\n\nReturn vector of el's immediate children with tag.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.alldecendents-Tuple{EzXML.Node, AbstractString}","page":"Docstrings","title":"PNML.alldecendents","text":"alldecendents(\n    node::EzXML.Node,\n    tag::AbstractString;\n    namespace\n) -> Vector{EzXML.Node}\n\n\nReturn vector of node's immediate children and decendents with tag.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.allpages-Tuple{PNML.PnmlNet}","page":"Docstrings","title":"PNML.allpages","text":"allpages(net::PnmlNet|dict::OrderedDict) -> Iterator\n\nReturn iterator over all pages in the net. Maintains insertion order.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.anyelement-Tuple{EzXML.Node, PnmlType}","page":"Docstrings","title":"PNML.anyelement","text":"anyelement(\n    node::EzXML.Node,\n    pntd::PnmlType\n) -> PNML.AnyElement\n\n\nReturn AnyElement holding a well-formed XML node. See ToolInfo for one intended use-case.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.append_page!-Tuple{PNML.Page, PNML.Page}","page":"Docstrings","title":"PNML.append_page!","text":"Append selected fields of r to fields of l. Some, like Names and xml, are omitted because they are scalar values, not collections.\n\npagedict & netdata (holding the arc and pnml nodes) are per-net data that is not modified here. netsets hold pnml IDs \"owned\"\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.arc","page":"Docstrings","title":"PNML.arc","text":"Return arc with id if found, otherwise nothing.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.arc-Tuple{Any, Symbol, Symbol}","page":"Docstrings","title":"PNML.arc","text":"Return Arc from 's' to 't' or nothing. Useful for graphs where arcs are represented by a tuple(source,target).\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.arc_idset","page":"Docstrings","title":"PNML.arc_idset","text":"Return iterator over arc ids.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.arc_type","page":"Docstrings","title":"PNML.arc_type","text":"Type of Arc.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.arcs","page":"Docstrings","title":"PNML.arcs","text":"arcs(n::PnmlNet) -> iterator\narcs(p::AbstractPetriNet) -> iterator\n\nReturn iterator over arc ids.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.attribute","page":"Docstrings","title":"PNML.attribute","text":"attribute(node::EzXML.Node, key::AbstractString) -> String\nattribute(\n    node::EzXML.Node,\n    key::AbstractString,\n    msg::String\n) -> String\n\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.basis-Tuple{PNML.PnmlMultiset}","page":"Docstrings","title":"PNML.basis","text":"basis(ms::PnmlMultiset) -> UserSort\n\nMultiset basis sort is a UserSort that references the declaration of a NamedSort. Which gives a name and id to a built-in Sorts, ProductSorts, or other UserSorts. MultisetSorts not allowed. Nor loops in sort references.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.condition","page":"Docstrings","title":"PNML.condition","text":"Return condition's value of transition.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.condition-Tuple{PNML.Transition}","page":"Docstrings","title":"PNML.condition","text":"Return value of condition.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.condition_type","page":"Docstrings","title":"PNML.condition_type","text":"Type of Condition.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.condition_value_type","page":"Docstrings","title":"PNML.condition_value_type","text":"Return value type.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.conditions","page":"Docstrings","title":"PNML.conditions","text":"Return a labelled vector of condition values.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.conditions-Tuple{PNML.AbstractPetriNet}","page":"Docstrings","title":"PNML.conditions","text":"conditions(petrinet) -> LVector{condition_value_type(pntd)}\n\nLVector labelled with transition id and holding its condition's value.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.coordinate_type","page":"Docstrings","title":"PNML.coordinate_type","text":"Return Coordinate{coordinate_value_type(T)}\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.coordinate_value_type","page":"Docstrings","title":"PNML.coordinate_value_type","text":"Return type of value in a Coordinate.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.declarations-Tuple{PNML.DeclDict}","page":"Docstrings","title":"PNML.declarations","text":"declarations(dd::DeclDict) -> Iterator\n\nReturn an iterator over all the declaration dictionaries' values. Flattens iterators: variabledecls, namedsorts, arbitrarysorts, partitionsorts, partitionops, namedoperators, arbitrary_ops, feconstants, usersorts.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.decldict-Tuple{Symbol}","page":"Docstrings","title":"PNML.decldict","text":"decldict(netid::Symbol) -> DeclDict\n\nAccess global DeclDict for the PnmlNet with netid.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.default_condition","page":"Docstrings","title":"PNML.default_condition","text":"Return default condition based on PNTD. Has meaning of true or always.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.default_inscription","page":"Docstrings","title":"PNML.default_inscription","text":"Return default inscription value based on PNTD. Has meaning of unity, as in one.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.default_marking","page":"Docstrings","title":"PNML.default_marking","text":"Return default marking value based on PnmlType. Has meaning of empty, as in zero. For high-level nets, the marking is an empty multiset whose basis matches placetype. Others have a marking that is a Number.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.default_typeusersort","page":"Docstrings","title":"PNML.default_typeusersort","text":"Return instance of default SortType UserSort based on PNTD. Useful for non-high-level nets and PTNet. See fill_nonhl! The ids parameter has  property: netid = first(ids)\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.delay-Tuple{Any}","page":"Docstrings","title":"PNML.delay","text":"delay(transition) -> Tuple{AbstractString, Float64, Float64}\n\n\nReturn delay label value of transition as interval tuple: (\"closure-string\", left, right) Missing delay labels default to (\"closed\", 0.0, 0.0) a.k.a. zero.\n\nAll net types may have a delay value type. Expected label XML: see MathML. Only non-negative.\n\nSupports\n\n(\"closed-open\", 0.0, ∞)  -> [0.0, ∞)\n(\"open-closed\", 2.0, 6.0 -> (2.0, 6.0]\n(\"open\", 2.0, 6.0)       -> (2.0, 6.0)\n(\"closed\", 2.0, 6.0)     -> [2.0, 6.0]\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.deref!-Tuple{PNML.PnmlNet}","page":"Docstrings","title":"PNML.deref!","text":"deref!(net::PNML.PnmlNet; trim, verbose)\n\n\nRemove reference nodes from arcs.\n\nOperates on the PnmlNetData at the net level. Expects that the PnmlNetKeys of the firstpage will have to be cleaned as part of flatten_pages!,\n\nAxioms\n\nAll ids in a network are unique in that they only have one instance in the XML.\nA chain of reference Places (or Transitions) always ends at a Place (or Transition).\nAll ids are valid.\nNo cycles.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.deref_place-Tuple{PNML.PnmlNet, Symbol}","page":"Docstrings","title":"PNML.deref_place","text":"deref_place(net, id[], trim::Bool] ) -> Symbol\n\nReturn id of referenced place. If trim is true (default) the reference is removed.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.deref_transition-Tuple{PNML.PnmlNet, Symbol}","page":"Docstrings","title":"PNML.deref_transition","text":"deref_transition(net, id[, trim::Bool] ) -> Symbol\n\nReturn id of referenced transition. If trim is true (default) the reference is removed.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.dict_show","page":"Docstrings","title":"PNML.dict_show","text":"dict_show(io::IO, x, 0())\n\nInternal helper for things that contain DictType.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.element_ids-Tuple{PNML.PartitionSort, Symbol}","page":"Docstrings","title":"PNML.element_ids","text":"Iterator over partition element PNML IDs\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.element_names-Tuple{PNML.PartitionSort, Symbol}","page":"Docstrings","title":"PNML.element_names","text":"Iterator over partition element names\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.elements-Tuple{PNML.BoolSort}","page":"Docstrings","title":"PNML.elements","text":"Elements of boolean sort\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.elements-Tuple{PNML.EnumerationSort}","page":"Docstrings","title":"PNML.elements","text":"elements(sort::EnumerationSort) -> Iterator\n\nReturn iterator into feconstant(decldict(netid)) for this sort's FEConstants. Maintains order of this sort.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.elements-Tuple{PNML.FiniteIntRangeSort}","page":"Docstrings","title":"PNML.elements","text":"Return iterator from range start to range stop, inclusive\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.enabled-Tuple{PNML.AbstractPetriNet, Any}","page":"Docstrings","title":"PNML.enabled","text":"enabled(::AbstractPetriNet, ::LVector) -> LVector\n\nReturns labelled vector of id=>boolean where true means transitionid is enabled at marking.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.equals-Union{Tuple{T}, Tuple{T, T}} where T<:PNML.AbstractSort","page":"Docstrings","title":"PNML.equals","text":"equals(a::PNML.AbstractSort, b::PNML.AbstractSort) -> Any\n\n\nFor sorts to be the same, first they must have the same type. Then any contents of the sorts are compared semantically.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.fill_nonhl!-Tuple{PNML.DeclDict}","page":"Docstrings","title":"PNML.fill_nonhl!","text":"fill_nonhl!(dd::DeclDict; ids::Tuple) -> nothing\n\nFill a DeclDict with values needed by non-high-level networks.\n\nNamedSort(:integer, \"Integer\", IntegerSort(); ids)\nNamedSort(:natural, \"Natural\", NaturalSort(); ids)\nNamedSort(:positive, \"Positive\", PositiveSort(); ids)\nNamedSort(:real, \"Real\", RealSort(); ids)\nNamedSort(:dot, \"Dot\", DotSort(); ids)\n\nUserSort(:integer; ids)\nUserSort(:natural; ids)\nUserSort(:positive; ids)\nUserSort(:real; ids)\nUserSort(:dot; ids)\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.find_net-Tuple{Any, Symbol}","page":"Docstrings","title":"PNML.find_net","text":"find_net(model, id::Symbol) -> Union{Nothing, PNML.PnmlNet}\n\n\nReturn PnmlNet having id or nothing`.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.find_nets","page":"Docstrings","title":"PNML.find_nets","text":"Return nets matching pntd type given as symbol or pnmltype singleton.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.fire!-Tuple{Any, Any, Any}","page":"Docstrings","title":"PNML.fire!","text":"Return the marking after firing transition. M1 = M0 + Cf. M0 is the initial marking vector, f is the firing vector, i.e. which transition is to fire and C is the incidence matrix.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.firstchild","page":"Docstrings","title":"PNML.firstchild","text":"firstchild(\n    node::EzXML.Node,\n    tag::AbstractString\n) -> Union{Nothing, EzXML.Node}\nfirstchild(\n    node::EzXML.Node,\n    tag::AbstractString,\n    namespace::AbstractString\n) -> Union{Nothing, EzXML.Node}\n\n\nReturn up to 1 immediate child of el that is a tag.  ns is the default namespace. Invent a prefix to create an iterator of namespace prefix and URI pairs\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.firstpage-Tuple{PNML.PnmlNet}","page":"Docstrings","title":"PNML.firstpage","text":"Usually the only interesting page.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.flatten_pages!","page":"Docstrings","title":"PNML.flatten_pages!","text":"flatten_pages!(net::PnmlNet[; options])\n\nMerge page content into the 1st page of the net.\n\nOptions\n\ntrim::Bool Remove refrence nodes (default true). See deref!.\nverbose::Bool Print breadcrumbs See CONFIG.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.get_label","page":"Docstrings","title":"PNML.get_label","text":"get_label(x, tag::Symbol) -> PnmlLabel\n\nReturn first label of x with a matching tagvalue.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.get_label-Tuple{Any, Symbol}","page":"Docstrings","title":"PNML.get_label","text":"Return label matching tagvalueornothing``.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.get_labels","page":"Docstrings","title":"PNML.get_labels","text":"get_labels(iteratable, s::Symbol) -> Iterator\n\nFilter iteratable collection for elements having s as the tag.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.get_toolinfo","page":"Docstrings","title":"PNML.get_toolinfo","text":"get_toolinfo(infos, toolname[, version]) -> Maybe{ToolInfo}\n\nReturn first toolinfo in iteratable collection infos having a matching toolname and version. See has_toolinfo\n\nget_toolinfo(ti::ToolInfo, toolname[, version]) -> Maybe{ToolInfo}\n\nReturn ti if toolname and version match, nothing otherwise.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.get_toolinfos","page":"Docstrings","title":"PNML.get_toolinfos","text":"get_toolinfos(infos, toolname::Regex[, version::Regex]) -> Iterator\n\nReturn iterator over toolinfos matching toolname and version regular expressions.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.has_arc","page":"Docstrings","title":"PNML.has_arc","text":"\n\nReturn true if any arc has id.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.has_label","page":"Docstrings","title":"PNML.has_label","text":"has_label(x, tag::Symbol) -> Bool\n\nDoes x have any label with a matching tag.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.has_label-Tuple{Any, Symbol}","page":"Docstrings","title":"PNML.has_label","text":"Return true if collection v contains label with tagvalue.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.has_labels","page":"Docstrings","title":"PNML.has_labels","text":"has_labels(x) -> Bool\n\nDoes x have any labels.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.has_name","page":"Docstrings","title":"PNML.has_name","text":"has_name(x) -> Bool\n\nReturn true if there is a name.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.has_operator-Tuple{PNML.DeclDict, Symbol}","page":"Docstrings","title":"PNML.has_operator","text":"Does any operator dictionary contain id?\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.has_place","page":"Docstrings","title":"PNML.has_place","text":"Return true if there is any place with id?\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.has_refplace","page":"Docstrings","title":"PNML.has_refplace","text":"\n\n\n\n","category":"function"},{"location":"library/#PNML.has_reftransition","page":"Docstrings","title":"PNML.has_reftransition","text":"\n\n\n\n","category":"function"},{"location":"library/#PNML.has_toolinfo","page":"Docstrings","title":"PNML.has_toolinfo","text":"has_toolinfo(infos, toolname[, version]) -> Bool\n\nDoes any toolinfo in iteratable infos have a matching toolname, and a matching version (if it is provided). toolname and version will be turned into Regexs to match against each ToolInfo in the infos collection.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.has_transition","page":"Docstrings","title":"PNML.has_transition","text":"Is there a transition with id?\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.hastag-Tuple{Any, Symbol}","page":"Docstrings","title":"PNML.hastag","text":"Use with Fix2 to filter anything with tag accessor.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.in_inscriptions-Tuple{Any, Any}","page":"Docstrings","title":"PNML.in_inscriptions","text":"Iterate over preset of transition, returning source place id => inscription value pairs.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.in_out","page":"Docstrings","title":"PNML.in_out","text":"Return tuple of input, output labelled vectors with key of place ids and value of arc inscription's value for use as a transition function. #TODO When do these get called \"pre\" and \"post\"?\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.inc_indent","page":"Docstrings","title":"PNML.inc_indent","text":"Increment the :indent value by inc.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.incidence_matrix-Tuple{PNML.AbstractPetriNet}","page":"Docstrings","title":"PNML.incidence_matrix","text":"incidence_matrix(petrinet) -> LArray\n\nC[transition,place] = inscription(transition,place) - inscription(place,transition)\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.indent-Tuple{IO}","page":"Docstrings","title":"PNML.indent","text":"Return blank string of current indent size in io.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.infos-Tuple{PNML.ToolInfo}","page":"Docstrings","title":"PNML.infos","text":"Content of a ToolInfo.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.initial_marking","page":"Docstrings","title":"PNML.initial_marking","text":"Return the initial marking of a place.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.initial_markings-Tuple{PNML.AbstractPetriNet}","page":"Docstrings","title":"PNML.initial_markings","text":"initial_markings(petrinet) -> LVector{marking_value_type(pntd)}\n\nLVector labelled with place id and holding initial marking's value.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.input_matrix-Tuple{PNML.AbstractPetriNet}","page":"Docstrings","title":"PNML.input_matrix","text":"input_matrix(petrinet::AbstractPetriNet) -> Matrix{inscription_value_type(net)}\n\nCreate and return a matrix ntransitions x nplaces\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.ins-Tuple{Any, Symbol}","page":"Docstrings","title":"PNML.ins","text":"ins(net, transition_id) -> LVector\n\nReturn vector of inscription values labeled with source place id for arcs with `transition_id` as the target id.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.inscription","page":"Docstrings","title":"PNML.inscription","text":"Return incription value of arc.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.inscription-Tuple{PNML.Arc}","page":"Docstrings","title":"PNML.inscription","text":"inscription(arc::Arc) -> Integer\n\nEvery inscription is treated as a functor by calling _evaluate on arc.inscription. Numbers' _evaluate is identity. Multisets' _evaluate is cardinality (natural)\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.inscription_type","page":"Docstrings","title":"PNML.inscription_type","text":"inscription_type(pntd) -> Inscription{inscription_value_type(pntd)}.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.inscription_value_type","page":"Docstrings","title":"PNML.inscription_value_type","text":"inscription_value_type(pntd) -> Union{Int64, Float64, PnmlMultiset{<:Any, <:AbstractSort}}\n\nReturn value type.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.inscriptions-Tuple{PNML.AbstractPetriNet}","page":"Docstrings","title":"PNML.inscriptions","text":"inscriptions(petrinet::AbstractPetriNet) -> LVector[id(arc) => inscription(arc)]\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.isoperator-Tuple{Symbol}","page":"Docstrings","title":"PNML.isoperator","text":"isoperator(tag::Symbol) -> Bool\n\nPredicate to identify operators in the high-level pntd's many-sorted algebra abstract syntaxt tree.\n\nNote: It is not the same as Meta.isoperator. Both work on Symbols. Not expecting any conflict.\n\ninteger\nmultiset\nboolean\ntuple\nbuiltin constant\nuseroperator\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.ispid-Tuple{Symbol}","page":"Docstrings","title":"PNML.ispid","text":"ispid(x::Symbol)\n\nReturn function to be used like: any(ispid(:asym), iterablewithpid).\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.labels","page":"Docstrings","title":"PNML.labels","text":"labels(x) -> Iterateable\n\nReturn iterator of labels attached to x.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.marking_type","page":"Docstrings","title":"PNML.marking_type","text":"marking_type(pntd) -> Marking{marking_value_type(pntd)}.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.marking_value_type","page":"Docstrings","title":"PNML.marking_value_type","text":"Return value type.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.metagraph","page":"Docstrings","title":"PNML.metagraph","text":"metagraph(::AbstractPetriNet) -> MetaGraph\nmetagraph(::PnmlNet) -> MetaGraph\n\nReturn MetaGraph instance based on a SimpleDiGraph with PNML nodes attached to vertices and edges.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.name","page":"Docstrings","title":"PNML.name","text":"name(x) -> String\n\nReturn name String. Default to empty string.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.name-Tuple{PNML.ToolInfo}","page":"Docstrings","title":"PNML.name","text":"Name of tool to for this tool specific information element.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.netid-Tuple{PNML.AbstractOperator}","page":"Docstrings","title":"PNML.netid","text":"Return network id of operator.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.netid-Tuple{Tuple}","page":"Docstrings","title":"PNML.netid","text":"Extract pnml network ID from trail of symbols\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.nets-Tuple{PNML.PnmlModel}","page":"Docstrings","title":"PNML.nets","text":"nets(model::PNML.PnmlModel) -> Tuple{Vararg{PNML.PnmlNet}}\n\n\nReturn all nets of model.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.nettype","page":"Docstrings","title":"PNML.nettype","text":"Return the PnmlType subtype representing the flavor (or pntd) of this kind of Petri Net Graph.\n\nSee also pnmltype\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.null_function-Tuple{Any}","page":"Docstrings","title":"PNML.null_function","text":"Dummy function\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.number_value-Union{Tuple{T}, Tuple{Type{T}, AbstractString}} where T<:Number","page":"Docstrings","title":"PNML.number_value","text":"number_value(::Type{T}, s) -> T\n\nParse string as a type T <: Number.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.operator-Tuple{PNML.DeclDict, Symbol}","page":"Docstrings","title":"PNML.operator","text":"Return operator with id. Operators include: NamedOperator, FEConstant, PartitionElement.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.operators-Tuple{PNML.DeclDict}","page":"Docstrings","title":"PNML.operators","text":"operators(dd::DeclDict)-> Iterator\n\nIterate over each operator in the operator subset of declaration dictionaries .\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.out_inscriptions-Tuple{Any, Any}","page":"Docstrings","title":"PNML.out_inscriptions","text":"Iterate over postset of transition, returning target  place id => inscription value pairs.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.output_matrix-Tuple{PNML.AbstractPetriNet}","page":"Docstrings","title":"PNML.output_matrix","text":"output_matrix(petrinet::AbstractPetriNet) -> Matrix{inscription_value_type(net)}\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.outs-Tuple{Any, Symbol}","page":"Docstrings","title":"PNML.outs","text":"outs(net, transition_id) -> LVector\n\nReturn vector of inscription values labeled with target place id for arcs with transition_id as the source id.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.page_type","page":"Docstrings","title":"PNML.page_type","text":"Type of Page.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.pages","page":"Docstrings","title":"PNML.pages","text":"pages(net::PnmlLabel|page::Page) -> iterator\n\nReturn iterator of pages directly owned by that object.\n\nSee allpages for an iterator over all pages in the PNML network model. When there is only one page in the net, or all pages are owned by the 'net' itself, 'allpages' and 'pages` behave the same.\n\nMaintains order (insertion order).\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.pages-Tuple{PNML.PnmlNet}","page":"Docstrings","title":"PNML.pages","text":"Iterator of Pages directly owned by net.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_arc!-NTuple{4, Any}","page":"Docstrings","title":"PNML.parse_arc!","text":"Fill arcset, arcdict.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_arc-Tuple{Any, Any}","page":"Docstrings","title":"PNML.parse_arc","text":"parse_arc(node::XMLNode, pntd::PnmlType) -> Arc{typeof(pntd), typeof(inscription)}\n\nConstruct an Arc with labels specialized for the PnmlType.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_condition","page":"Docstrings","title":"PNML.parse_condition","text":"Label of transition nodes.\n\nDetails\n\nCondition is defined by the ISO Specification as a High-level Annotation, meaning it has <text> and <structure> elements. With all meaning in the element that the <structure> holds evaluating to a boolean value. We extend this to anything that evaluates to a boolean value when treated as a functor.\n\nA Condition should evaluate to a boolean. See AbstractTerm.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.parse_condition_term-Tuple{EzXML.Node, PnmlType}","page":"Docstrings","title":"PNML.parse_condition_term","text":"parse_condition_term(cnode::EzXML.Node, pntd::PnmlType; ids)\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_declaration","page":"Docstrings","title":"PNML.parse_declaration","text":"Return Declaration label of 'net' or 'page' node. Assume behavior of a High-level Net label in that the meaning is in a <structure>.\n\nExpected format: <declaration> <structure> <declarations> <namedsort/> <namedsort/> ...\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.parse_feconstants-Tuple{EzXML.Node, PnmlType}","page":"Docstrings","title":"PNML.parse_feconstants","text":"Return ordered vector of finite enumeration constant IDs. Place the constants into feconstants(decldict(netid)).\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_file-Tuple{AbstractString}","page":"Docstrings","title":"PNML.parse_file","text":"parse_file(fname::AbstractString) -> PNML.PnmlModel\n\n\nBuild a PnmlModel from a file containing XML. See parse_str and parse_pnml.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_graphics-Tuple{Any, Any}","page":"Docstrings","title":"PNML.parse_graphics","text":"parse_graphics(node, pntd) -> PNML.Graphics{Float32}\n\n\nArcs, Annotations and Nodes have different graphics semantics. Return a Graphics holding the union of possibilities.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_graphics_coordinate-Tuple{Any, Any}","page":"Docstrings","title":"PNML.parse_graphics_coordinate","text":"parse_graphics_coordinate(\n    node,\n    pntd\n) -> PNML.Coordinate{Float32}\n\n\nReturn Coordinate. Specification seems to only use integers, we also allow real numbers.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_graphics_fill-Tuple{Any, Any}","page":"Docstrings","title":"PNML.parse_graphics_fill","text":"parse_graphics_fill(node, pntd) -> PNML.Fill\n\n\nReturn Fill\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_graphics_font-Tuple{Any, Any}","page":"Docstrings","title":"PNML.parse_graphics_font","text":"parse_graphics_font(node, pntd) -> PNML.Font\n\n\nReturn Font.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_graphics_line-Tuple{Any, Any}","page":"Docstrings","title":"PNML.parse_graphics_line","text":"parse_graphics_line(node, pntd) -> PNML.Line\n\n\nReturn Line.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_hlinitialMarking-Tuple{EzXML.Node, PNML.SortType, AbstractHLCore}","page":"Docstrings","title":"PNML.parse_hlinitialMarking","text":"parse_hlinitialMarking(\n    node::EzXML.Node,\n    placetype::PNML.SortType,\n    pntd::AbstractHLCore;\n    ids\n)\n\n\nHigh-level initial marking labels are expected to have a <structure> child containing a ground term. Sort of marking term must be the same as placetype, a UserSort that holds the ID of a sort declaration.\n\nNB: Used by PTNets that assume placetype is DotSort().\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_hlinscription-Tuple{EzXML.Node, Symbol, Symbol, AbstractHLCore}","page":"Docstrings","title":"PNML.parse_hlinscription","text":"parse_hlinscription(\n    node::EzXML.Node,\n    source::Symbol,\n    target::Symbol,\n    pntd::AbstractHLCore;\n    ids,\n    netdata\n)\n\n\nhlinscriptions are expressions.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_initialMarking-Tuple{EzXML.Node, PNML.SortType, PnmlType}","page":"Docstrings","title":"PNML.parse_initialMarking","text":"parse_initialMarking(\n    node::EzXML.Node,\n    placetype::PNML.SortType,\n    pntd::PnmlType;\n    ids\n)\n\n\nNon-high-level PnmlType initial marking parser. Most things are assumed to be Numbers.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_inscription-Tuple{EzXML.Node, Symbol, Symbol, PnmlType}","page":"Docstrings","title":"PNML.parse_inscription","text":"parse_inscription(\n    node::EzXML.Node,\n    source::Symbol,\n    target::Symbol,\n    pntd::PnmlType;\n    ids\n)\n\n\nIgnore the source & target IDREF symbols.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_inscription_term-Tuple{Any, Any}","page":"Docstrings","title":"PNML.parse_inscription_term","text":"parse_inscription_term(inode, pntd; ids)\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_label-Tuple{EzXML.Node, PnmlType}","page":"Docstrings","title":"PNML.parse_label","text":"parse_label(\n    node::EzXML.Node,\n    _::PnmlType\n) -> @NamedTuple{tag::Symbol, xml::EzXML.Node}\n\n\nShould not often have a <label> tag, this will bark if one is found and return NamedTuple (tag,xml) to defer parsing the xml.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_label_content-Union{Tuple{F}, Tuple{EzXML.Node, F, PnmlType}} where F","page":"Docstrings","title":"PNML.parse_label_content","text":"parse_label_content(\n    node::EzXML.Node,\n    termparser,\n    pntd::PnmlType;\n    ids\n)\n\n\nParse label using a termparser callable applied to any <structure>.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_name-Tuple{EzXML.Node, PnmlType}","page":"Docstrings","title":"PNML.parse_name","text":"parse_name(node::EzXML.Node, pntd::PnmlType) -> PNML.Name\n\n\nReturn Name label holding text value and optional tool & GUI information.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_namedoperator-Tuple{EzXML.Node, PnmlType}","page":"Docstrings","title":"PNML.parse_namedoperator","text":"parse_namedoperator(node::EzXML.Node, pntd::PnmlType; ids)\n\n\nDeclaration that wraps an operator by giving a name to a definition term (expression in many-sorted algebra).\n\nAn operator of arity 0 is a constant. When arity > 0, where is the parameter value stored? With operator or variable declaration\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_namedsort-Tuple{EzXML.Node, PnmlType}","page":"Docstrings","title":"PNML.parse_namedsort","text":"parse_namedsort(node::EzXML.Node, pntd::PnmlType; ids)\n\n\nDeclaration that wraps a Sort, adding an ID and name.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_net","page":"Docstrings","title":"PNML.parse_net","text":"parse_net(node::EzXML.Node) -> PNML.PnmlNet\nparse_net(\n    node::EzXML.Node,\n    pntd_override::Union{Nothing, PnmlType}\n) -> PNML.PnmlNet\n\n\nReturn a PnmlNet`.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.parse_net_1-Tuple{EzXML.Node, PnmlType}","page":"Docstrings","title":"PNML.parse_net_1","text":"Parse PNML <net> with a defined PnmlType used to set the expected behavior of labels attached to the nodes of a petri net graph, including: marking, inscription, condition and sorttype.\n\nThe ids tuple contains PNML ID Symbols. The first is for this PnmlNet. It is used to allocate a DeclDict, a per-net collection of all <declarations> content. TOPDECLDICTIONARY is a dictionary keyed by the PnmlNet's ID that holds a DeclDict. Page IDs are appended as the XML tree is descended, followed by node IDs.\n\nNote the use of decldict(netid(ids)) to access the per-net data structure as  a global wherever the netid is known.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_operator_term-Tuple{Symbol, EzXML.Node, PnmlType}","page":"Docstrings","title":"PNML.parse_operator_term","text":"parse_operator_term(\n    tag::Symbol,\n    node::EzXML.Node,\n    pntd::PnmlType;\n    ids\n)\n\n\nBuild an Operator Functor.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_page!-Tuple{Any, Any, Any, EzXML.Node, PnmlType}","page":"Docstrings","title":"PNML.parse_page!","text":"Call parse_page!, add page to dictionary and id set\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_place!-NTuple{4, Any}","page":"Docstrings","title":"PNML.parse_place!","text":"Fill placeset, placedict.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_place-Tuple{EzXML.Node, PnmlType}","page":"Docstrings","title":"PNML.parse_place","text":"parse_place(node::EzXML.Node, pntd::PnmlType; ids)\n\n\nsee fill_nonhl!\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_pnml-Tuple{EzXML.Node}","page":"Docstrings","title":"PNML.parse_pnml","text":"parse_pnml(xmlnode) -> PnmlModel\n\nStart parse from the root node of a well formed pnml XML document. Return a PnmlModel holding one or more PnmlNet. And each net has an independent ID Registry.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_refPlace!-NTuple{4, Any}","page":"Docstrings","title":"PNML.parse_refPlace!","text":"Fill refplaceset, refplacedict.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_refPlace-Tuple{EzXML.Node, PnmlType}","page":"Docstrings","title":"PNML.parse_refPlace","text":"parse_refPlace(node::EzXML.Node, pntd::PnmlType; ids)\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_refTransition!-NTuple{4, Any}","page":"Docstrings","title":"PNML.parse_refTransition!","text":"Fill reftransitionset, reftransitiondict.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_refTransition-Tuple{EzXML.Node, PnmlType}","page":"Docstrings","title":"PNML.parse_refTransition","text":"parse_refTransition(node::EzXML.Node, pntd::PnmlType; ids)\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_sort-Tuple{EzXML.Node, PnmlType}","page":"Docstrings","title":"PNML.parse_sort","text":"parse_sort(node::EzXML.Node, pntd::PnmlType; ids)\n\n\nSorts are found within an enclosing XML element, usually <structure>. PNML maps the sort element name, frequently called a 'tag', to the body of the sort. Heavily-used in the high-level abstract syntax tree. Some nesting is used. Meaning that some sorts contain other sorts.\n\nSee also parse_sorttype_term, parse_namedsort, parse_variabledecl.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_sorttype_term-Tuple{Any, Any}","page":"Docstrings","title":"PNML.parse_sorttype_term","text":"parse_sorttype_term(typenode, pntd; ids)\n\n\nThe PNML \"type\" of a Place is a \"sort\" of the high-level many-sorted algebra.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_str-Tuple{AbstractString}","page":"Docstrings","title":"PNML.parse_str","text":"parse_str(str::AbstractString) -> PNML.PnmlModel\n\n\nBuild a PnmlModel from a string containing XML. See parse_file and parse_pnml.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_structure-Tuple{EzXML.Node, PnmlType}","page":"Docstrings","title":"PNML.parse_structure","text":"parse_structure(node::EzXML.Node, pntd::PnmlType; ids)\n\n\nReturn Structure holding an XML <structure>. Should be inside of an PNML label. A \"claimed\" label usually elids the <structure> level (does not call this method).\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_term-Tuple{EzXML.Node, PnmlType}","page":"Docstrings","title":"PNML.parse_term","text":"parse_term(node::EzXML.Node, pntd::PnmlType; ids)\n\n\nThere will be no XML node <term>. Instead it is the interpertation of the child of some <structure>, <subterm> or <def> elements. The Relax NG Schema does contain \"Term\". Terms kinds are Variable and Operator.\n\nThere IS the TermInterface from Symbolics.jl, et al. Yes, we will be using it as soon as we figure things out.\n\nAll terms have a sort, #TODO\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_text-Tuple{EzXML.Node, PnmlType}","page":"Docstrings","title":"PNML.parse_text","text":"parse_text(node::EzXML.Node, _::PnmlType) -> String\n\n\nReturn the stripped string of node's content.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_tokengraphics-Tuple{EzXML.Node, PnmlType}","page":"Docstrings","title":"PNML.parse_tokengraphics","text":"parse_tokengraphics(\n    node::EzXML.Node,\n    pntd::PnmlType\n) -> PNML.TokenGraphics{Float32}\n\n\nParse high-level place-transition net's (HL-PTNet) toolspecific structure defined for token graphics. See TokenGraphics and parse_tokenposition.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_tokenposition-Tuple{Any, Any}","page":"Docstrings","title":"PNML.parse_tokenposition","text":"parse_tokenposition(node, pntd) -> PNML.Coordinate{Float32}\n\n\nReturn Cartesian Coordinate relative to containing element.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_toolspecific-Tuple{Any, Any}","page":"Docstrings","title":"PNML.parse_toolspecific","text":"parse_toolspecific(node, pntd) -> PNML.ToolInfo\n\n\nReturn ToolInfo with tool & version attributes and content.\n\nThe content can be one or more well-formed xml elements. Each are wrapped in a PnmlLabel.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_transition!-NTuple{4, Any}","page":"Docstrings","title":"PNML.parse_transition!","text":"Fill transitionset, transitiondict.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_transition-Tuple{EzXML.Node, PnmlType}","page":"Docstrings","title":"PNML.parse_transition","text":"parse_transition(node::EzXML.Node, pntd::PnmlType; ids)\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_type-Tuple{EzXML.Node, PnmlType}","page":"Docstrings","title":"PNML.parse_type","text":"parse_type(node::EzXML.Node, pntd::PnmlType; ids)\n\n\nLabel that defines the \"sort\" of tokens held by the place and semantics of the marking. NB: The \"type\" of a place from many-sorted algebra is different from the Petri Net \"type\" of a net or \"pntd\". Neither is directly a julia type.\n\nAllow all pntd's places to have a <type> label.  Non high-level are expecting a numeric sort: eltype(sort) <: Number.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_unknowndecl-Tuple{EzXML.Node, PnmlType}","page":"Docstrings","title":"PNML.parse_unknowndecl","text":"parse_unknowndecl(node::EzXML.Node, pntd::PnmlType; ids)\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_usersort-Tuple{EzXML.Node, PnmlType}","page":"Docstrings","title":"PNML.parse_usersort","text":"parse_usersort(node::EzXML.Node, pntd::PnmlType; ids)\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_variable-Tuple{EzXML.Node, PnmlType}","page":"Docstrings","title":"PNML.parse_variable","text":"parse_variable(node::EzXML.Node, pntd::PnmlType; ids)\n\n\nA reference to a variable declaration.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_variabledecl-Tuple{EzXML.Node, PnmlType}","page":"Docstrings","title":"PNML.parse_variabledecl","text":"parse_variabledecl(node::EzXML.Node, pntd::PnmlType; ids)\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.pid","page":"Docstrings","title":"PNML.pid","text":"pid(x) -> Symbol\n\nReturn pnml id symbol. An id's value is identity/unique. A tag may have multiple of same value.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.place","page":"Docstrings","title":"PNML.place","text":"Return the place with id.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.place_idset","page":"Docstrings","title":"PNML.place_idset","text":"Return iterator of all place IDs.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.place_idset-Tuple{PNML.AbstractPetriNet}","page":"Docstrings","title":"PNML.place_idset","text":"Return pnmlnet's place_idset\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.place_idset-Tuple{PNML.Page}","page":"Docstrings","title":"PNML.place_idset","text":"Return netsets place_idset\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.place_idset-Tuple{PNML.PnmlNetKeys}","page":"Docstrings","title":"PNML.place_idset","text":"Return an `Set{Symbol}, should it be an iterator?\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.place_idset-Tuple{PNML.PnmlNet}","page":"Docstrings","title":"PNML.place_idset","text":"Return iterator over keys of a dictionary\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.place_type","page":"Docstrings","title":"PNML.place_type","text":"Type of Place.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.places","page":"Docstrings","title":"PNML.places","text":"Return iterator of all places.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.pnml_hl_operator-Tuple{Symbol}","page":"Docstrings","title":"PNML.pnml_hl_operator","text":"pnml_hl_operator(tag::Symbol) -> Callable(::Vector{AbstractTerm})\n\nReturn callable with a single argument, a vector of inputs.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.pnml_hl_outsort-Tuple{Symbol}","page":"Docstrings","title":"PNML.pnml_hl_outsort","text":"pnml_hl_outsort(tag::Symbol; insorts::Vector{AbstractSort}, ids::Tuple) -> Sort\n\nReturn sort that builtin operator returns.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.pnml_namespace-Tuple{EzXML.Node}","page":"Docstrings","title":"PNML.pnml_namespace","text":"pnml_namespace(\n    node::EzXML.Node;\n    missing_ns_fatal,\n    default_ns\n) -> String\n\n\nReturn namespace. When node does not have a namespace return default value pnml_ns and warn or throw an error.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.pnmlmultiset","page":"Docstrings","title":"PNML.pnmlmultiset","text":"pnmlmultiset(x, basis::AbstractSort, multi::Integer=1)\n\nConstructs a PnmlMultiset` containing multiset \"1'x\" and a sort.\n\nAny x that supports sortof(x)\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.pnmlnet_type","page":"Docstrings","title":"PNML.pnmlnet_type","text":"\n\n\n\n","category":"function"},{"location":"library/#PNML.post_flatten_verify-Tuple{PNML.PnmlNet}","page":"Docstrings","title":"PNML.post_flatten_verify","text":"Verify a PnmlNet after it has been flattened or is otherwise expected to be a single-page net.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.postset-Tuple{Any, Any}","page":"Docstrings","title":"PNML.postset","text":"postset(net, id) -> Iterator\n\nIterate ids of output (arc target) for source transition or place id.\n\nSee out_inscriptions and transition_function.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.preset-Tuple{Any, Any}","page":"Docstrings","title":"PNML.preset","text":"Iterate ids of input (arc source) for output transition or place id.\n\nSee in_inscriptions and transition_function.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.rate-Tuple{Any}","page":"Docstrings","title":"PNML.rate","text":"rate(transition) -> Float64\n\n\nReturn rate label value of transition.  Missing rate labels are defaulted to zero.\n\nAll net types may have a rate value type. Expected label XML: <rate> <text>0.3</text> </rate>\n\nSee rate_value_type.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.rate_value_type","page":"Docstrings","title":"PNML.rate_value_type","text":"rate_value_type(::PnmlType) -> Number\n\nReturn rate value type based on net type.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.rates-Tuple{PNML.AbstractPetriNet}","page":"Docstrings","title":"PNML.rates","text":"rates(petrinet::AbstractPetriNet) -> LVector[id(transition) => rate(transition]\n\nReturn a transition-id labelled vector of rate values.\n\nWe allow all PNML nets to be stochastic Petri nets. See rate.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.reachability_graph-Tuple{Any}","page":"Docstrings","title":"PNML.reachability_graph","text":"\n\n\n\n","category":"method"},{"location":"library/#PNML.refid-Tuple{PNML.ReferenceNode}","page":"Docstrings","title":"PNML.refid","text":"Return the id of the referenced node.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.refplace","page":"Docstrings","title":"PNML.refplace","text":"Return reference place matching id.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.refplace_idset","page":"Docstrings","title":"PNML.refplace_idset","text":"refplace_idset(x) -> Set{Symbol} #TODO iterator?\n\nReturn reference place pnml ids.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.refplace_type","page":"Docstrings","title":"PNML.refplace_type","text":"Tyoe of RefPlace.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.refplaces","page":"Docstrings","title":"PNML.refplaces","text":"Return vector of all reference places.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.reftransition","page":"Docstrings","title":"PNML.reftransition","text":"Return reference transition matching id.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.reftransition_idset","page":"Docstrings","title":"PNML.reftransition_idset","text":"reftransition_idset(x) -> Set{Symbol} #TODO iterator?\n\nReturn reference transition pnml ids.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.reftransition_type","page":"Docstrings","title":"PNML.reftransition_type","text":"Type of RefTransition.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.reftransitions","page":"Docstrings","title":"PNML.reftransitions","text":"Return vector of all reference transitions.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.register_idof!-Tuple{PnmlIDRegistry, EzXML.Node}","page":"Docstrings","title":"PNML.register_idof!","text":"register_idof!(\n    registry::PnmlIDRegistry,\n    node::EzXML.Node\n) -> Symbol\n\n\nReturn registered symbol from id attribute of node. See PnmlIDRegistry.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.registry-Tuple{}","page":"Docstrings","title":"PNML.registry","text":"registry() -> PnmlIDRegistry\n\nConstruct an empty PNML ID registry using a ReentrantLock.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.registry_of-Tuple{PNML.PnmlModel, Symbol}","page":"Docstrings","title":"PNML.registry_of","text":"Return PnmlIDRegistry of a PnmlNet in a model.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.regs-Tuple{PNML.PnmlModel}","page":"Docstrings","title":"PNML.regs","text":"regs(model::PNML.PnmlModel) -> Vector{PnmlIDRegistry}\n\n\nReturn all PnmlIDRegistrys of model.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.save_config!","page":"Docstrings","title":"PNML.save_config!","text":"save_config!(config::PnmlConfig=CONFIG)\n\nSave a configuration to your LocalPreferences.toml file using Preferences.jl. The saved preferences will be automatically loaded next time you using PNML\n\nExamples\n\njulia> using PNML\n\njulia> PNML.CONFIG[].verbose = true;\n\njulia> PNML.CONFIG[].warn_on_unclaimed = true;     # Customize some defaults\n\njulia> PNML.save_config!(PNML.CONFIG[]); # Will be automatically read next time you `using PNML`\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.sortof-Tuple{PNML.AbstractOperator}","page":"Docstrings","title":"PNML.sortof","text":"Return output sort of operator.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.sorttag-Tuple{Number}","page":"Docstrings","title":"PNML.sorttag","text":"Translate Number type to a tag symbol.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.source-Tuple{PNML.Arc}","page":"Docstrings","title":"PNML.source","text":"source(arc) -> Symbol\n\nReturn identity symbol of source of arc.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.src_arcs","page":"Docstrings","title":"PNML.src_arcs","text":"Return arcs that have a source of transition id.\n\nSee also all_arcs, tgt_arcs.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.tag","page":"Docstrings","title":"PNML.tag","text":"tag(x) -> Symbol\n\nReturn tag symbol. A tag may have multiple of same value. An id's value is identity/unique.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.target-Tuple{PNML.Arc}","page":"Docstrings","title":"PNML.target","text":"target(arc) -> Symbol\n\nReturn identity symbol of target of arc.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.text-Tuple{PNML.AbstractLabel}","page":"Docstrings","title":"PNML.text","text":"Return text field. All labels are expected to have one that may be nothing or an empty string.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.text_content","page":"Docstrings","title":"PNML.text_content","text":"Find first :text in vx and return its :content as string.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.tgt_arcs","page":"Docstrings","title":"PNML.tgt_arcs","text":"Return arcs that have a target of transition id.\n\nSee also all_arcs, src_arcs.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.transition","page":"Docstrings","title":"PNML.transition","text":"\n\n\n\n","category":"function"},{"location":"library/#PNML.transition_function","page":"Docstrings","title":"PNML.transition_function","text":"transition_function(petrinet::AbstractPetriNet) -> LVector{Symbol, Tuple{LVector,LVector}\n\nTransition function of a Petri Net. Each transition has an input vector and an output vector. Each labelled vector is indexed by the place on the other end of the arc. Values are inscriptions of the arc.\n\nkeys are transition ids\n\nvalues are tuple of input, output labeled vectors,\n\nlabel is source or target place id - inscription (integer?)\n\ntfun = LVector(\n    birth=(LVector(rabbits=1.0), LVector(rabbits=2.0)),\n    predation=(LVector(wolves=1.0, rabbits=1.0), LVector(wolves=2.0)),\n    death=(LVector(wolves=1.0), LVector()),\n)\n\nVector{Tuple{Dict{Symbol, Number},Dict{Symbol, Number}}\n\nΔ = 3-element LabelledArrays.LArray{Tuple{LabelledArrays.LArray{Float64, 1, Vector{Float64}},\n                                          LabelledArrays.LArray{T, 1, D} where {T, D<:AbstractVector{T}}},\n                                    1,\n                 Vector{Tuple{LabelledArrays.LArray{Float64, 1, Vector{Float64}},\n                              LabelledArrays.LArray{T, 1, D}  where {T, D<:AbstractVector{T}}}},\n(:birth, :predation, :death)}:\n\n[tid => ([src=>inscription], [tgt=>inscription])]\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.transition_idset","page":"Docstrings","title":"PNML.transition_idset","text":"\n\n\n\n","category":"function"},{"location":"library/#PNML.transition_type","page":"Docstrings","title":"PNML.transition_type","text":"Type of TYransition.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.transitions","page":"Docstrings","title":"PNML.transitions","text":"Return iterator of all transitions.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.unparsed_tag-Tuple{EzXML.Node}","page":"Docstrings","title":"PNML.unparsed_tag","text":"unparsed_tag(node::EzXML.Node) -> Tuple{String, Any}\n\n\nReturn tuple of (tag, XDVT) holding well formed XML tree. XMLDict\n\nThe main use-case is to be wrapped in a PnmlLabel, AnyElement, et al.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.validate_declarations-Tuple{PNML.DeclDict}","page":"Docstrings","title":"PNML.validate_declarations","text":"validate_declarations(dd::DeclDict) -> Bool\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.value","page":"Docstrings","title":"PNML.value","text":"value(x)\n\nReturn value of x. Can be a wrapped value or a derived value.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.value-Tuple{PNML.Marking}","page":"Docstrings","title":"PNML.value","text":"value(m::Marking) -> Number\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.verify-Tuple{PNML.PnmlNet}","page":"Docstrings","title":"PNML.verify","text":"Error if any diagnostic messages are collected. Especially intended to detect semantc error.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.version-Tuple{PNML.ToolInfo}","page":"Docstrings","title":"PNML.version","text":"Version of tool for this tool specific information element.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.vertex_codes-Tuple{PNML.PnmlNet}","page":"Docstrings","title":"PNML.vertex_codes","text":"pnml id symbol mapped to graph vertex code.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.vertex_data!-Tuple{Dict{Symbol, Tuple{Int64, Union{PNML.Place, PNML.Transition}}}, PNML.PnmlNet, Any}","page":"Docstrings","title":"PNML.vertex_data!","text":"Fill dictionary where keys are pnml ids, values are tuples of vertex code, place or transition.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.vertex_labels-Tuple{PNML.PnmlNet}","page":"Docstrings","title":"PNML.vertex_labels","text":"graph vertex code mapped to pnml id symbol.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.xmlroot-Tuple{AbstractString}","page":"Docstrings","title":"PNML.xmlroot","text":"xmlroot(s::AbstractString) -> EzXML.Node\n\n\nParse string s into EzXML node.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.@xml_str-Tuple{Any}","page":"Docstrings","title":"PNML.@xml_str","text":"Parse string into EzXML node.\n\nSee xmlroot.\n\n\n\n\n\n","category":"macro"},{"location":"library/#PnmlTypeDefs-Reference","page":"Docstrings","title":"PnmlTypeDefs Reference","text":"","category":"section"},{"location":"library/","page":"Docstrings","title":"Docstrings","text":"Modules = [PnmlTypeDefs]","category":"page"},{"location":"library/#PNML.PnmlTypeDefs","page":"Docstrings","title":"PNML.PnmlTypeDefs","text":"Petri Net Type Definition (pntd) URI mapped to PnmlType subtype singleton.\n\n\n\n\n\n","category":"module"},{"location":"library/#PNML.PnmlTypeDefs.default_pntd_map","page":"Docstrings","title":"PNML.PnmlTypeDefs.default_pntd_map","text":"Map from Petri Net Type Definition (pntd) URI to Symbol. Allows multiple strings to map to the same pntd.\n\nThere is a companion map pnmltype_map that takes the symbol to a type object.\n\nThe URI is a string and may be the full URL of a pntd schema, just the schema file name, or a placeholder for a future schema.\n\nFor readability, the 'pntd symbol' should match the name used in the URI with inconvinient characters removed or replaced. For example, '-' is replaced by '_'.\n\n\n\n\n\n","category":"constant"},{"location":"library/#PNML.PnmlTypeDefs.pnmltype_map","page":"Docstrings","title":"PNML.PnmlTypeDefs.pnmltype_map","text":"The key Symbols are the supported kinds of Petri Nets. Maps to singletons.\n\n\n\n\n\n","category":"constant"},{"location":"library/#PNML.PnmlTypeDefs.AbstractContinuousNet","page":"Docstrings","title":"PNML.PnmlTypeDefs.AbstractContinuousNet","text":"abstract type AbstractContinuousNet <: PnmlType\n\nUses floating point numbers for markings, inscriptions. Most of the functionality is shared with AbstractPnmlCore. This seperates the\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.PnmlTypeDefs.AbstractHLCore","page":"Docstrings","title":"PNML.PnmlTypeDefs.AbstractHLCore","text":"abstract type AbstractHLCore <: PnmlType\n\nBase of High Level Petri Net pntds which add large extensions to PNML core. hlinitialMarking, hlinscription, and defined label structures.\n\nSee HLCoreNet, SymmetricNet, PT_HLPNG and others.\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.PnmlTypeDefs.AbstractPnmlCore","page":"Docstrings","title":"PNML.PnmlTypeDefs.AbstractPnmlCore","text":"abstract type AbstractPnmlCore <: PnmlType\n\nBase of token/integer-based Petri Net pntds.\n\nSee PnmlCoreNet, PTNet and others.\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.PnmlTypeDefs.ContinuousNet","page":"Docstrings","title":"PNML.PnmlTypeDefs.ContinuousNet","text":"struct ContinuousNet <: AbstractContinuousNet\n\nTODO: Continuous Petri Net\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.PnmlTypeDefs.HLCoreNet","page":"Docstrings","title":"PNML.PnmlTypeDefs.HLCoreNet","text":"struct HLCoreNet <: AbstractHLCore\n\nHLCoreNet can be used for generic high-level nets. We try to implement and test all function at `PnmlCoreNet level, but expect to find use for a concrete type at this level for testing high-level extensions.\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.PnmlTypeDefs.HLPNG","page":"Docstrings","title":"PNML.PnmlTypeDefs.HLPNG","text":"struct HLPNG <: AbstractHLCore\n\nHigh-Level Petri Net Graphs (HLPNGs) are the most intricate High-Level Petri Net schema. It extends SymmetricNet, including with\n\ndeclarations for sorts and functions (ArbitraryDeclarations)\nsorts for Integer, String, and List\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.PnmlTypeDefs.PTNet","page":"Docstrings","title":"PNML.PnmlTypeDefs.PTNet","text":"struct PTNet <: AbstractPnmlCore\n\nPlace-Transition Petri Nets add small extensions to core PNML. Integer-valued initialMarking and inscription.\n\nThe grammer file is ptnet.pnml so we name it PTNet. Note that 'PT' is often the prefix for XML tags specialized for this net type.\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.PnmlTypeDefs.PT_HLPNG","page":"Docstrings","title":"PNML.PnmlTypeDefs.PT_HLPNG","text":"struct PT_HLPNG <: AbstractHLCore\n\nPlace-Transition Net in HLCoreNet notation.\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.PnmlTypeDefs.PnmlCoreNet","page":"Docstrings","title":"PNML.PnmlTypeDefs.PnmlCoreNet","text":"struct PnmlCoreNet <: AbstractPnmlCore\n\nThe most minimal concrete Petri Net.\n\nUsed to implement and test the core PNML support. Covers the complete graph infrastructure including labels attached to nodes and arcs.\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.PnmlTypeDefs.PnmlType","page":"Docstrings","title":"PNML.PnmlTypeDefs.PnmlType","text":"abstract type PnmlType\n\nAbstract root of a dispatch type based on Petri Net Type Definitions (pntd).\n\nEach Petri Net Markup Language (PNML) network element will have a single pntd URI as a required 'type' XML attribute. That URI should refer to a RelaxNG schema defining the syntax and semantics of the XML model.\n\nSelected abbreviations, URIs that do not resolve to a valid schema file, are also allowed.\n\nRefer to pntd_symbol and pnmltype for how to get from the URI to a singleton.\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.PnmlTypeDefs.SymmetricNet","page":"Docstrings","title":"PNML.PnmlTypeDefs.SymmetricNet","text":"struct SymmetricNet <: AbstractHLCore\n\nSymmetric Petri Net is the best-worked use case in the primer and ISO specification part 2.\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.PnmlTypeDefs.add_nettype!-Tuple{AbstractDict, Symbol, PnmlType}","page":"Docstrings","title":"PNML.PnmlTypeDefs.add_nettype!","text":"add_nettype!(dict::AbstractDict, s::Symbol, pntd::PnmlType)\n\n\nAdd or replace mapping from Symbol s to PnmlType singleton pntd.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.PnmlTypeDefs.all_nettypes-Tuple{Any}","page":"Docstrings","title":"PNML.PnmlTypeDefs.all_nettypes","text":"Return iterator over PnmlType singletons filtered by the prediciate p.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.PnmlTypeDefs.all_nettypes-Tuple{}","page":"Docstrings","title":"PNML.PnmlTypeDefs.all_nettypes","text":"Return iterator over PnmlType singletons.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.PnmlTypeDefs.iscontinuous","page":"Docstrings","title":"PNML.PnmlTypeDefs.iscontinuous","text":"Values are floating point.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.PnmlTypeDefs.isdiscrete","page":"Docstrings","title":"PNML.PnmlTypeDefs.isdiscrete","text":"Values are integers.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.PnmlTypeDefs.ishighlevel","page":"Docstrings","title":"PNML.PnmlTypeDefs.ishighlevel","text":"Values are many-sorted.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.PnmlTypeDefs.pnmltype","page":"Docstrings","title":"PNML.PnmlTypeDefs.pnmltype","text":"pnmltype(pntd::T) -> PnmlType\npnmltype(uri::AbstractString) -> PnmlType\npnmltype(s::Symbol; pnmltype_map=pnmltype_map) -> PnmlType\n\nMap either a text string or a symbol to a dispatch type singlton.\n\nWhile that string may be a URI for a pntd, we treat it as a simple string without parsing. The PnmlTypeDefs.pnmltype_map and PnmlTypeDefs.default_pntd_map are both assumed to be correct here.\n\nUnknown or empty uri will map to symbol :pnmlcore. Unknown symbol throws a DomainError exception.\n\nExamples\n\njulia> pnmltype(PnmlCoreNet())\nPnmlCoreNet()\n\njulia> pnmltype(\"nonstandard\")\nPnmlCoreNet()\n\njulia> pnmltype(:symmetric)\nSymmetricNet()\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.PnmlTypeDefs.pntd_symbol-Tuple{AbstractString}","page":"Docstrings","title":"PNML.PnmlTypeDefs.pntd_symbol","text":"pntd_symbol(s::AbstractString) -> Symbol\n\n\nMap string s to a pntd symbol using default_pntd_map. Any unknown s is mapped to :pnmlcore. Returned symbol is suitable for pnmltype to use to index into pnmltype_map.\n\nExamples\n\njulia> PnmlTypeDefs.pntd_symbol(\"foo\")\n:pnmlcore\n\n\n\n\n\n","category":"method"},{"location":"library/#PnmlIDRegistrys-Reference","page":"Docstrings","title":"PnmlIDRegistrys Reference","text":"","category":"section"},{"location":"library/","page":"Docstrings","title":"Docstrings","text":"Modules = [PnmlIDRegistrys]","category":"page"},{"location":"library/#PNML.PnmlIDRegistrys","page":"Docstrings","title":"PNML.PnmlIDRegistrys","text":"Petri Net Markup Language identifier registry.\n\n\n\n\n\n","category":"module"},{"location":"library/#PNML.PnmlIDRegistrys.PnmlIDRegistry","page":"Docstrings","title":"PNML.PnmlIDRegistrys.PnmlIDRegistry","text":"Holds a set of PNML ID symbols and , optionally, a lock to allow safe reentrancy.\n\nstruct PnmlIDRegistry\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.PnmlIDRegistrys.isregistered-Tuple{PnmlIDRegistry, Symbol}","page":"Docstrings","title":"PNML.PnmlIDRegistrys.isregistered","text":"isregistered(registry::PnmlIDRegistry, id::Symbol) -> Bool\n\n\nReturn true if id is registered in registry.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.PnmlIDRegistrys.register_id!-Tuple{PnmlIDRegistry, Symbol}","page":"Docstrings","title":"PNML.PnmlIDRegistrys.register_id!","text":"register_id!(registry::PnmlIDRegistry, id::Symbol) -> Symbol\n\n\nRegister id symbol and return the symbol.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.PnmlIDRegistrys.reset_reg!-Tuple{PnmlIDRegistry}","page":"Docstrings","title":"PNML.PnmlIDRegistrys.reset_reg!","text":"reset_reg!(registry::PnmlIDRegistry)\n\n\nEmpty the set of id symbols. Use case is unit tests.\n\n\n\n\n\n","category":"method"},{"location":"traits/","page":"Traits","title":"Traits","text":"CurrentModule = PNML","category":"page"},{"location":"traits/#Traits","page":"Traits","title":"Traits","text":"","category":"section"},{"location":"traits/","page":"Traits","title":"Traits","text":"Some of the traits used are based on the pntd. Each supported pntd has a singleton subtype of PnmlType.","category":"page"},{"location":"traits/","page":"Traits","title":"Traits","text":"3 branches of pntd based on number system","category":"page"},{"location":"traits/","page":"Traits","title":"Traits","text":"core uses integers\nhigh-level uses terms of many-sorted algebra\ncontinuous/hybrid uses floating point","category":"page"},{"location":"traits/","page":"Traits","title":"Traits","text":"Default place markings and arc inscriptions are different for the three.","category":"page"},{"location":"traits/","page":"Traits","title":"Traits","text":"using  PNML, InteractiveUtils, Markdown\nlist_type(f) = for pntd in values(PNML.PnmlTypeDefs.pnmltype_map)\n    println(rpad(pntd, 15), \" -> \", f(pntd))\nend","category":"page"},{"location":"traits/#isdiscrete","page":"Traits","title":"isdiscrete","text":"","category":"section"},{"location":"traits/","page":"Traits","title":"Traits","text":"list_type(PNML.isdiscrete)","category":"page"},{"location":"traits/#iscontinuous","page":"Traits","title":"iscontinuous","text":"","category":"section"},{"location":"traits/","page":"Traits","title":"Traits","text":"list_type(PNML.iscontinuous)","category":"page"},{"location":"traits/#ishighlevel","page":"Traits","title":"ishighlevel","text":"","category":"section"},{"location":"traits/","page":"Traits","title":"Traits","text":"list_type(PNML.ishighlevel)","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"CurrentModule = PNML","category":"page"},{"location":"pnml/#PNML.jl","page":"Petri Net Markup Language","title":"PNML.jl","text":"","category":"section"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"Documentation for the GitHub PNML.jl repository. Which defines a Julia module named PNML. Which handles an XML markup language with the acronym 'PNML' – Petri Net Markup Language.","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"using Markdown, Pkg, Dates, InteractiveUtils\n\nfunction print_dep_version(depname)\n\tdeps = values(Pkg.dependencies())\n\tversion = first(d for d in deps if d.name == depname).version\n\t\"$depname: v$version\"\nend\n\nMarkdown.parse(\"\"\"\n\tThese docs were generated at $(now()) on $(gethostname()) using:\n\t\t- $(print_dep_version(\"PNML\"))\n   \"\"\")","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"using InteractiveUtils; # hide\nversioninfo()","category":"page"},{"location":"pnml/#www.pnml.org","page":"Petri Net Markup Language","title":"www.pnml.org","text":"","category":"section"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"In this section 'PNML' refers to the markup language, its specification and schemas, not this software.","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"http://www.pnml.org","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"has publications and tutorials covering PNML at various points in its evolution.\nhas links to a series of ISO/IEC 15909 standards relating to PNML. They cost money.\nis the cannonical site for the RELAX-NG XML schemas that define the grammar of several Petri Net Type Defintions (pntd), including:","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"  - PT Net (Place/Transition Net)\n  - High-level Place/Transition Net\n  - Symmetric Net","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"There are 2 flavors currently covered by PNML: Discrete integer-valued & High-level many-sorted algebra. The ISO/IEC 15909-2 specification explicitly restricts the many-sorted algebra to use integers.","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"It seems the people behind PNML are of the Model Driven Engineering (MDE) camp and have chosen Java, Eclipse and its modeling framework (EMF). They provide such EMF files on this site.","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"There is GUI focus in the core pnml. Most of the Petri Net components, including the annotation labels, may have graphical presentation data attached. The page driven structure should be useful for at least GUIs.","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"The high-level marking, inscription, condition and declaration are where the hard work waits.","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"See A primer on the Petri Net Markup Language and ISO/IEC 15909-2(pdf) for more details. The rest of this page will hopefully make more sense if you are familiar with the primer's contents. Use the Schema as definitive like the 'primer' counsels. That is what any XML validation tool works from.","category":"page"},{"location":"pnml/#Interoperability","page":"Petri Net Markup Language","title":"Interoperability","text":"","category":"section"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"Petri Net Type Definition schema files (pntd) are defined using RELAX-NG XML Schema files (rng). Petri Net Markup Language files (pnml) are intended to be validated against a pntd schema.","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"For interchange of pnml between tools it should be enough to support the same pntd schema.","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"Note that ISO released part 3 of the PNML standard covering extensions and structuring mechanisms in 2021. Some bits are on the Roadmap based on freely viewable table of contents. And some http://www.pnml.org extension grammer files mention some of these things.","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"It is possible to create a non-standard pntd. And more will be standardized, either formally or informally. Non-standard mostly means that the interchangibility is restricted.","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"Since validation is not a goal of PNML.jl, non-standard pntds can be used for the URI of an XML net tag's type attribute. Notably pnmlcore and nonstandard are mapped to PnmlCoreNet.","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"PnmlCoreNet is the minimum level of meaning that any pnml file can hold. PNML.jl should be able to create a valid intermediate representation using PnmlCoreNet since all the higher-level meaning is expressed as pnml labels, restrictions, and required XML tag names.","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"Further parsing of labels is specialized upon subtypes of PNML.AbstractPetriNet. See Traits for more details.","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"If you want interchangability of pnml models, you will have to stick to the standard pnml pntds. The High Level Petri Net, even when restricted to symmetricnet.pntd, is very expressive. Even the base pnmlcore.pntd is useful.","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"Note that the official pntd schema files are in the grammer directory.","category":"page"},{"location":"pnml/#Why-no-Schema-Verification","page":"Petri Net Markup Language","title":"Why no Schema Verification","text":"","category":"section"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"Within PNML.jl no schema-level validation is done.","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"Note that, depending on context, 'PNML' may refer to either the markup language or the Julia code in the following.","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"In is allowed by the PNML specification to omit validation with the presumption that some specialized, external tool can be applied, thus allowing the file format to be used for inter-tool communication with lower overhead in each tool.","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"Also omiting pntd validation allows \"duck typing\" of Petri Nets built upon the PNML intermediate representration.","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"Of some note it that PNML.jl extends PNML. These, non-standard pntd do not (yet) have a schema written. See ContinuousNet.","category":"page"},{"location":"pnml/#PNTD-Maps","page":"Petri Net Markup Language","title":"PNTD Maps","text":"","category":"section"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"Defaut PNTD to Symbol map (URI string to pntd symbol):","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"using PNML; foreach(println, sort(collect(pairs(PnmlTypeDefs.default_pntd_map)))) #hide","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"PnmlType map (pntd symbol to singleton):","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"using PNML; foreach(println, pairs(PnmlTypeDefs.pnmltype_map)) #hide","category":"page"},{"location":"pnml/#Handling-Labels","page":"Petri Net Markup Language","title":"Handling Labels","text":"","category":"section"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"The implementation of Labels supports annotation and attribute format labels.","category":"page"},{"location":"pnml/#Annotation-Labels","page":"Petri Net Markup Language","title":"Annotation Labels","text":"","category":"section"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"annotation format labels are expected to have either a <text> element, a <structure> element or both. Often the <text> is a human-readable representation of of the <structure> element. Graphics and ToolInfo elements may be present.","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"For PTNet (and pnmlcore) only the Name label with a <text> element (and no <structure> element) is defined by the specification.","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"Labels defined in High-Level pntds, specifically 'Symmetric Nets', \"require\" all meaning to reside in the <structure>.","category":"page"},{"location":"pnml/#Attribute-Labels","page":"Petri Net Markup Language","title":"Attribute Labels","text":"","category":"section"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"attribute format labels are present in the UML model of pnml. They differ from annotation by omitting the Graphics element, but retain the ToolInfo element. Unless an optimization is identified, both attribute and annotation will share the same implementation.","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"A standard-conforming pnml model would not have any Graphics element so that field would be nothing.","category":"page"},{"location":"pnml/#High-level-Petri-Net-Concepts","page":"Petri Net Markup Language","title":"High-level Petri Net Concepts","text":"","category":"section"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"Based on a draft version of ISO/IEC 15909-1:2004 High-level Petri nets - Part 1: Concepts, definitions and graphical notation.","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"Useful for setting the ontology.","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"Arc inscriptions are expressions that are evaluated.","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"Place markings are multisets of tokens of a sort/type.","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"Transition conditions are boolean expressions that are evaluated. Used to determine if transition is enabled.","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"Expressions in pnml can be many-sorted algebras. Declaration, Term, Sort, Multiset, Variable, are among the concepts used to define expressions.","category":"page"},{"location":"pnml/#Terms","page":"Petri Net Markup Language","title":"Terms","text":"","category":"section"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"Terms have sorts: the sort of the variable or the output sort of the operator.","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"Terms can be buit from built-in operators and sorts, and user-defined variables. These are defined in variable declarations, a kind of annotation label attached to pages and nets.","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"A transition can have a condition, a term of sort boolean, which imposes restrictions on when the transition may fire.","category":"page"},{"location":"pnml/#Sorts","page":"Petri Net Markup Language","title":"Sorts","text":"","category":"section"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"named sorts are constructed from existing sorts and given a new name.","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"arbitrary sort is not defined in core, is not allowed in Symmetric Nets. HLPNG adds arbitrary declarations, sorts of lists, strings, integers to Symmetric Nets.","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"The sort of a term is the sort of the variable or the output sort of the operator.","category":"page"},{"location":"pnml/#Operators","page":"Petri Net Markup Language","title":"Operators","text":"","category":"section"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"An operator can be: built-in constant, built-in operator, multiset operator or tuple operator.","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"User-defined operators, or named operators are abbreviations, built from existing operators and parameter variables.","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"There will be arbitrary operator declarations for High-Level Petri Net Graphs, but not for Symmetric Nets.","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"Operators have a sequence of input sorts and a single output sort.","category":"page"},{"location":"pnml/#Variables","page":"Petri Net Markup Language","title":"Variables","text":"","category":"section"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"TBD","category":"page"},{"location":"pnml/#Notes-on-Petri-Nets","page":"Petri Net Markup Language","title":"Notes on Petri Nets","text":"","category":"section"},{"location":"pnml/#*Petri-Nets-as-Multiset-Rewriting-Systems-in-a-Linear-Framework*,-Iliano-Cervesato","page":"Petri Net Markup Language","title":"Petri Nets as Multiset Rewriting Systems in a Linear Framework, Iliano Cervesato","text":"","category":"section"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"This addresses Place Transition Nets. High-level Petri nets explictily use multisets.","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"factor out the multiplicity of the elements of the underlying set. This is achieved by first defining the notion of singleton multisets and then by writing arbitrary multisets as linear combination of singleton multisets.","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"a rewrite rule can be viewed as a singleton multiset","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"Petri nets are meant to represent evolving systems. To represent this dynamic flavor, we will rely on the notion of multiset rewriting systems.","category":"page"},{"location":"pnml/#Continuous,-Open-and-Other-Petri-Nets","page":"Petri Net Markup Language","title":"Continuous, Open and Other Petri Nets","text":"","category":"section"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"Allow marking, inscription, conditions to be floating point even when specification wants an integer. This allows continuous nets.","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"See Petri.jl and AlgebraicPetri.jl for some continuous Petri Net use-cases.","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"TODO: Hybrid nets combining floating point/continuous and integer/discrete inscription/marking.","category":"page"},{"location":"pnml/#References","page":"Petri Net Markup Language","title":"References","text":"","category":"section"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"www.pnml.org","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"A primer on the Petri Net Markup Language and ISO/IEC 15909-2","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"ISO High-level Petri nets Specification in multiple parts:","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"ISO/IEC 15909-1:2019 — Part 1: Concepts, definitions and graphical notation\nISO/IEC 15909-2:2011 — Part 2: Transfer format\nISO/IEC 15909-2:2011/Cor 1:2013 — Part 2: Transfer format — TECHNICAL CORRIGENDUM 1\nISO/IEC 15909-3:2021 — Part 3: Extensions and structuring mechanisms","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"github.com/lip6/pnmlframework \"hosts the source code of PNML Framework, the companion tool of the International Standard ISO/IEC 15909-2\" As an Eclipse/Java construction using Eclipse Public License 1.0,","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"github.com/loig/pinimili Go language.","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"github.com/stackdump/gopetri Go language.","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"github.com/daemontus/pnml-parser Rust language.","category":"page"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"Browsable PNML Grammar from Grammar Zoo  For Symmetric Nets.","category":"page"},{"location":"parser/","page":"Parser","title":"Parser","text":"CurrentModule = PNML","category":"page"},{"location":"parser/#Parser","page":"Parser","title":"Parser","text":"","category":"section"},{"location":"parser/#Unclaimed-Labels","page":"Parser","title":"Unclaimed Labels","text":"","category":"section"},{"location":"parser/","page":"Parser","title":"Parser","text":"XML tags that are not 'claimed' are recursively parsed into a DictType by unparsed_tag.","category":"page"},{"location":"parser/","page":"Parser","title":"Parser","text":"See AnyElement, anyelement, PnmlLabel","category":"page"},{"location":"parser/#AnyElement","page":"Parser","title":"AnyElement","text":"","category":"section"},{"location":"parser/","page":"Parser","title":"Parser","text":"Main use case if for ToolInfo content. The specification allows any well-formed XML. Only the intended tool needs to understand the content.","category":"page"},{"location":"parser/","page":"Parser","title":"Parser","text":"TODO Implement a ToolInfo for PNML.jl extensions.","category":"page"},{"location":"parser/#PnmlLabel","page":"Parser","title":"PnmlLabel","text":"","category":"section"},{"location":"parser/","page":"Parser","title":"Parser","text":"Applies label semantics to a DictType. Used for not-yet-implemented labels. Many of the labels used for high-level many-sorted algebra have not been implemented.","category":"page"},{"location":"parser/","page":"Parser","title":"Parser","text":"See rate for a use case.","category":"page"},{"location":"parser/#Sorts","page":"Parser","title":"Sorts","text":"","category":"section"},{"location":"parser/","page":"Parser","title":"Parser","text":"Figure 11 of the primer lists built-in sorts and functions for Symmetric Nets, a restricted High-Level Petri Net Graph. See SymmetricNet, HLPNG and AbstractHLCore","category":"page"},{"location":"parser/","page":"Parser","title":"Parser","text":"Some of the restrictions:","category":"page"},{"location":"parser/","page":"Parser","title":"Parser","text":"ArbitrarySort and 'Unparsed' not allowed.\ncarrier sets of all basic (is this built-in?) sorts are finite\nsorttype of a place must not be a multiset sort (but multiset is in the UML diagram)","category":"page"},{"location":"parser/","page":"Parser","title":"Parser","text":"What HLPNG adds:","category":"page"},{"location":"parser/","page":"Parser","title":"Parser","text":"declarations for sorts and functions\nArbitraryDeclarations: ArbitrarySort, ArbitraryOperator, Unparsed\nIntegers","category":"page"},{"location":"parser/","page":"Parser","title":"Parser","text":"_ Strings _ Lists","category":"page"},{"location":"parser/","page":"Parser","title":"Parser","text":"initialMarking not tuple inscription variable pnml equality net or unparsed useroperator arc usersort referenceTransition namedoperator structure mulitsetsort booleanconstant page tokenposition referencePlace label place productsort graphics hlinscription and name toolspecific hlinitialMarking bool declaration variabledecl condition inequality transition arbitraryoperator arbitrarysort sort tokengraphics text type imply","category":"page"},{"location":"parser/#Structure-of-High-level-Annotation","page":"Parser","title":"Structure of High-level Annotation","text":"","category":"section"},{"location":"parser/","page":"Parser","title":"Parser","text":"Schematic of annotation label:","category":"page"},{"location":"parser/","page":"Parser","title":"Parser","text":"text\nstructure\nTerm\nsubterm\nTerm (its alternating subterm Term all the way down)\ntoolspecific\ngraphics","category":"page"},{"location":"evaluate/","page":"Evaluate","title":"Evaluate","text":"CurrentModule = PNML","category":"page"},{"location":"evaluate/#Evaluate-possible-functors","page":"Evaluate","title":"Evaluate possible functors","text":"","category":"section"},{"location":"evaluate/","page":"Evaluate","title":"Evaluate","text":"Things that are functors:","category":"page"},{"location":"evaluate/","page":"Evaluate","title":"Evaluate","text":"Marking: return marking_value_type\nInscription: return inscription_value_type\nCondition: return condition_value_type\nTerm: return a sort's value type TBD","category":"page"},{"location":"evaluate/","page":"Evaluate","title":"Evaluate","text":"using AbstractTrees, PNML, InteractiveUtils, Markdown","category":"page"},{"location":"evaluate/","page":"Evaluate","title":"Evaluate","text":"_evaluate","category":"page"},{"location":"evaluate/","page":"Evaluate","title":"Evaluate","text":"methods(PNML._evaluate) # hide","category":"page"},{"location":"evaluate/#Examples","page":"Evaluate","title":"Examples","text":"","category":"section"},{"location":"evaluate/","page":"Evaluate","title":"Evaluate","text":"julia> _evaluate(1)\n1\n\njulia> _evaluate(true)\ntrue","category":"page"},{"location":"evaluate/#XMLDict-format-Terms","page":"Evaluate","title":"XMLDict format Terms","text":"","category":"section"},{"location":"evaluate/","page":"Evaluate","title":"Evaluate","text":"XMLDict.jl","category":"page"},{"location":"evaluate/","page":"Evaluate","title":"Evaluate","text":"XMLDict implements an Associative interface (get(), getindex(), haskey()) for reading XML elements and attributes.","category":"page"},{"location":"evaluate/#Operator-that-constructs-a-multiset-of-sort-dot.","page":"Evaluate","title":"Operator that constructs a multiset of sort dot.","text":"","category":"section"},{"location":"evaluate/","page":"Evaluate","title":"Evaluate","text":"A marking is a multiset of a place's sorttype. The output sort of the operator must be of this sort (equatSorts is true and sortof(place) == sortof(marking)).","category":"page"},{"location":"evaluate/","page":"Evaluate","title":"Evaluate","text":"The output sort of numberof is the sort of the element in 2nd subterm.","category":"page"},{"location":"evaluate/","page":"Evaluate","title":"Evaluate","text":"positive and dotconstant are builtin-constants.","category":"page"},{"location":"evaluate/#Tuple","page":"Evaluate","title":"Tuple","text":"","category":"section"},{"location":"evaluate/#Add-multisets","page":"Evaluate","title":"Add multisets","text":"","category":"section"},{"location":"evaluate/","page":"Evaluate","title":"Evaluate","text":"<hlinitialMarking>\n    <text>1`3 ++ 1`2</text>\n    <structure>\n        <add>\n            <subterm>\n                <numberof>\n                <subterm><numberconstant value=\\\"1\\\"><positive/></numberconstant></subterm>\n                <subterm><numberconstant value=\\\"3\\\"><positive/></numberconstant></subterm>\n                </numberof>\n            </subterm>\n            <subterm>\n                <numberof>\n                <subterm><numberconstant value=\\\"1\\\"><positive/></numberconstant></subterm>\n                <subterm><numberconstant value=\\\"2\\\"><positive/></numberconstant></subterm>\n                </numberof>\n            </subterm>\n        </add>\n    </structure>\n</hlinitialMarking>","category":"page"},{"location":"evaluate/","page":"Evaluate","title":"Evaluate","text":"value(mark) = Term(:add,\n    (d[\"subterm\"] = [(d[\"numberof\"] = (d[\"subterm\"] =\n                            [(d[\"numberconstant\"] = (d[:value] = \"1\", d[\"positive\"] = ())),\n                             (d[\"numberconstant\"] = (d[:value] = \"3\", d[\"positive\"] = ()))])),\n                     (d[\"numberof\"] = (d[\"subterm\"] =\n                            [(d[\"numberconstant\"] = (d[:value] = \"1\", d[\"positive\"] = ())),\n                             (d[\"numberconstant\"] = (d[:value] = \"2\", d[\"positive\"] = ()))]))]))\n","category":"page"},{"location":"evaluate/","page":"Evaluate","title":"Evaluate","text":"Constructs an expression that adds 2 multisets. When all multiplicities are 1 and sortof subterm has an eltype (is simple), can apply usual math operator. Output sort needs to match eltype of operation result in case there is promotion.","category":"page"},{"location":"evaluate/","page":"Evaluate","title":"Evaluate","text":"1`3 + 1`2 = 3 + 2 = 5\n2`3 + 1`2 = 3 + 3 + 2 = 8","category":"page"},{"location":"evaluate/#Zero","page":"Evaluate","title":"Zero","text":"","category":"section"},{"location":"evaluate/","page":"Evaluate","title":"Evaluate","text":"value(mark) = Term(:zero, 0)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"CurrentModule = PNML","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Pages = [\"examples.md\"]\nDepth = 5","category":"page"},{"location":"examples/#Lotka-Volterra","page":"Examples","title":"Lotka-Volterra","text":"","category":"section"},{"location":"examples/#Petri.jl-Starting-Point","page":"Examples","title":"Petri.jl Starting Point","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"https://github.com/mehalter/Petri.jl","category":"page"},{"location":"examples/#Example-2","page":"Examples","title":"Example 2","text":"","category":"section"},{"location":"examples/#Stuff-for-example-2","page":"Examples","title":"Stuff for example 2","text":"","category":"section"},{"location":"layers/","page":"Layers of Abstraction","title":"Layers of Abstraction","text":"CurrentModule = PNML","category":"page"},{"location":"layers/#Layers-of-Abstraction","page":"Layers of Abstraction","title":"Layers of Abstraction","text":"","category":"section"},{"location":"layers/","page":"Layers of Abstraction","title":"Layers of Abstraction","text":"note: Graphics are elided from this discussion\nEverywhere there are ToolInfos in this discussion one may assume that there is also an optional Graphics possible.While we parse such XML into \"containers of strings\" and Coordinates. No further use is implemented or planned. And no discussion of use is present.","category":"page"},{"location":"layers/#Intermediate-Representation","page":"Layers of Abstraction","title":"Intermediate Representation","text":"","category":"section"},{"location":"layers/","page":"Layers of Abstraction","title":"Layers of Abstraction","text":"The intermediate representation (IR) is between the XML model and a \"usable\" network. Many different flavors of Petri Nets are expected to be implemented using the IR.","category":"page"},{"location":"layers/","page":"Layers of Abstraction","title":"Layers of Abstraction","text":"The IR is constructed by traversing the XML and using tag names as dictonary keys.","category":"page"},{"location":"layers/","page":"Layers of Abstraction","title":"Layers of Abstraction","text":"In the first part of parsing, a named tuple is filled with appropriate initial values for each xml tag. Then optional child keys have values bound as they are parsed.","category":"page"},{"location":"layers/","page":"Layers of Abstraction","title":"Layers of Abstraction","text":"The second part of parsing instantiates objects using the named tuple as input.","category":"page"},{"location":"layers/","page":"Layers of Abstraction","title":"Layers of Abstraction","text":"The structure of the IR follows the tree structure of a well-formed XML document and the PNML specification.","category":"page"},{"location":"layers/","page":"Layers of Abstraction","title":"Layers of Abstraction","text":"XML attribute names and child element tag names are used for keys of the same dictonary. The pnml specification/schemas do not use colliding names. However, the <toolspecific> tag's content is not required to be valid pnml, just well-formed XML. We assume nobody would use colliding names intentionally.","category":"page"},{"location":"layers/","page":"Layers of Abstraction","title":"Layers of Abstraction","text":"","category":"page"},{"location":"layers/","page":"Layers of Abstraction","title":"Layers of Abstraction","text":"The crude structure required by the pnmlcore schema: PnmlModel","category":"page"},{"location":"layers/","page":"Layers of Abstraction","title":"Layers of Abstraction","text":"Net\nPage\n- Places, Marking\n- Transitions, Condition\n- Arcs, Inscription\n- Toolinfos\n- Labels\n- Subpages\nName","category":"page"},{"location":"layers/","page":"Layers of Abstraction","title":"Layers of Abstraction","text":"- Toolinfos\n- Labels","category":"page"},{"location":"layers/","page":"Layers of Abstraction","title":"Layers of Abstraction","text":"The IR is implemented under the assumption the the input pnml file is valid. All tags are assumed to be meaningful to the resulting network. The pnmlcore schema requires undefined tags will be considered pnml labels. The IR is capable of handling arbitrary labels. Many label tags from higherlevel pnml schemas are recognized by the IR parsers.","category":"page"},{"location":"layers/","page":"Layers of Abstraction","title":"Layers of Abstraction","text":"While the Petri Net Type Definition (pntd) is present in every valid net, it was not necessary to consult the type during creation of the IR. It is expected that conforming to pntd will be done at a higher level.","category":"page"},{"location":"layers/","page":"Layers of Abstraction","title":"Layers of Abstraction","text":"Some parts of pnml are complicated. Not yet completed bits may be implemented as wrappers holdind unparsed XML. In fact, parts of pnml are specified as holding any well-formed XML.","category":"page"},{"location":"layers/","page":"Layers of Abstraction","title":"Layers of Abstraction","text":"","category":"page"},{"location":"layers/","page":"Layers of Abstraction","title":"Layers of Abstraction","text":"The crude structure required by the pnmlcore schema: PnmlModel","category":"page"},{"location":"layers/","page":"Layers of Abstraction","title":"Layers of Abstraction","text":"Net\nPages\nPlaces, Marking, unclaimed labels  [SortType] [Capacity]\nTransitions, Condition, unclaimed labels [rate]\nArcs, Inscription, unclaimed labels [ArcType]\nToolinfos [TokenGraphics]\nLabels unclaimed, [Declaration]\nSubpages\nName (everybody has name)\nToolinfos\nLabels","category":"page"},{"location":"layers/","page":"Layers of Abstraction","title":"Layers of Abstraction","text":"It is expected that conforming to pntd will be done at a higher level.","category":"page"},{"location":"layers/","page":"Layers of Abstraction","title":"Layers of Abstraction","text":"Level Sorts \nCore Bool, Int \nPT Bool, Int \nContinuous Bool, Float64 \nHybrid Bool, Int, Float64 \nhigh-level Bool, Int, Term \nSymmetric Bool, Int, Term \nPTHLPNG Bool, Int, Term ","category":"page"},{"location":"layers/#Core-Layer","page":"Layers of Abstraction","title":"Core Layer","text":"","category":"section"},{"location":"layers/","page":"Layers of Abstraction","title":"Layers of Abstraction","text":"What is permitted by the specification in a XML file will be a subset of the implementation.","category":"page"},{"location":"layers/","page":"Layers of Abstraction","title":"Layers of Abstraction","text":"Concepts from High-Level Petri Nets will be used in the Core layer.","category":"page"},{"location":"layers/","page":"Layers of Abstraction","title":"Layers of Abstraction","text":"PNTD Sort value \nPnmlType Int \nAbstractContinuousNet Float64 \nAbstractHLCore DotConstant()) ","category":"page"},{"location":"layers/","page":"Layers of Abstraction","title":"Layers of Abstraction","text":"Use Union{Bool, Int, Float64, DictType} as the set of types that a Term's can contain. Consider Bool, Int, Float64 as builtin-sorts, and DictType as \"user defined\" sorts.","category":"page"},{"location":"layers/","page":"Layers of Abstraction","title":"Layers of Abstraction","text":"using  PNML, InteractiveUtils, Markdown\nlist_type(f) = for pntd in values(PNML.PnmlTypeDefs.pnmltype_map)\n    println(rpad(pntd, 15), \" -> \", f(pntd))\nend\n","category":"page"},{"location":"layers/#Type-Lookup-Layers","page":"Layers of Abstraction","title":"Type Lookup Layers","text":"","category":"section"},{"location":"layers/","page":"Layers of Abstraction","title":"Layers of Abstraction","text":"Petri Net Graph Object Types are parameterized by Label Types. What labels are \"allowed\" (syntax vs. semantics vs. schema vs. specification) is parameterized on the PNTD (Petri Net Type Definition).","category":"page"},{"location":"layers/","page":"Layers of Abstraction","title":"Layers of Abstraction","text":"See PnmlNets & AbstractPnmlObjects","category":"page"},{"location":"layers/#pnmltype_map","page":"Layers of Abstraction","title":"pnmltype_map","text":"","category":"section"},{"location":"layers/","page":"Layers of Abstraction","title":"Layers of Abstraction","text":"pnmltype_map","category":"page"},{"location":"layers/#PNML.PnmlTypeDefs.pnmltype_map-layers","page":"Layers of Abstraction","title":"PNML.PnmlTypeDefs.pnmltype_map","text":"The key Symbols are the supported kinds of Petri Nets. Maps to singletons.\n\n\n\n\n\n","category":"constant"},{"location":"layers/","page":"Layers of Abstraction","title":"Layers of Abstraction","text":"using PNML # hide\nPNML.PnmlTypeDefs.pnmltype_map","category":"page"},{"location":"layers/#pnmlnet_type","page":"Layers of Abstraction","title":"pnmlnet_type","text":"","category":"section"},{"location":"layers/","page":"Layers of Abstraction","title":"Layers of Abstraction","text":"pnmlnet_type","category":"page"},{"location":"layers/#PNML.pnmlnet_type-layers","page":"Layers of Abstraction","title":"PNML.pnmlnet_type","text":"\n\n\n\n","category":"function"},{"location":"layers/","page":"Layers of Abstraction","title":"Layers of Abstraction","text":"list_type(PNML.pnmlnet_type) # hide","category":"page"},{"location":"layers/#page_type","page":"Layers of Abstraction","title":"page_type","text":"","category":"section"},{"location":"layers/","page":"Layers of Abstraction","title":"Layers of Abstraction","text":"list_type(PNML.page_type) # hide","category":"page"},{"location":"layers/#place_type","page":"Layers of Abstraction","title":"place_type","text":"","category":"section"},{"location":"layers/","page":"Layers of Abstraction","title":"Layers of Abstraction","text":"list_type(PNML.place_type) # hide","category":"page"},{"location":"layers/#transition_type","page":"Layers of Abstraction","title":"transition_type","text":"","category":"section"},{"location":"layers/","page":"Layers of Abstraction","title":"Layers of Abstraction","text":"list_type(PNML.transition_type) # hide","category":"page"},{"location":"layers/#arc_type","page":"Layers of Abstraction","title":"arc_type","text":"","category":"section"},{"location":"layers/","page":"Layers of Abstraction","title":"Layers of Abstraction","text":"list_type(PNML.arc_type) # hide","category":"page"},{"location":"layers/#Label-Types","page":"Layers of Abstraction","title":"Label Types","text":"","category":"section"},{"location":"layers/","page":"Layers of Abstraction","title":"Layers of Abstraction","text":"AbstractLabels are parameterized by Value Types.","category":"page"},{"location":"layers/#marking_type","page":"Layers of Abstraction","title":"marking_type","text":"","category":"section"},{"location":"layers/","page":"Layers of Abstraction","title":"Layers of Abstraction","text":"list_type(PNML.marking_type) # hide","category":"page"},{"location":"layers/#condition_type","page":"Layers of Abstraction","title":"condition_type","text":"","category":"section"},{"location":"layers/","page":"Layers of Abstraction","title":"Layers of Abstraction","text":"list_type(PNML.condition_type) # hide","category":"page"},{"location":"layers/#inscription_type","page":"Layers of Abstraction","title":"inscription_type","text":"","category":"section"},{"location":"layers/","page":"Layers of Abstraction","title":"Layers of Abstraction","text":"list_type(PNML.inscription_type) # hide","category":"page"},{"location":"layers/#refplace_type","page":"Layers of Abstraction","title":"refplace_type","text":"","category":"section"},{"location":"layers/","page":"Layers of Abstraction","title":"Layers of Abstraction","text":"list_type(PNML.refplace_type) # hide","category":"page"},{"location":"layers/#reftransition_type","page":"Layers of Abstraction","title":"reftransition_type","text":"","category":"section"},{"location":"layers/","page":"Layers of Abstraction","title":"Layers of Abstraction","text":"list_type(PNML.reftransition_type) # hide","category":"page"},{"location":"layers/#Value-Types","page":"Layers of Abstraction","title":"Value Types","text":"","category":"section"},{"location":"layers/","page":"Layers of Abstraction","title":"Layers of Abstraction","text":"TBD","category":"page"},{"location":"#PNML-has-High-Level","page":"Index","title":"PNML has High Level","text":"","category":"section"},{"location":"","page":"Index","title":"Index","text":"Modules = [PNML]","category":"page"},{"location":"#PnmlTypeDefs","page":"Index","title":"PnmlTypeDefs","text":"","category":"section"},{"location":"","page":"Index","title":"Index","text":"Modules = [PnmlTypeDefs]","category":"page"},{"location":"#PnmlIDRegistries","page":"Index","title":"PnmlIDRegistries","text":"","category":"section"},{"location":"","page":"Index","title":"Index","text":"Modules = [PnmlIDRegistrys]","category":"page"},{"location":"subpackages/#Sub-packages-of-PNML","page":"Sub-packages of PNML","title":"Sub-packages of PNML","text":"","category":"section"},{"location":"subpackages/#PnmlTypeDefs","page":"Sub-packages of PNML","title":"PnmlTypeDefs","text":"","category":"section"},{"location":"subpackages/","page":"Sub-packages of PNML","title":"Sub-packages of PNML","text":"See PnmlTypeDefs","category":"page"},{"location":"subpackages/#PnmlIDRegistrys","page":"Sub-packages of PNML","title":"PnmlIDRegistrys","text":"","category":"section"},{"location":"subpackages/","page":"Sub-packages of PNML","title":"Sub-packages of PNML","text":"See PnmlIDRegistrys","category":"page"}]
}
