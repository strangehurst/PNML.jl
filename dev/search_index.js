var documenterSearchIndex = {"docs":
[{"location":"example2/#Page","page":"Page","title":"Page","text":"","category":"section"},{"location":"example2/#Stuff","page":"Page","title":"Stuff","text":"","category":"section"},{"location":"library/#Library-Reference","page":"Library Reference","title":"Library Reference","text":"","category":"section"},{"location":"library/","page":"Library Reference","title":"Library Reference","text":"Modules = [PNML]","category":"page"},{"location":"library/#PNML.PNML","page":"Library Reference","title":"PNML.PNML","text":"PNML\n\n!!! PNML.jl is still a work-in-progress.\n\nPetri Net Markup Language, is an XML-based format. PNML.jl reads a pnml model and emits an intermediate representation (IR). \n\nPetri Net Type Definitions (pntd) are defined using RelaxNG XML Schema files. It is possibly to create a non-standard pntd. Since validation is not a goal of PNML.jl, non-standard pntds can be used.\n\nNote that ISO is working on part 3 of the PNML standard covering pntd  (as of October 2021). It is for interchange of pnml models between different tools.\n\nThe intermediate representation (IR) represents the XML tree via named tuples, dictionaries, LabelledArrays (there is an interface duck here).  The tags of the XML are used as keys as much as possible.\n\nWhat is accepted as values is often a superset of what the pntd specifies. This can be thought of as duck-typing. Conforming to the pntd is not the role of the IR.\n\nSimpleNet\n\nCreated to be a end-to-end use case. And explore implementing something-that-works while building upon and improving the IR. Does not try to conform to any standard. Much of the complexity possible with pnml is ignored.\n\nThe first use is to recreate the lotka-volterra model from Petri.jl examples. Find it in the examples folder. This is a stochastic Petri Net.\n\nLiberties are taken with pnml, remember that standards-checking is not a goal. A less-simple consumer of the IR can impose standards-checking.\n\nTODO\n\nFeatures that have not been started:\n\nWrite pnml file\nUpdate pnml model\nCreate pnml model\n\nFeatures that are not complete:\n\npnml high-level marking, inscription, condition\npntd schemas \n\n  - specialize where? \n  - do not highjack tags, only use standard semantics\n* parsing of sort, terms, declarations\n* Symbolics support (is this where PnmlType is useful?)\n\ntoolspecific usage example\n\n\n*\n\nAcknowledgments\n\nMathML.jl\n\nIts function map architecture was adopted and per(permute|perverse|use)d in PNML.j.\n\n(Image: Stable) (Image: Dev) (Image: Build Status) (Image: Coverage)\n\n\n\n\n\n","category":"module"},{"location":"library/#PNML.INCLUDEXML","page":"Library Reference","title":"PNML.INCLUDEXML","text":"Include the XML as part of data.\n\n\n\n\n\n","category":"constant"},{"location":"library/#PNML.Maybe","page":"Library Reference","title":"PNML.Maybe","text":"Maybe of type T or nothing.\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.applymap","page":"Library Reference","title":"PNML.applymap","text":"\n\n\n\n","category":"constant"},{"location":"library/#PNML.default_pntd_map","page":"Library Reference","title":"PNML.default_pntd_map","text":"Map from Petri Net Type Definition (pntd) URI to Symbol. The URI used can be any string regardless of any violation of the PNML Specification. There is a companion map pnmltype_map that takes the symbol to a type object. The 'pntd symbol' should match the name used in the URI with inconvinient characters removed or replaced. For example, '-' is replaced by '_'.\n\n\n\n\n\n","category":"constant"},{"location":"library/#PNML.pnmltype_map","page":"Library Reference","title":"PNML.pnmltype_map","text":"The keys are the supported kinds of Petri Nets.\n\nProvides a place to abstract relationship of pntd name and implementation type. Allows multiple strings to map to the same parser implementation. Is a point at which different parser implmentations may be introduced.\n\n\n\n\n\n","category":"constant"},{"location":"library/#PNML.tagmap","page":"Library Reference","title":"PNML.tagmap","text":"Map XML tag names to parser functions.\n\n\n\n\n\n","category":"constant"},{"location":"library/#PNML.verifymap","page":"Library Reference","title":"PNML.verifymap","text":"Map tag names to verification methods.\n\n\n\n\n\n","category":"constant"},{"location":"library/#PNML.AbstractHLCore","page":"Library Reference","title":"PNML.AbstractHLCore","text":"abstract type AbstractHLCore <: PNML.AbstractPnmlCore\n\nBase of High Level Petri Net pntds.\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.AbstractPnmlCore","page":"Library Reference","title":"PNML.AbstractPnmlCore","text":"abstract type AbstractPnmlCore <: PNML.PnmlType\n\nMost minimal Petri Net type that is the foundation of all pntd.\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.Document","page":"Library Reference","title":"PNML.Document","text":"struct Document{N, X}\n\nnets::Any\nxml::Any\nreg::PNML.IDRegistry\n\nWrap the collection of PNML nets from a single XML tree.\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.HLCore","page":"Library Reference","title":"PNML.HLCore","text":"struct HLCore <: PNML.AbstractHLCore\n\nHigh-Level Petri Nets add large extensions to core. HLCore can be used for generic high-leve nets.\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.HLNet","page":"Library Reference","title":"PNML.HLNet","text":"struct HLNet <: PNML.AbstractHLCore\n\nHLNet is the most intricate High-Level Petri Net schema\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.HLPetriNet","page":"Library Reference","title":"PNML.HLPetriNet","text":"struct HLPetriNet{T} <: PNML.PetriNet\n\nid::Symbol\nnet::Dict{Symbol, Any}\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.HLPetriNet-Tuple{Dict{Symbol, Any}}","page":"Library Reference","title":"PNML.HLPetriNet","text":"HLPetriNet(net::Dict{Symbol, Any}) -> PNML.HLPetriNet{_A} where _A\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.IDRegistry","page":"Library Reference","title":"PNML.IDRegistry","text":"mutable struct IDRegistry\n\nids::Set{Symbol}\nlk::ReentrantLock\n\nHolds a set of pnml id symbols and a lock to allow safe reentrancy.\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.MalformedException","page":"Library Reference","title":"PNML.MalformedException","text":"struct MalformedException <: PnmlException\n\nmsg::String\nnode::EzXML.Node\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.MissingIDCounter","page":"Library Reference","title":"PNML.MissingIDCounter","text":"mutable struct MissingIDCounter\n\ni::Int64\nlk::ReentrantLock\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.MissingIDException","page":"Library Reference","title":"PNML.MissingIDException","text":"struct MissingIDException <: PnmlException\n\nmsg::String\nnode::EzXML.Node\n\nUse exception to allow dispatch and additional data presentation to user.\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.OpenNet","page":"Library Reference","title":"PNML.OpenNet","text":"struct OpenNet <: PNML.AbstractHLCore\n\nOpen Petri Net\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.PTNet","page":"Library Reference","title":"PNML.PTNet","text":"struct PTNet <: PNML.AbstractPnmlCore\n\nPlace-Transition Petri Nets add small extensions to core.\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.PT_HLPNG","page":"Library Reference","title":"PNML.PT_HLPNG","text":"struct PT_HLPNG <: PNML.AbstractHLCore\n\nPlace-Transition High-Level Petri Net Graph\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.PetriNet","page":"Library Reference","title":"PNML.PetriNet","text":"abstract type PetriNet\n\nAbstract type providing 2nd-level parsing of the intermediate representation of a single network in a PNML.Document.\n\nExtended\n\nSubtypes should map directly and simply to PnmlType.\n\nSince a PNML.Document can contain multiple networks it is possible that a higher-level will create multiple PNML.PetriNet instances, each a different subtype.\n\nPages are used for visual layout for humans. They can be merged into one page without loosing any Petri Net semantics. Often we will only work with merged pages.\n\nInterface\n\n#TODO define type for network IR: Wrap a single tag net's PnmlDict? We start a description of the net IR here. \n\nXML <net> tags are pnml nodes. These nodes are parsed into PnmlDict with keys\n\nkey value description\ntag XML tag name is standard in the IR\nid unique ID\nname text name, optional\ntools set of tool specific - possibly empty\nlabels set of generic \"pnml labels\" - possible empty\ntype PnmlType defines schema the XML should meet\ndeclarations defines high-level semantics of a net\npages set of pages - not empty\n\nSee pnml_common_defaults, pnml_node_defaults and  parse_net for more detail.\n\nXML <page> tags are also parsed into PnmlDict\n\nkey value description\ntag XML tag name is standard in the IR\nid unique ID\nname text name, optional\ntools set of tool specific - possibly empty\nlabels set of generic \"pnml labels\" - possible empty\nplaces set of places\ntrans set of transitions\narcs set of arcs\nrefP references to place on different page\nrefT references to transition on different page\ndeclarations only net & page tags have declarations\n\nSee parse_page, parse_net\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.PnmlCfg","page":"Library Reference","title":"PNML.PnmlCfg","text":"struct PnmlCfg\n\nContains configuration data. #TODO add something\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.PnmlCore","page":"Library Reference","title":"PNML.PnmlCore","text":"struct PnmlCore <: PNML.AbstractPnmlCore\n\nPnmlCore is the most minimal concrete Petri Net.\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.PnmlDict","page":"Library Reference","title":"PNML.PnmlDict","text":"mutable struct Dict{Symbol, Any} <: AbstractDict{Symbol, Any}\n\nAlias for Dict with expected value types for PNML intermediate representation.\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.PnmlException","page":"Library Reference","title":"PNML.PnmlException","text":"abstract type PnmlException <: Exception\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.PnmlType","page":"Library Reference","title":"PNML.PnmlType","text":"abstract type PnmlType\n\nAbstract root of a dispatch type based on Petri Net Type Definition (pntd).\n\nEach Petri Net Markup Language (PNML) network element will have a single pntd URI as a required type XML attribute. That URI could/should refer to a RelaxNG schema defining the syntax and semantics of the XML model.\n\nSee (`pnmltype_map)[@ref] for the map from type string to a  dispatch singleton.\n\nWithin PNML.jl no schema-level validation is done. Nor is any use made of the schema within the code. Schemas, UML, ISO Specification and papers used to inform the design. See https://www.pnml.org/ for details.\n\nIn is allowed by the PNML specification to omit validation with the presumption that some specialized, external tool can be applied, thus allowing the file format to be used for inter-tool communication with lower overhead.\n\nSome pnml files exist that do not use a valid type URI. However it is done, an appropriate subtype of PnmlType must be chosen. Refer to to_net_type and pnmltype_map for how to get from the URI string to a Julia type.\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.SimpleNet","page":"Library Reference","title":"PNML.SimpleNet","text":"struct SimpleNet{P, T, A, RT, RP, L, TI} <: PNML.PetriNet\n\nid::Symbol\nSame as the XML attribute of the same name.\nplace::Any\ntransition::Any\narc::Any\nrefT::Any\nrefP::Any\nlabel::Any\ntools::Any\n\nSimpleNet wraps the place, transition & arc collections of a single page of one net.\n\nOmits the page level of the pnml-defined hierarchy by collapsing down to one page. A multi-page net can be collpsed by removing referenceTransitions & referencePlaces, and merging pages into the first page. Only selected fields are merged.\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.StochasticNet","page":"Library Reference","title":"PNML.StochasticNet","text":"struct StochasticNet <: PNML.AbstractHLCore\n\nStochastic Petri Net\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.SymmetricNet","page":"Library Reference","title":"PNML.SymmetricNet","text":"struct SymmetricNet <: PNML.AbstractHLCore\n\nSymmetric Petri Net\n\n\n\n\n\n","category":"type"},{"location":"library/#PNML.TimedNet","page":"Library Reference","title":"PNML.TimedNet","text":"struct TimedNet <: PNML.AbstractHLCore\n\nTimed Petri Net\n\n\n\n\n\n","category":"type"},{"location":"library/#Base.isempty-Tuple{PNML.IDRegistry}","page":"Library Reference","title":"Base.isempty","text":"isempty(reg::PNML.IDRegistry) -> Bool\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.add_label!-Tuple{Dict{Symbol, Any}, Any}","page":"Library Reference","title":"PNML.add_label!","text":"add_label!(d::Dict{Symbol, Any}, node; kwargs...) -> Vector{Dict{Symbol, Any}}\n\n\nAdd node tod[:labels]. Return updated d[:labels].\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.add_nettype!-Union{Tuple{T}, Tuple{AbstractDict, Symbol, T}} where T<:PNML.PnmlType","page":"Library Reference","title":"PNML.add_nettype!","text":"add_nettype!(d::AbstractDict, s::Symbol, t::PNML.PnmlType) -> PNML.PnmlType\n\n\nAdd or replace mapping from symbol s to nettype dispatch singleton t.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.add_tool!-Tuple{Dict{Symbol, Any}, Any}","page":"Library Reference","title":"PNML.add_tool!","text":"add_tool!(d::Dict{Symbol, Any}, node; kwargs...) -> Vector{Dict{Symbol, Any}}\n\n\nAdd node tod[:tools]. Return updated d[:tools].\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.all_arcs-Tuple{PNML.SimpleNet, Symbol}","page":"Library Reference","title":"PNML.all_arcs","text":"all_arcs(s::PNML.SimpleNet, id::Symbol) -> Any\n\n\nReturn vector of arcs that have a source or target of transition id.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.allchildren","page":"Library Reference","title":"PNML.allchildren","text":"allchildren(tag, el) -> Vector{EzXML.Node}\nallchildren(tag, el, ns) -> Vector{EzXML.Node}\n\n\nReturn vector of 'elelement's immediate children withtag`.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.arc-Tuple{PNML.SimpleNet, Symbol}","page":"Library Reference","title":"PNML.arc","text":"arc(s::PNML.SimpleNet, id::Symbol) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.arc_ids-Tuple{PNML.SimpleNet}","page":"Library Reference","title":"PNML.arc_ids","text":"arc_ids(s::PNML.SimpleNet) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.arcs-Tuple{PNML.SimpleNet}","page":"Library Reference","title":"PNML.arcs","text":"arcs(s::PNML.SimpleNet) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.attribute_content-Tuple{Vector{EzXML.Node}}","page":"Library Reference","title":"PNML.attribute_content","text":"attribute_content(nv::Vector{EzXML.Node}; kwargs...) -> Dict{Symbol, Any}\n\n\nReturn PnmlDict with values that are vectors when there are multiple instances of a tag in 'nv' and scalar otherwise.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.attribute_elem-Tuple{Any}","page":"Library Reference","title":"PNML.attribute_elem","text":"attribute_elem(node; kwargs...)\n\n\nReturn PnmlDict after debug print of nodename. If element node has any children, each is placed in the dictonary with the tag name symbol as the key, repeated tags produce a vector as the value. Any XML attributes found are added as as key,value. to the tuple returned.\n\nNote that this will recursivly decend the well-formed XML.\n\nNote the assumption that children and content are mutually exclusive. Content is always a leaf element. However XML attributes can be anywhere in the hiearchy.\n\nExample\n\njulia> using PNML, EzXML\n\njulia> node = parse_node(xml\"\"\"<aaa id=\"FOO\">BAR</aaa>\"\"\"; reg=PNML.IDRegistry());\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.collapse_pages!","page":"Library Reference","title":"PNML.collapse_pages!","text":"Merge page content into the 1st page of each pnml net. Note that refrence nodes are still present. They can be removed later with deref!.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.compress","page":"Library Reference","title":"PNML.compress","text":"Copy PnmlDict with keys removed when paired with value of nothing.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.compress!-Union{Tuple{Vector{T}}, Tuple{T}} where T<:AbstractDict","page":"Library Reference","title":"PNML.compress!","text":"compress!(d::Array{T<:AbstractDict, 1}) -> Vector{T} where T<:AbstractDict\n\n\nIn-place PnmlDict keys removed when they are paired with value of nothing.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.condition","page":"Library Reference","title":"PNML.condition","text":"Return condition value of transition.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.conditions","page":"Library Reference","title":"PNML.conditions","text":"Return a vector of condition values for net s.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.deref!","page":"Library Reference","title":"PNML.deref!","text":"Remove reference nodes from arcs. Design intent expects collapse_pages! to have been applied so that everything is on one page.\n\nExamples\n\nAxioms\n\nAll ids in a PNML.Document are unique in that they only have one instance in the XML.\nA chain of reference Places or Transitions always ends at a Place or Transition.\nAll ids are valid.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.deref_place-Tuple{PNML.SimpleNet, Symbol}","page":"Library Reference","title":"PNML.deref_place","text":"deref_place(s::PNML.SimpleNet, id::Symbol) -> Any\n\n\nReturn id of referenced place.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.deref_transition-Tuple{PNML.SimpleNet, Symbol}","page":"Library Reference","title":"PNML.deref_transition","text":"deref_transition(s::PNML.SimpleNet, id::Symbol) -> Any\n\n\nReturn id of referenced transition.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.duplicate_id_action-Tuple{Symbol}","page":"Library Reference","title":"PNML.duplicate_id_action","text":"duplicate_id_action(id::Symbol)\n\n\nUse a global configuration to choose what to do when a duplicated pnml node id has been detected. Default is to do nothing.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.find_nets","page":"Library Reference","title":"PNML.find_nets","text":"Return nets of d matching the given pntd type.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.first_net-Tuple{PNML.Document}","page":"Library Reference","title":"PNML.first_net","text":"first_net(d::PNML.Document) -> Any\n\n\nReturn first net contained by d.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.firstchild","page":"Library Reference","title":"PNML.firstchild","text":"firstchild(tag, el) -> Union{Nothing, EzXML.Node}\nfirstchild(tag, el, ns) -> Union{Nothing, EzXML.Node}\n\n\nReturn up to 1 immediatechild of elementelthat is atag`.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.has_arc-Tuple{PNML.SimpleNet, Symbol}","page":"Library Reference","title":"PNML.has_arc","text":"has_arc(s::PNML.SimpleNet, id::Symbol) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.has_place-Tuple{PNML.SimpleNet, Symbol}","page":"Library Reference","title":"PNML.has_place","text":"has_place(s::PNML.SimpleNet, id::Symbol) -> Any\n\n\nIs there any place with id in net s?\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.has_refP-Tuple{PNML.SimpleNet, Symbol}","page":"Library Reference","title":"PNML.has_refP","text":"has_refP(s::PNML.SimpleNet, id::Symbol) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.has_refT-Tuple{PNML.SimpleNet, Symbol}","page":"Library Reference","title":"PNML.has_refT","text":"has_refT(s::PNML.SimpleNet, id::Symbol) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.has_transition-Tuple{PNML.SimpleNet, Symbol}","page":"Library Reference","title":"PNML.has_transition","text":"has_transition(s::PNML.SimpleNet, id::Symbol) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.id-Tuple{Dict{Symbol, Any}}","page":"Library Reference","title":"PNML.id","text":"id(node::Dict{Symbol, Any}) -> Symbol\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.id-Tuple{T} where T<:PNML.PetriNet","page":"Library Reference","title":"PNML.id","text":"id(s::PNML.PetriNet) -> Any\n\n\nReturn id field of s.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.in_out-Tuple{PNML.SimpleNet, Symbol}","page":"Library Reference","title":"PNML.in_out","text":"in_out(s::PNML.SimpleNet, t::Symbol) -> Tuple{LabelledArrays.LArray, LabelledArrays.LArray}\n\n\nReturn tuple of input, output labelled vectors with key of place ids and value of arc inscription's value. \n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.includexml-Tuple{Any}","page":"Library Reference","title":"PNML.includexml","text":"includexml(node)\n\n\nSet value of key :xml based on global configuration/control variable.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.inscription","page":"Library Reference","title":"PNML.inscription","text":"Return incription value of arc.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.isregistered-Tuple{PNML.IDRegistry, AbstractString}","page":"Library Reference","title":"PNML.isregistered","text":"isregistered(reg::PNML.IDRegistry, s::AbstractString) -> Bool\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.marking","page":"Library Reference","title":"PNML.marking","text":"Return marking value of a place p.\n\nExamples\n\njulia> using PNML\n\njulia> p = Dict(:marking => Dict(:value=>nothing));\n\njulia> PNML.marking(p)\n0\n\njulia> p = Dict(:marking => Dict(:value=>12.34));\n\njulia> PNML.marking(p)\n12.34\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.nets-Tuple{PNML.Document}","page":"Library Reference","title":"PNML.nets","text":"nets(d::PNML.Document) -> Any\n\n\nReturn all nets of d.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.next_missing_id-Tuple{PNML.MissingIDCounter}","page":"Library Reference","title":"PNML.next_missing_id","text":"next_missing_id(c::PNML.MissingIDCounter) -> Int64\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.node_summary","page":"Library Reference","title":"PNML.node_summary","text":"Pretty print the first n lines of the XML node. If io is not supplied, prints to the default output stream stdout. pp can be any pretty print method that takes (io::IO, node).\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.number_value-Tuple{AbstractString}","page":"Library Reference","title":"PNML.number_value","text":"Parse string as a number. First try integer then float.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_and-Tuple{Any}","page":"Library Reference","title":"PNML.parse_and","text":"parse_and(node; kwargs...)\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_arbitraryoperator-Tuple{Any}","page":"Library Reference","title":"PNML.parse_arbitraryoperator","text":"parse_arbitraryoperator(node; kwargs...)\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_arbitrarysort-Tuple{Any}","page":"Library Reference","title":"PNML.parse_arbitrarysort","text":"parse_arbitrarysort(node; kwargs...)\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_arc-Tuple{Any}","page":"Library Reference","title":"PNML.parse_arc","text":"parse_arc(node; kwargs...)\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_bool-Tuple{Any}","page":"Library Reference","title":"PNML.parse_bool","text":"parse_bool(node; kwargs...)\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_booleanconstant-Tuple{Any}","page":"Library Reference","title":"PNML.parse_booleanconstant","text":"parse_booleanconstant(node; kwargs...)\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_condition-Tuple{Any}","page":"Library Reference","title":"PNML.parse_condition","text":"parse_condition(node; kwargs...) -> Dict{Symbol, Any}\n\n\nAnnotation label of transition nodes. Meaning it can have text, graphics, et al.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_declaration-Tuple{Any}","page":"Library Reference","title":"PNML.parse_declaration","text":"parse_declaration(node; kwargs...)\n\n\nAttribute label of 'net' and 'page' nodes.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_declarations-Tuple{Any}","page":"Library Reference","title":"PNML.parse_declarations","text":"parse_declarations(node; kwargs...)\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_doc-Tuple{EzXML.Document}","page":"Library Reference","title":"PNML.parse_doc","text":"parse_doc(doc::EzXML.Document) -> PNML.Document{_A, _B} where {_A, _B}\n\n\nReturn a PNML.Document built from an XML Doncuent. A well formed PNML XML document has a single root node: 'pnml'.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_equality-Tuple{Any}","page":"Library Reference","title":"PNML.parse_equality","text":"parse_equality(node; kwargs...)\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_file-Tuple{Any}","page":"Library Reference","title":"PNML.parse_file","text":"parse_file(fn) -> PNML.Document{_A, _B} where {_A, _B}\n\n\nBuild pnml from a file.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_graphics-Tuple{Any}","page":"Library Reference","title":"PNML.parse_graphics","text":"parse_graphics(node; kwargs...) -> Dict{Symbol, Any}\n\n\nArcs, Annotations and Nodes (places, transitions, pages) have different graphics semantics. Return a dictonary with the union of possibilities.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_graphics_coordinate-Tuple{Any}","page":"Library Reference","title":"PNML.parse_graphics_coordinate","text":"parse_graphics_coordinate(node; kwargs...) -> Dict{Symbol, Any}\n\n\nCoordinates x, y are in points.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_graphics_fill-Tuple{Any}","page":"Library Reference","title":"PNML.parse_graphics_fill","text":"parse_graphics_fill(node; kwargs...) -> Dict{Symbol, Any}\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_graphics_font-Tuple{Any}","page":"Library Reference","title":"PNML.parse_graphics_font","text":"parse_graphics_font(node; kwargs...) -> Dict{Symbol, Any}\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_graphics_line-Tuple{Any}","page":"Library Reference","title":"PNML.parse_graphics_line","text":"parse_graphics_line(node; kwargs...) -> Dict{Symbol, Any}\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_hlinitialMarking-Tuple{Any}","page":"Library Reference","title":"PNML.parse_hlinitialMarking","text":"parse_hlinitialMarking(node; kwargs...) -> Dict{Symbol, Any}\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_hlinscription-Tuple{Any}","page":"Library Reference","title":"PNML.parse_hlinscription","text":"parse_hlinscription(node; kwargs...) -> Dict{Symbol, Any}\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_imply-Tuple{Any}","page":"Library Reference","title":"PNML.parse_imply","text":"parse_imply(node; kwargs...)\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_inequality-Tuple{Any}","page":"Library Reference","title":"PNML.parse_inequality","text":"parse_inequality(node; kwargs...)\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_initialMarking-Tuple{Any}","page":"Library Reference","title":"PNML.parse_initialMarking","text":"parse_initialMarking(node; kwargs...) -> Dict{Symbol, Any}\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_inscription-Tuple{Any}","page":"Library Reference","title":"PNML.parse_inscription","text":"parse_inscription(node; kwargs...) -> Dict{Symbol, Any}\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_label-Tuple{Any}","page":"Library Reference","title":"PNML.parse_label","text":"parse_label(node; kwargs...) -> Dict{Symbol, Any}\n\n\nShould not often have a 'label' tag, this will bark if one is found. Return minimal PnmlDict holding (tag,node), to defer parsing the xml.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_mulitsetsort-Tuple{Any}","page":"Library Reference","title":"PNML.parse_mulitsetsort","text":"parse_mulitsetsort(node; kwargs...)\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_name-Tuple{Any}","page":"Library Reference","title":"PNML.parse_name","text":"Return PnmlDict pnml name text and optional tool & GUI information.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_namedoperator-Tuple{Any}","page":"Library Reference","title":"PNML.parse_namedoperator","text":"parse_namedoperator(node; kwargs...)\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_net-Tuple{Any}","page":"Library Reference","title":"PNML.parse_net","text":"parse_net(node; kwargs...)\n\n\nReturn a dictonary of the pnml net with keys matching their XML tag names.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_node-Tuple{Any}","page":"Library Reference","title":"PNML.parse_node","text":"parse_node(node; verbose, kwargs...)\n\n\nTake a node and parse it by calling the method matching node.name from tagmap if that mapping exists, otherwise call attribute_elem. verbose is a boolean controlling debug logging.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_not-Tuple{Any}","page":"Library Reference","title":"PNML.parse_not","text":"parse_not(node; kwargs...)\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_or-Tuple{Any}","page":"Library Reference","title":"PNML.parse_or","text":"parse_or(node; kwargs...)\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_page-Tuple{Any}","page":"Library Reference","title":"PNML.parse_page","text":"parse_page(node; kwargs...)\n\n\nPNML requires at least on page.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_place-Tuple{Any}","page":"Library Reference","title":"PNML.parse_place","text":"parse_place(node; kwargs...)\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_pnml-Tuple{Any}","page":"Library Reference","title":"PNML.parse_pnml","text":"parse_pnml(node; kwargs...)\n\n\nStart parse from the pnml root node of the well formed XML document. Return a a named tuple containing vector of pnml petri nets.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_pnml_common!-Tuple{Dict{Symbol, Any}, Any}","page":"Library Reference","title":"PNML.parse_pnml_common!","text":"parse_pnml_common!(d::Dict{Symbol, Any}, node; kwargs...)\n\n\nUpdate d WITH graphics, tools, label children of pnml node and label elements. Used by parse_pnml_node_common! & parse_pnml_label_common!. Adds, graphics, tools, labels. Note that \"lables\" are the everything else option and this should be called after parsing any elements that has an expected tags.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_pnml_label_common!-Tuple{Dict{Symbol, Any}, Any}","page":"Library Reference","title":"PNML.parse_pnml_label_common!","text":"parse_pnml_label_common!(d::Dict{Symbol, Any}, node; kwargs...)\n\n\nUpdate d with  'text' and 'structure' children of node, defering other tags to parse_pnml_common!.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_pnml_node_common!-Tuple{Dict{Symbol, Any}, Any}","page":"Library Reference","title":"PNML.parse_pnml_node_common!","text":"parse_pnml_node_common!(d::Dict{Symbol, Any}, node; kwargs...)\n\n\nUpdate d with name children, defering other tags to parse_pnml_common!.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_productsort-Tuple{Any}","page":"Library Reference","title":"PNML.parse_productsort","text":"parse_productsort(node; kwargs...)\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_refPlace-Tuple{Any}","page":"Library Reference","title":"PNML.parse_refPlace","text":"parse_refPlace(node; kwargs...)\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_refTransition-Tuple{Any}","page":"Library Reference","title":"PNML.parse_refTransition","text":"parse_refTransition(node; kwargs...)\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_sort-Tuple{Any}","page":"Library Reference","title":"PNML.parse_sort","text":"parse_sort(node; kwargs...)\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_str-Tuple{Any}","page":"Library Reference","title":"PNML.parse_str","text":"parse_str(str) -> PNML.Document{_A, _B} where {_A, _B}\n\n\nBuild pnml from a string.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_structure-Tuple{Any}","page":"Library Reference","title":"PNML.parse_structure","text":"parse_structure(node; kwargs...)\n\n\nA pnml structure node can hold any well formed XML. Structure semantics will vary based on parent element and petri net type definition of the net. #TODO: Specialized structure parsers are needed. 2nd pass parser?\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_term-Tuple{Any}","page":"Library Reference","title":"PNML.parse_term","text":"parse_term(node; kwargs...)\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_text-Tuple{Any}","page":"Library Reference","title":"PNML.parse_text","text":"parse_text(node; kwargs...) -> Dict{Symbol, Any}\n\n\n\"Return the stripped string of text child's nodecontent as :content key of PnmlDict.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_tokengraphics-Tuple{Any}","page":"Library Reference","title":"PNML.parse_tokengraphics","text":"parse_tokengraphics(node; kwargs...) -> Dict{Symbol, Any}\n\n\nHigh-level place-transition nets (HL-PTNet) have a toolspecific structure defined for token graphics. Contains <tokenposition> tags.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_tokenposition-Tuple{Any}","page":"Library Reference","title":"PNML.parse_tokenposition","text":"parse_tokenposition(node; kwargs...) -> Dict{Symbol, Any}\n\n\nPosition is a coordinate relative to containing element. Units are points.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_toolspecific-Tuple{Any}","page":"Library Reference","title":"PNML.parse_toolspecific","text":"parse_toolspecific(node; kwargs...) -> Dict{Symbol, Any}\n\n\nReturn PnmlDict with tag name, tool & version attributes and content parsed. Anyone that can parse the :content may specialize on tool & version.\n\nThe content can be any well-formed xml. We use our usual parsing mechanism, which can be enhanced if someone makes a good case.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_transition-Tuple{Any}","page":"Library Reference","title":"PNML.parse_transition","text":"parse_transition(node; kwargs...)\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_tuple-Tuple{Any}","page":"Library Reference","title":"PNML.parse_tuple","text":"parse_tuple(node; kwargs...)\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_type-Tuple{Any}","page":"Library Reference","title":"PNML.parse_type","text":"parse_type(node; kwargs...)\n\n\nThese type of a place is different from net type or pntd. Used to define the \"sort\" of tokens held by the place and semantics of the marking.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_unparsed-Tuple{Any}","page":"Library Reference","title":"PNML.parse_unparsed","text":"parse_unparsed(node; kwargs...)\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_useroperator-Tuple{Any}","page":"Library Reference","title":"PNML.parse_useroperator","text":"parse_useroperator(node; kwargs...)\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_usersort-Tuple{Any}","page":"Library Reference","title":"PNML.parse_usersort","text":"parse_usersort(node; kwargs...)\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_variable-Tuple{Any}","page":"Library Reference","title":"PNML.parse_variable","text":"parse_variable(node; kwargs...)\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.parse_variabledecl-Tuple{Any}","page":"Library Reference","title":"PNML.parse_variabledecl","text":"parse_variabledecl(node; kwargs...)\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.place-Tuple{PNML.SimpleNet, Symbol}","page":"Library Reference","title":"PNML.place","text":"place(s::PNML.SimpleNet, id::Symbol) -> Any\n\n\nReturn the place with id in net s.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.place_ids-Tuple{PNML.SimpleNet}","page":"Library Reference","title":"PNML.place_ids","text":"place_ids(s::PNML.SimpleNet) -> Any\n\n\nReturn vector of place ids in s.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.places-Tuple{PNML.SimpleNet}","page":"Library Reference","title":"PNML.places","text":"places(s::PNML.SimpleNet) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.pnml_common_defaults-Tuple{Any}","page":"Library Reference","title":"PNML.pnml_common_defaults","text":"pnml_common_defaults(node) -> Dict{Symbol, Any}\n\n\nReturn Dict of tags common to both pnml nodes and pnml labels. See pnml_label_defaults and pnml_node_defaults.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.pnml_label_defaults-Tuple{Any, Vararg{Any, N} where N}","page":"Library Reference","title":"PNML.pnml_label_defaults","text":"pnml_label_defaults(node, xs...) -> Dict{Symbol, Any}\n\n\nMerge xs into dictonary with default pnml label tags. Used on pnml tags below a pnmlnode tag. Label level tags include: name, inscription, initialMarking. Notable differences from [`pnmlnodedefaults](@ref): text, structure, no name tag. See [pnmlcommon_defaults`](@ref).\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.pnml_node_defaults-Tuple{Any, Vararg{Any, N} where N}","page":"Library Reference","title":"PNML.pnml_node_defaults","text":"pnml_node_defaults(node, xs...) -> Any\n\n\nMerge xs into dictonary with default pnml node tags. Used on: net, page ,place, transition, arc. Usually default value will be nothing or empty vector. See pnml_label_defaults and pnml_common_defaults.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.pntd-Tuple{AbstractString}","page":"Library Reference","title":"PNML.pntd","text":"pntd(s::AbstractString) -> Symbol\n\n\nMap s to a pntd symbol. Any unknown s is mapped to pnmlcore.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.refplace-Tuple{PNML.SimpleNet, Symbol}","page":"Library Reference","title":"PNML.refplace","text":"refplace(s::PNML.SimpleNet, id::Symbol) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.refplace_ids-Tuple{PNML.SimpleNet}","page":"Library Reference","title":"PNML.refplace_ids","text":"refplace_ids(s::PNML.SimpleNet) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.refplaces-Tuple{PNML.SimpleNet}","page":"Library Reference","title":"PNML.refplaces","text":"refplaces(s::PNML.SimpleNet) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.reftransition-Tuple{PNML.SimpleNet, Symbol}","page":"Library Reference","title":"PNML.reftransition","text":"reftransition(s::PNML.SimpleNet, id::Symbol) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.reftransition_ids-Tuple{PNML.SimpleNet}","page":"Library Reference","title":"PNML.reftransition_ids","text":"reftransition_ids(s::PNML.SimpleNet) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.reftransitions-Tuple{PNML.SimpleNet}","page":"Library Reference","title":"PNML.reftransitions","text":"reftransitions(s::PNML.SimpleNet) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.register_id!-Tuple{PNML.IDRegistry, AbstractString}","page":"Library Reference","title":"PNML.register_id!","text":"register_id!(reg::PNML.IDRegistry, s::AbstractString) -> Symbol\n\n\nRegister id symbol and return the symbol.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.reset_registry!-Tuple{PNML.IDRegistry}","page":"Library Reference","title":"PNML.reset_registry!","text":"reset_registry!(reg::PNML.IDRegistry) -> Set{Symbol}\n\n\nEmpty the set of id symbols. Use case is unit tests. In normal use it should never be needed.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.source-Tuple{Any}","page":"Library Reference","title":"PNML.source","text":"source(arc) -> Symbol\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.src_arcs-Tuple{PNML.SimpleNet, Symbol}","page":"Library Reference","title":"PNML.src_arcs","text":"src_arcs(s::PNML.SimpleNet, id::Symbol) -> Any\n\n\nReturn vector of arcs that have a source of transition id.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.target-Tuple{Any}","page":"Library Reference","title":"PNML.target","text":"target(arc) -> Symbol\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.tgt_arcs-Tuple{PNML.SimpleNet, Symbol}","page":"Library Reference","title":"PNML.tgt_arcs","text":"tgt_arcs(s::PNML.SimpleNet, id::Symbol) -> Any\n\n\nReturn vector of arcs that have a  target of transition id.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.to_net_type","page":"Library Reference","title":"PNML.to_net_type","text":"Map either a text string or a symbol to a dispatch type singlton.\n\nWhile that string may be a URI for a pntd, we treat it as a simple string without parsing. The pnmltypemap and pntdmap are both assumed to be correct here.\n\nUnknown or empty uri will map to symbol :pnmlcore as part of the logic. Unknown symbol returns nothing.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.to_net_type_sym-Tuple{AbstractString}","page":"Library Reference","title":"PNML.to_net_type_sym","text":"to_net_type_sym(uri::AbstractString; pntd_map) -> Symbol\n\n\nWe map uri to a symbol using a dictionary like default_pntd_map. Return symbol that is a valid pnmltype_map key. Defaults to :pnmlcore.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.transition-Tuple{PNML.SimpleNet, Symbol}","page":"Library Reference","title":"PNML.transition","text":"transition(s::PNML.SimpleNet, id::Symbol) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.transition_function","page":"Library Reference","title":"PNML.transition_function","text":"Transition function of a Petri Net. Each transition has an input vector and an output vector. Each labelled vector is indexed by the place on the other end of the arc. Values are inscriptions.\n\n\n\n\n\n","category":"function"},{"location":"library/#PNML.transition_ids-Tuple{PNML.SimpleNet}","page":"Library Reference","title":"PNML.transition_ids","text":"transition_ids(s::PNML.SimpleNet) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.transitions-Tuple{PNML.SimpleNet}","page":"Library Reference","title":"PNML.transitions","text":"transitions(s::PNML.SimpleNet) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.validate-Tuple{Symbol}","page":"Library Reference","title":"PNML.validate","text":"validate(s::Symbol; pnmltype_map) -> Symbol\n\n\nLog a warning if s is not a known Petri Net Markup Language schema/pntd.\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.validate_arc-Tuple{Any}","page":"Library Reference","title":"PNML.validate_arc","text":"validate_arc(node)\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.validate_net-Tuple{Any}","page":"Library Reference","title":"PNML.validate_net","text":"validate_net(node)\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.validate_node-Tuple{Any}","page":"Library Reference","title":"PNML.validate_node","text":"validate_node(node) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.validate_page-Tuple{Any}","page":"Library Reference","title":"PNML.validate_page","text":"validate_page(node)\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.validate_place-Tuple{Any}","page":"Library Reference","title":"PNML.validate_place","text":"validate_place(node)\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.validate_pnml-Tuple{Any}","page":"Library Reference","title":"PNML.validate_pnml","text":"validate_pnml(node)\n\n\nCheck the <pnml> element against TODO. Return TODO\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.validate_transition-Tuple{Any}","page":"Library Reference","title":"PNML.validate_transition","text":"validate_transition(node)\n\n\n\n\n\n\n","category":"method"},{"location":"library/#PNML.@xml_str-Tuple{Any}","page":"Library Reference","title":"PNML.@xml_str","text":"Utility macro for parsing xml strings into node.\n\n\n\n\n\n","category":"macro"},{"location":"lotka-volterra/#Lotka-Volterra","page":"Lotka-Volterra","title":"Lotka-Volterra","text":"","category":"section"},{"location":"lotka-volterra/#Stuff","page":"Lotka-Volterra","title":"Stuff","text":"","category":"section"},{"location":"","page":"PNML.jl","title":"PNML.jl","text":"CurrentModule = PNML","category":"page"},{"location":"#PNML.jl","page":"PNML.jl","title":"PNML.jl","text":"","category":"section"},{"location":"","page":"PNML.jl","title":"PNML.jl","text":"Documentation for PNML.","category":"page"},{"location":"","page":"PNML.jl","title":"PNML.jl","text":"","category":"page"},{"location":"#Index","page":"PNML.jl","title":"Index","text":"","category":"section"},{"location":"","page":"PNML.jl","title":"PNML.jl","text":"","category":"page"},{"location":"pnml/#Petri-Net-Markup-Language","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"","category":"section"},{"location":"pnml/","page":"Petri Net Markup Language","title":"Petri Net Markup Language","text":"www.pnml.org","category":"page"},{"location":"pnml/#Stuff","page":"Petri Net Markup Language","title":"Stuff","text":"","category":"section"}]
}
